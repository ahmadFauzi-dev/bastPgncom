Ext.define('analisa.nonamr.view.korekrejecto' ,{
	extend: 'Ext.grid.Panel',    
	initComponent	: function()
	{
		
	Ext.define('modelComboRejectCategory',{
			extend	: 'Ext.data.Model',
			fields	: ['rowid','description']
		});	
		
	Ext.define('modelComboRejectField',{
			extend	: 'Ext.data.Model',
			fields	: ['rowid','tabel','kolom','description']
		});		

	
	var ComboRejectCategory = Ext.create('Ext.data.JsonStore',{
		model	: 'modelComboRejectCategory',
		storeId: 'idComboRejectCategory',
		proxy: {
			type: 'pgascomProxy',			
			url: base_url+'analisa/nonamr/loadrejectcategory',
			reader: {
				type: 'json',				
				root: 'data'
			}			
		}
	});	
	
	var ComboField = Ext.create('Ext.data.JsonStore',{
		model	: 'modelComboRejectField',
		storeId: 'idComboRejectField',
		proxy: {
			type: 'pgascomProxy',			
			url: base_url+'analisa/loadrejectfield',
			reader: {
				type: 'json',				
				root: 'data'
			}			
		}
	});
	
	ComboField.load();
	ComboRejectCategory.load();
	
	var editing = Ext.create('Ext.grid.plugin.RowEditing', {
		clicksToEdit: 1,
		listeners :
		{					
			'edit' : function (editor,e) {
					 
					var grid 	= e.grid;
					var record = e.record;					 
					var recordData = record.data; 		
						
			}
		}
	});
	
	var required = '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>';
	
	Ext.apply(this,{
			title  		: 'Non AMR Reject Koreksi',			
			frame		: true,
			store		: Init.storeGridCopy,
			id			: 'gridnonamrkorekrejecto',
			iconCls 	: 'cross',
		dockedItems: [
		{
			xtype: 'toolbar',
			items: [
				{	text: 'Cancel',
					iconCls : 'cancel',
					xtype : 'button',
					handler : 
					function() {
						var storetosubmit = Init.storeGridCopy;
						var dataobj = [];
						var asalnya = "";
						storetosubmit.each(function(record){
								//console.log();
								dataobj.push(record.data);
								asalnya = record.data.stat;
							});
							
						if(asalnya == "2"){
							var storeasal = Ext.getCmp('gridValidatenonamr').getStore();
						} else {
							var storeasal = Ext.getCmp('gridAnomalinonamr').getStore();
						}							
						
						Ext.getCmp('TabAsikAja').child('#gridnonamrkorekrejecto').tab.hide();
						Ext.getCmp('TabAsikAja').setActiveTab(0);

						storeasal.removeAll();
						storeasal.reload();
					}
				},
			
			
				{
					text: 'Send',
					iconCls : 'email_go',
					xtype : 'button',
					handler : 
					function() {                        
						// if (this.up('form').getForm().isValid()) {
                            // In a real application, this would submit the form to the configured url
							// console.log(Init.storeGridCopy);
                            var storetosubmit = Init.storeGridCopy;
							var dataobj = [];
							var datasubmit;
							var count = 0;
							var areaold = "";
							var areaval = "";
							var asalnya = "";
							storetosubmit.each(function(record){
								//console.log();
								dataobj.push(record.data);
								if(areaold == "")
								{
									areaold = record.data.area;
								}
								
								if(areaold != record.data.area)
								{
									count = count+1;
								}
								
								areaval = record.data.areacode;
								asalnya = record.data.status_alert;								
								
							});
							//console.log(count);
							datasubmit = Ext.encode(dataobj);
							// console.log(datasubmit);							
							
							if(count == 0)
							{
								/*Ext.Msg.show({
									msg		: 'Please Wait',
									wait	: true,
									buttons	: Ext.Msg.INFO,
									icon	: Ext.Msg.QUESTION
								});	*/
								
								Ext.Ajax.request({
								method : 'POST',
								url : base_url+'analisa/nonamr/updatereject',
								params: {
									datagrid : datasubmit,
									areaval	 : areaval
								},
								success: function(response){
									// var text = response.responseText;
									Ext.Msg.alert('Success', 'Email Telah di Kirim!!!');
									// console.log(asalnya);
									if(asalnya == "2"){
										var storeasal = Ext.getCmp('gridValidatenonamr').getStore();
									} else {
										var storeasal = Ext.getCmp('gridAnomalinonamr').getStore();
									}
																	
									// Ext.getCmp('TabAsikAja').remove('gridrejecto');
									Ext.getCmp('TabAsikAja').child('#gridnonamrkorekrejecto').tab.hide();
									Ext.getCmp('TabAsikAja').setActiveTab(0);

									setTimeout(function(){
										Ext.Msg.hide();											
									}, 5000);

									storeasal.removeAll();
									storeasal.reload();
								// process server response here
								}
								});
							}else
							{
								Ext.Msg.show({
									title	: 'Error',
									msg		: "Area yang di pilih lebih dari satu",
									buttons	: Ext.Msg.OK,
									icon	: Ext.Msg.ERROR,
								});
							}					
							
							/*
							
							this.up('form').getForm().submit(
							{
								params: {
									datagrid : datasubmit 
								},
								clientValidation	: true,				
								url					: base_url+'analisa/updatereject',
								success: function(form, action) {
									var result = action.result;
									win.hide();
									Init.storeGridCopy.removeAll();
									Ext.getCmp('TabAsikAja').remove('gridrejecto', true);
									// console.log(result);
								},
								failure: function(form, action) {
									switch (action.failureType) {
										case Ext.form.action.Action.CLIENT_INVALID:
										Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
										break;
										case Ext.form.action.Action.CONNECT_FAILURE:
										Ext.Msg.alert('Failure', 'Ajax communication failed');
										break;
										case Ext.form.action.Action.SERVER_INVALID:
										Ext.Msg.alert('Failure', action.result.msg);
									}
								}
							});	*/
											
							
							// this.up('form').getForm().reset();
                            // this.up('window').hide();
                            // Ext.MessageBox.alert('Success', 'Email Telah di kirim!');
                        }
                    					
					
				}]
		}],	
		columns		: [
			Ext.create('Ext.grid.RowNumberer',
				{
					header: 'No', 
					width: 40
				}
				),
			{
				text	: 'Tanggal',
				locked   : true,
				width		: 70,
				cls   : 'header-cell',
				align	: 'right',
				//type	: 'date',
				dataIndex	: 'tanggal_catat'
			},
			{
				text	: 'No Reff',
				locked   : true,
				width	: 100,
				cls   : 'header-cell',
				dataIndex	: 'id_pelanggan'
			},
			// {
				// text	: 'Nama Pelanggan',
				// locked   : true,
				// width	: 180,				
				// cls   : 'header-cell',
				// dataIndex	: 'namapel'
			// },
			// {
				// text	: 'Stream',
				// locked   : true,
				// align	: 'center',
				// width	: 50,
				// type	: 'int',				
				// dataIndex	: 'stream'
			// },				
			
			// {
				// text	: 'RD',
				// locked   : true,
				// width	: 75,
				// cls   : 'header-cell',
				// dataIndex	: 'sbu'
			// },
			// {
				// text	: 'Area',
				// locked   : true,
				// width	: 95,
				// cls   : 'header-cell',
				// dataIndex	: 'area'
			// },	
			{
				text : 'Category',
				width	: 250,
				dataIndex : 'kategori',
				editor		: {
					xtype	: 'combobox',
					name	: 'kategori',
					store	: ComboRejectCategory,
					queryMode	: 'local',
					displayField	: 'description',
					valueField	: 'description',
					// allowBlank: false
				}				
			},
			{
				text : 'Fields',
				width	: 200,
				dataIndex : 'field',
				editor		: {
					xtype	: 'combobox',
					name	: 'field',
					multiSelect : true,
					store	: ComboField,
					queryMode	: 'local',
					displayField	: 'description',
					valueField	: 'description',
					// allowBlank: false
				}				
				
			},
			{
				text	: 'Keterangan',
				// locked   : true,
				width	: 300,
				cls   : 'header-cell',
				dataIndex	: 'keterangan',
				editor		: {
					xtype	: 'textfield',
					name	: 'keterangan'
				}
			}
			
		],
		plugins	: editing,
		});
		
		this.callParent(arguments);
	}
	
	
});