Ext.define('analisa.view.gridapprovalamr' ,{
	extend: 'Ext.grid.Panel',    
	initComponent	: function()
	{
		var msclass = Ext.create('master.global.geteventmenu'); 
		var event = Ext.decode(msclass.getevent(Init.idmenu));
		
		Ext.define('modelGridApprovalamr',{
			extend	: 'Ext.data.Model',
			fields	: ['penyaluranid','typeapproved','id_pel','namapel','sbu','area','areacode','fdvm','fdvc','fp','ft','fvm','fvc','tanggal','status','stream','approved','reffamralertid','reffidamrbridgedaily','fdate','fmonth','fyear','fdatetime','ghvpel','energypel','volmscf','credate','creperson','selectopts','unapproved',
			'status_pel','isapproval','remarks','attribute2']
		});		
		
		var darecord ;
		var statusbar = Ext.create('Ext.ux.statusbar.StatusBar', {
				id: 'my-status',
				// defaults to use when the status is cleared:
				defaultText: 'Default status text',
				defaultIconCls: 'default-icon',
				// values to set initially:
				text: 'Ready',
				iconCls: 'ready-icon',
		});
		statusbar.setStatus({
			text: 'New status',
			iconCls: 'accept'
		});
		var storeGridApprovalamr = Ext.create('Ext.data.JsonStore',{
			remoteSort : true,
			model	: 'modelGridApprovalamr',
			storeId: 'amrAppStore',
			proxy: {
				type: 'pgascomProxy',			
				url: base_url+'analisa/findamrapproved',
				reader: {
					type: 'json',				
					root: 'data'
				}			
			}
		});
		
		storeGridApprovalamr.getProxy().extraParams = {
			//view : "v_penyaluranbulkdaily_real",
			isapproval : false,
			"filter[0][field]" : "isapproval",
			"filter[0][data][type]" : "numeric",
			"filter[0][data][comparison]" : "eq",
			"filter[0][data][value]" :1,
		
		};
		
		// storeGridApprovalamr.load();
		
		
		
		Ext.apply(this,{
		LoadMask 	: true,
		title  		: 'Data AMR Approved',
		iconCls 	: 'date',
		store		: storeGridApprovalamr,
		id			: 'gridapprovalamr',	
		multiSelect	: true,		
		selType		: 'checkboxmodel',
		selModel: {
				injectCheckbox: 0,
				pruneRemoved: false,
				showHeaderCheckbox: false
			},	
		dockedItems: [
		{
			xtype: 'toolbar',
			items: [
				{
					text	: 'Export',
					xtype : 'button',
					iconCls	: 'page_white_excel',
					hidden	: event.p_export,
					handler	: function()
					{
						window.location.href = base_url+'analisa/toexcelfinal?filter='+Ext.encode(Init.specialparams);
					}				
				},
				{
					text : 'Calculate',
					iconCls : 'calculator_link',
					hidden	: event.p_calculate,
					xtype : 'button',
					handler	: function()
					{
						var url = base_url+'analisa/recalculate';
						var params = storeGridApprovalamr.proxy.extraParams;
						params.offset = storeGridApprovalamr.currentPage;
						params.limit  = storeGridApprovalamr.pageSize;
						statusbar.showBusy();
						// console.log(storeGridApprovalamr);						
						
						Ext.Ajax.request({	 
						url: url,
						method: 'POST',
						params: params,
						success: function(response,requst){
							statusbar.clearStatus();
							Ext.Msg.alert('Success','Transaksi Sukses');
							storeGridApprovalamr.reload();
							
						},
						failure:function(response,requst)
						{
							Ext.Msg.alert('Fail !','Input Data Entry Gagal');
							Ext.Msg.alert('Warning!', 'Authentication server is unreachable : ' + action.response.responseText + "");
							return false;
						}

						});
						
					}
					
				},
				{
					text : 'Unapproved',
					iconCls : 'error_go',
					id		: 'unapproved_id',
					disabled: false,
					xtype : 'button',
					hidden	: event.p_unapproved,
					handler	: function()
					{
					Ext.Msg.confirm('Warning!', 'Anda Yakin..?', function(btn, text){
					//console.log(btn);
					if (btn == 'yes'){						
							var items = [];
							var count = 0;
								var areaold = "";
								var areaval = "";
							statusbar.showBusy();
							Ext.getCmp('unapproved_id').setDisabled(true);
							storeGridApprovalamr.each(function(record){
								
								if (record.data.selectopts == true)
								{
									items.push(record.data);
									if(areaold == "")
									{
										areaold = record.data.areacode;
									}
									
									if(areaold != record.data.areacode)
									{
										count = count+1;
									}
									
									areaval = record.data.areacode;
								}
							});
						//console.log(items);		
						
							if(count == 0)
								{
									Ext.Ajax.request({ 
										url			: base_url+'analisa/updateunapproved',
										method: 'POST',
										params:{
											data : Ext.encode(items),
											areaval	 : areaval
										},
										success: function(response,requst){	
											statusbar.clearStatus();	
											Ext.Msg.alert('Sukses','Data Telah di Unapproved');
											storeGridApprovalamr.removeAll();								
											storeGridApprovalamr.reload();
										},
										failure: function(response,requst)
										{
											Ext.Msg.alert('Fail !','Input Data Gagal');								
										}										
									});
								}else
								{
									Ext.Msg.show({
										title	: 'Error',
										msg		: "Area yang di pilih lebih dari satu",
										buttons	: Ext.Msg.OK,
										icon	: Ext.Msg.ERROR,
									});
								}
							
					
					} else {
											  
					}							
					});
						
					}
					
				},
				'->',
				{
					text	: 'Unapproved'
				},
				{
					xtype	: 'checkboxfield',
					handler	: function(field, value)
					{
						//console.log(value);
						
						var a = storeGridApprovalamr.getProxy().extraParams;
						//console.log(a);
						if(value == false)
						{
							
							
							storeGridApprovalamr.getProxy().extraParams = {
								//view : "v_penyaluranbulkdaily_real",
								isapproval : false,
								"filter[0][field]" : "isapproval",
								"filter[0][data][type]" : "numeric",
								"filter[0][data][comparison]" : "eq",
								"filter[0][data][value]" :1,
								startt	: a.startt,
								endd	: a.endd,
								id_pel	: a.id_pel,
								namapel	: a.namapel,
								sbu		: a.sbu,
								area	: a.area
								
							};
							
							
						}else
						{
							
							storeGridApprovalamr.getProxy().extraParams = {
								//view : "v_penyaluranbulkdaily_real",
								isapproval : true,
								"filter[0][field]" : "isapproval",
								//"filter[0][data][type]" : "numeric",
								"filter[11][data][type]" : "list",
								//"filter[0][data][comparison]" : "eq",
								"filter[0][data][value]" 	:"1,2",
								startt	: a.startt,
								endd	: a.endd,
								id_pel	: a.id_pel,
								namapel	: a.namapel,
								sbu		: a.sbu,
								area	: a.area,
								
							};
							
						}
						
						storeGridApprovalamr.load();
					}
				}				
				]
		},
		{
			xtype: 'pagingtoolbar',
			dock: 'bottom',
			store: storeGridApprovalamr,
			displayInfo: true,
			items		: statusbar
			/* ,
			items : [{
				xtype: 'button',
				text: 'Clear All',
				tooltip  : 'Clear Filters',
				iconCls  : 'page_white_magnify',
				handler:function(){
					cilukba.clearFilters();
					// cilukba.filters.clearFilters();
				}
			}] */
		}],	
		
		columns		: [
			Ext.create('Ext.grid.RowNumberer',
					{
						header: 'No', 
						width: 40
					}
					),
			{
				dataIndex	: 'typeapproved',
				text	: 'Status',
				width		: 50,
				align	: 'center',
				renderer : function(value, metaData, record, rowIdx, colIdx, store, view){
					
					//metaData.tdAttr= 'data-qtip="'+message+'"';
					var color = '';
					if(record.get('typeapproved') == "2")
					{
						if(record.get('isapproval') == "2") 
						{
							color = base_url+'asset/ico/agt_action_fail.png';
						} else 
						{
							color = base_url+'asset/ico/green_indicator.ico';
						}
						
					}else if(record.get('typeapproved') == "1")
					{
						if(record.get('isapproval') == "2") 
						{
							color = base_url+'asset/ico/agt_action_fail.png';
						} else 
						{
							color = base_url+'asset/ico/yellow_green_indicator.ico';
						}
						
					}else if(record.get('typeapproved') == "0")
					{
						
						if(record.get('isapproval') == "2") 
						{
							color = base_url+'asset/ico/agt_action_fail.png';
						} else 
						{
							color = base_url+'asset/ico/red_green_indicator.ico';
						}						
					} 
					return '<div><img src='+color+' width="16px" height="16px"></div>';
					
				}
			},
			{
				text	: 'RD',
				width	: 70,
				cls   : 'header-cell',
				dataIndex	: 'sbu'
			},
			{
				text	: 'Area',
				width	: 90,
				cls   : 'header-cell',
				dataIndex	: 'area'
			},			
			{
				text	: 'No Reff',
				width	: 90,
				cls   : 'header-cell',					
				dataIndex	: 'id_pel'
			},
			{
				text	: 'Nama Pelanggan',
				width	: 120,
				align	: 'left',
				dataIndex	: 'namapel'
			},
			{
				text : 'Status <br />Pelanggan',
				cls   : 'header-cell',
				width		: 100,
				align	: 'left',				
				dataIndex : 'status_pel',
				
			},			
			{
				text	: 'Stream',
				align	: 'center',
				width	: 40,
				dataIndex	: 'stream'
			},		
			{
				text	: 'Tanggal',
				width		: 80,
				cls   : 'header-cell',
				align	: 'right',
				dataIndex	: 'tanggal'
			},		
			{
				text	: 'P <br />(Bar)',				
				width	: 120,
				cls   	: 'header-cell',
				align	: 'right',
				dataIndex	: 'fp',
				renderer	: function(value, metaData, record, rowIdx, colIdx, store, view)
				{
					return Ext.util.Format.number(value, '0,000.0000');
					
				}

			},
			{
				text	: 'T <br />(Celcius / Kelvin)',				
				width		: 120,
				cls   : 'header-cell',
				align	: 'right',
				dataIndex	: 'ft',
				renderer	: function(value, metaData, record, rowIdx, colIdx, store, view)
				{
					return Ext.util.Format.number(value, '0,000.0000');
					
				}
			},
			{
				text	: 'Volume <br />(m3)',
				width		: 120,
				cls   : 'header-cell',
				align	: 'right',
				dataIndex	: 'fdvc',
				renderer	: function(value, metaData, record, rowIdx, colIdx, store, view)
				{
					return Ext.util.Format.number(value, '0,000.0000');
					
				}
			},				
			{
				text : 'Volume <br />(MSCF)',
				cls   : 'header-cell',
				width		: 120,
				align	: 'right',
				dataIndex : 'volmscf',
				renderer	: function(value, metaData, record, rowIdx, colIdx, store, view)
				{
					return Ext.util.Format.number(value, '0,000.0000');
					
				}
			},
			{
				text : 'GHV <br />(BTU/SCF)',
				cls   : 'header-cell',
				width		: 120,
				align	: 'right',
				
				dataIndex : 'ghvpel',
				renderer	: function(value, metaData, record, rowIdx, colIdx, store, view)
				{
					return Ext.util.Format.number(value, '0,000.0000');
					
				}
			},			
			{
				text : 'Energy <br />(MMBTU)',
				width		: 120,
				align	: 'right',
				cls   : 'header-cell',
				dataIndex : 'energypel',
				renderer	: function(value, metaData, record, rowIdx, colIdx, store, view)
				{
					return Ext.util.Format.number(value, '0,000.0000');
					
				}
			},
			{	
				text	: 'Keterangan',
				//align	: 'right',
				cls   : 'header-cell',
				dataIndex : 'remarks',
				tdCls	  : 'wrap-text'
			},
			{	
				text	: 'Asset <br />Number',
				//align	: 'right',
				cls   : 'header-cell',
				dataIndex : 'attribute2',
				tdCls	  : 'wrap-text'
			},			
			{
				text	: 'Created by',
				width		: 100,
				cls   : 'header-cell',
				// align	: 'right',
				// type	: 'float',
				dataIndex	: 'creperson'
			},
			{
				text	: 'Created date',
				width		: 100,
				cls   : 'header-cell',
				align	: 'right',
				// type	: 'float',
				dataIndex	: 'credate'
			}		
		],
		listeners	: 
		{
			/* beforeitemcontextmenu: function(view, record, item, index, e)
			{
				e.stopEvent();
				k_menu.showAt(e.getXY());
			},
			itemclick	: function(view, record, item, index, e, eOpts)
			{
				darecord = record.data ;
				//console.log(darecord);
			},
			selectionchange: function (view, record, item, index, e, eOpts) {
					//console.log('selectionchange fired'+index);
			}, */
			select: function (model, record, index, eOpts) {
				// console.log(record.data);
				//record.data.selectopts = true;
				record.set('selectopts',true);
				if(record.get('isapproval') == "2"){
					Ext.getCmp('unapproved_id').setDisabled(true);
				} else {
					Ext.getCmp('unapproved_id').setDisabled(false);
				}
				record.set('unapproved', '1');
			},
			deselect: function (view, record, item, index, e, eOpts) {
				//console.log('deselect fired'+index);
				//record.data.selectopts = false;
				record.set('selectopts',false);
				record.set('unapproved', '0');
			}
			
		}
		});
		this.callParent(arguments);
	}
})