Ext.define('analisa.bulk.view.gridanomalihourly' ,{
	extend: 'Ext.grid.Panel',
    //alias : 'widget.formco',
	initComponent	: function()
	{
		var filter = [];
		var msclass 			= Ext.create('master.global.geteventmenu');
		var model 				= msclass.getmodel('v_penyaluranstationhourly');
		//model.push('selectopts');
		/*
		Ext.define('modelGridvkel',{
			extend	: 'Ext.data.Model',
			fields	: ['key_data','tanggal','sbu','area',
			{name: 'incompleted', type : 'int'},
			{name: 'jmlh_pel', type : 'int' },
			{name: 'completed', type : 'int' },
			{name: 'anomali', type : 'int' },
			{name: 'validate', type : 'int' }]
		});	
		*/
		//var model = [{
			//
		//}];
		model.push({
			name	: 'mmscfd', type	: 'number'
		},
		{
			name	: 'totalizer_mmbtu', type : 'number'
		},
		{
			name 	: 'totalizer_volume', type	: 'number'
		},
		{
			name 	: 'totalizer_energy', type	: 'number'
		},
		{
			name	: 'prevdayghv', type	: 'number'
		},
		{
			name	: 'pressureinlet', type	: 'number'
		},
		{
			name	: 'pressureoutlet', type	: 'number'
		},
		{
			name	: 'temperature', type	: 'number'
		});
		
		var store 				=  msclass.getstore(model,'v_penyaluranstationhourly',filter);
		var formuploaddokhourly = Ext.create('analisa.bulk.view.formuploaddokanomalihourly');
		var winuploaddokhourly;
			
		
		var editing = Ext.create('Ext.grid.plugin.RowEditing',{
			 clicksToEdit: 2,
			 listeners :
				{					
				'edit' : function (editor,e) {
						 
						 var grid 	= e.grid;
						 var record = e.record;
						 
						var recordData = record.data; 
							Ext.Ajax.request({ 
								
								url: base_url+'admin/updatedatabulkhourly',
								method: 'POST',
								params: recordData,
								success: function(response,requst){
									//workflowGrid.load();
									//console.log(response.text);
									//alert('test');
									//storegridstationconfigdetail.reload();
									store.reload();
								},
								failure:function(response,requst)
								{
									Ext.Msg.alert('Fail !','Input Data Entry Gagal');
									Ext.Msg.alert('Warning!', 'Authentication server is unreachable : ' + action.response.responseText + "");
								}
											
							})
							
					}
				}
		});
		Ext.apply(this,{
			store		: store,
			id			: ''+Init.idmenu+'gridanomalihourly',
			title		: 'Penyaluran Data Hourly',
			features: [{
				ftype: 'summary'
			}],
			selModel: {
				selType: 'checkboxmodel',
				mode: 'MULTI',
				checkOnly: true
			},
			tbar		: [
			{
				text	: 'Export',
				iconCls	: 'page_white_excel',
				handler	: function()
				{
					msclass.exportdata(''+Init.idmenu+'gridanomalihourly','v_penyaluranstationhourly_real');
				}
			},
			{
				text	: 'Rebatch',
				iconCls	: 'arrow_refresh',
				handler	: function()
				{	
					store.reload();
					
				}
			},
			{
				text	: 'Approve',
				iconCls	: 'accept',
				handler	: function()
				{
					store.each(function(record){
					  
					  if(record.data.selectopts == true)
					  {
							Ext.Ajax.request({	 
								
								url: base_url+'admin/inserttofinhourly',
								method: 'POST',
								params: record.data,
								success: function(response,requst){
									
									store.reload();
									//storegridstationconfigdetail.reload();
								},
								failure:function(response,requst)
								{
									Ext.Msg.alert('Fail !','Input Data Entry Gagal');
									Ext.Msg.alert('Warning!', 'Authentication server is unreachable : ' + action.response.responseText + "");
								}
											
							});
							
					  }
					  
					});
					store.reload();
				}
			},
			{
				text	: 'Reject',
				iconCls : 'cancel'
			},
			{
				text	: 'Upload Dokumen Pendukung',
				iconCls	: 'book_go',
				handler	: function()
				{
					if(!winuploaddokhourly)
					{
						winuploaddokhourly = Ext.widget('window', {
									title		: "Upload Dokumen",
									closeAction	: 'hide',
									width		: 400,
									//height		: 260,
									autoScroll	:true,
									id			: ''+Init.idmenu+'winuploaddokhourly',
									resizable	: true,
									modal		: true,
									bodyPadding	: 5,
									items		: formuploaddokhourly
						});
					}
					winuploaddokhourly.show();
				}
				//iconCls	: 'brick_go'
			},
			{
				text	 : 'Set Null Value',
				iconCls  : 'bug_edit',
				handler	 : function()
				{
					//Init.storehourlynull = Ext.getCmp(''+Init.idmenu+'gridanomalihourly').;
					
						 var gridtaksasi = Ext.getCmp(''+Init.idmenu+'gridanomalihourly');
							Init.storetaksasi =  gridtaksasi.getStore();
							Init.storetaksasi.removeAll();
					
							store.each(function(record){
							  console.log(record.data.selectopts);	
							  if(record.data.selectopts == true)
							  {
									Init.storetaksasi.add(record.copy());
							  }
							});
						
					console.log(Init.storetaksasi);
					store.reload();	
						
				}
			}],
			columns		: [
			Ext.create('Ext.grid.RowNumberer',{header:'No'}),
			{
				dataIndex	: 'statusdata',
				width		: 30,
				locked   : true,
				renderer : function(value, metaData, record, rowIdx, colIdx, store, view){
					
					//metaData.tdAttr= 'data-qtip="'+message+'"';
					var color = '';
					if(record.get('statusdata') == "1")
					{
						color = base_url+'asset/ico/green_indicator.ico';
					}else /* if(record.get('statusdata') == "0") */
					{
						color = base_url+'asset/ico/red_indicator.ico';
						// color = base_url+'asset/ico/red_indicator.ico';
					}
					//color = base_url+'asset/ico/green_indicator.ico';
					return '<div><img src="'+color+'" width="15px" height="15px"></div>';
					
				}
			},
			{
				text	: 'station',
				align	: 'center',
				locked   : true,
				dataIndex	: 'nama_station'
			},
			{
				text	: 'Tanggal',
				align	: 'center',
				locked   : true,
				dataIndex	: 'tanggal_pengukuran'
			},
			{
				text	: 'Jam',
				locked   : true,
				dataIndex	: 'jam_pengukuran'
			},
			{
				text			: 'Volume (MSCF)',
				cls   	: 'header-cell',
				align	: 'right',
				dataIndex		: 'mmscfd',
				summaryType		: 'sum',
				//xtype			: 'numbercolumn',
				summaryRenderer: function(value, meta, rec) {
					Ext.util.Format.thousandSeparator = '.';
					Ext.util.Format.decimalSeparator = ',';
					return Ext.util.Format.number(value, '0,000.0000');
				},
				editor		: {
					xtype	: 'numberfield',
					allowDecimals: true,
					decimalPrecision: 14,
					name	: 'mmscfd'
				}
			},
			{
				text			: 'Energy <br /> (MMBTU)',
				cls   	: 'header-cell',
				align	: 'right',
				dataIndex		: 'totalizer_mmbtu',
				summaryType		: 'sum',
				cls   	: 'header-cell',
				align	: 'right',
				//xtype			: 'numbercolumn',
				summaryRenderer: function(value, meta, rec) {
					Ext.util.Format.thousandSeparator = '.';
					Ext.util.Format.decimalSeparator = ',';
					return Ext.util.Format.number(value, '0,000.0000');
				},
				editor		: {
					xtype	: 'numberfield',
					allowDecimals: true,
					decimalPrecision: 14,
					name	: 'totalizer_mmbtu'
				}
			},
			{
				text			: 'Totalizer Volume <br /> (MSCF)',
				align			: 'center',
				dataIndex		: 'totalizer_volume',
				cls   			: 'header-cell',
				align			: 'right',
				summaryType		: 'sum',
				//format			: '0,000.00',
				align			: 'right',
				summaryRenderer: function(value, meta, rec) {
					//meta.style = "font-weight: bold;font-size: 13px;";
					Ext.util.Format.thousandSeparator = '.';
					Ext.util.Format.decimalSeparator = ',';
					return Ext.util.Format.number(value, '0,000.0000');
					//field : {type : 'number'}
					//return value
				},
				//xtype	: 'numbercolumn',
				editor		: {
					xtype	: 'numberfield',
					allowDecimals: true,
					decimalPrecision: 14,
					name	: 'totalizer_volume'
				}
				
			},
			{
				text	: 'Totalizer Energy <br /> (MMBTU)',
				cls   	: 'header-cell',
				align	: 'right',
				dataIndex	: 'totalizer_energy',
				summaryType: 'sum',
				summaryRenderer: function(value, meta, rec) {
					Ext.util.Format.thousandSeparator = '.';
					Ext.util.Format.decimalSeparator = ',';
					return Ext.util.Format.number(value, '0,000.0000');
				},
				editor		: {
					xtype	: 'numberfield',
					allowDecimals: true,
					decimalPrecision: 14,
					name	: 'totalizer_energy'
				}
			},
			{
				text	: 'GHV <br /> (BTU/SCF)',
				cls   	: 'header-cell',
				align	: 'right',
				dataIndex	: 'prevdayghv',
				summaryType: 'average',
				summaryRenderer: function(value, meta, rec) {
					Ext.util.Format.thousandSeparator = '.';
					Ext.util.Format.decimalSeparator = ',';
					return Ext.util.Format.number(value, '0,000.0000');
				},
				editor		: {
					xtype	: 'numberfield',
					allowDecimals: true,
					decimalPrecision: 14,
					name	: 'prevdayghv'
				}
			},
			{
				text	: 'Tekanan IN <br /> (PSIG)',
				cls   	: 'header-cell',
				align	: 'right',
				dataIndex	: 'pressureinlet',
				summaryType: 'average',
				summaryRenderer: function(value, meta, rec) {
					Ext.util.Format.thousandSeparator = '.';
					Ext.util.Format.decimalSeparator = ',';
					return Ext.util.Format.number(value, '0,000.0000');
				},
				editor		: {
					xtype	: 'numberfield',
					allowDecimals: true,
					decimalPrecision: 14,
					name	: 'pressureinlet'
				}
			},
			{
				text	: 'Tekanan OUT <br /> (PSIG)',
				cls   	: 'header-cell',
				align	: 'right',
				dataIndex	: 'pressureoutlet',
				summaryType: 'average',
				summaryRenderer: function(value, meta, rec) {
					Ext.util.Format.thousandSeparator = '.';
					Ext.util.Format.decimalSeparator = ',';
					return Ext.util.Format.number(value, '0,000.0000');
				},
				editor		: {
					xtype	: 'numberfield',
					allowDecimals: true,
					decimalPrecision: 14,
					name	: 'pressureoutlet'
				}
			},
			{
				text		: 'Temperature',
				cls   	: 'header-cell',
				align	: 'right',
				dataIndex	: 'temperature',
				summaryType: 'average',
				summaryRenderer: function(value, meta, rec) {
					Ext.util.Format.thousandSeparator = '.';
					Ext.util.Format.decimalSeparator = ',';
					return Ext.util.Format.number(value, '0,000.0000');
				},
				editor		: {
					xtype	: 'numberfield',
					allowDecimals: true,
					decimalPrecision: 14,
					name	: 'temperature'
				}
			},
			{
				text		: 'Status Approve',
				align		: 'center',
				dataIndex	: 'statusapproval'
			},
			{
				text		: 'Keterangan'
			}],
			plugins		: editing,
			bbar: Ext.create('Ext.PagingToolbar', {
				pageSize: 10,
				store: store,
				displayInfo: true
			}),
			listeners	: 
			{
				beforeitemcontextmenu: function(view, record, item, index, e)
				{
					e.stopEvent();
					//gridMenu.showAt(e.getXY());
				},
				itemclick	: function(view, record, item, index, e, eOpts)
				{
					//console.log(record.data);
					/*
					var data = record.data;
					var grid = Ext.getCmp(''+Init.idmenu+'griddetailmessagehourly');
					var griddok = Ext.getCmp(''+Init.idmenu+'griddokrefhourlyanomali');
					var storegrid = grid.getStore();
					var storedokref = griddok.getStore();
					
					storedokref.getProxy().extraParams = {
						view : "v_docreff",
							"filter[0][field]" : "reffidpengukuran",
							"filter[0][data][type]" : "string",
							"filter[0][data][comparison]" : "eq",
							"filter[0][data][value]" :data.rowid,
							
					};	
					
					storegrid.getProxy().extraParams = {
						view : "v_detaiilmessage",
							"filter[0][field]" : "reffrowid",
							"filter[0][data][type]" : "string",
							"filter[0][data][comparison]" : "eq",
							"filter[0][data][value]" :data.rowid,
							
							"filter[1][field]" : "value",
							"filter[1][data][type]" : "string",
							"filter[1][data][comparison]" : "eq",
							"filter[1][data][value]" :'0',
							
							
					};
					storegrid.reload();
					storedokref.reload();
					*/
				},
				selectionchange: function (view, record, item, index, e, eOpts) {
					//console.log('selectionchange fired'+index);
				},
				select: function (model, record, index, eOpts) {
					//console.log(record.data);
					//record.data.selectopts = true;
					//console.log(record.data);
					var data = record.data;
					var grid = Ext.getCmp(''+Init.idmenu+'griddetailmessagehourly');
					var griddok = Ext.getCmp(''+Init.idmenu+'griddokrefhourlyanomali');
					var storegrid = grid.getStore();
					var storedokref = griddok.getStore();
					
					storedokref.getProxy().extraParams = {
						view : "v_docreff",
							"filter[0][field]" : "reffidpengukuran",
							"filter[0][data][type]" : "string",
							"filter[0][data][comparison]" : "eq",
							"filter[0][data][value]" :data.rowid,
							
					};	
					
					storegrid.getProxy().extraParams = {
						view : "v_detaiilmessage",
							"filter[0][field]" : "reffrowid",
							"filter[0][data][type]" : "string",
							"filter[0][data][comparison]" : "eq",
							"filter[0][data][value]" :data.rowid,
							
							"filter[1][field]" : "value",
							"filter[1][data][type]" : "string",
							"filter[1][data][comparison]" : "eq",
							"filter[1][data][value]" :'0',
							
							
					};
					storegrid.reload();
					storedokref.reload();
					record.set('selectopts',true);
				},
				deselect: function (view, record, item, index, e, eOpts) {
					//console.log('deselect fired'+index);
					//record.data.selectopts = false;
					record.set('selectopts',false);
				}
			}
		});
		this.callParent(arguments);
	}
})