Ext.define('monitoring.view.gridareavalidasidetail' ,{
	extend: 'Ext.grid.Panel',
	initComponent	: function()
	{
		Ext.define('modelGridareavalDetail',{
			extend	: 'Ext.data.Model',
			fields	: ['pelanggan','sbu','area','tanggal','stream','keterangan',
			'no_reff','volume_m3', 'status_alert',
			'volmscf','energy_mmbtu','ghv_btuperscf','station']			
		});		
		
		var storeGridareavalDetail = Ext.create('Ext.data.JsonStore',{
			remoteSort : true,
			model	: 'modelGridareavalDetail',
			storeId: 'storeGridareavalDetail',
			proxy: {
				type: 'pgascomProxy',			
				url: base_url+'analisa/monitoring/findareavalidasidetailamr',
				reader: {
					type: 'json',				
					root: 'data'
				}			
			}
		});	
		
		Ext.apply(this, {
		loadMask: true, 
		columnLines: true, 
		store		: storeGridareavalDetail,
		id			: 'GridareavalidasiDetail',		
		dockedItems: [		
		{
			xtype: 'pagingtoolbar',
			dock: 'bottom',
			store: storeGridareavalDetail,
			displayInfo: true,
			// plugins : [Ext.create('Ext.ux.PagingToolbarResizer')]
		}],	
		//features	: [filtersCfg],
		
		// defaults: { 
			// renderer: function(value, metaData, record, row, col, store, gridView) {
						// if (record.data.h01 === null) {
							// meta.style = "background-color:red;";
						  // return '-';
						// } else {
						  // return record.data.h01;
						// }
					// },	
            // type: 'float'
        // },
		
		columns		: [
			Ext.create('Ext.grid.RowNumberer',
			{
				header: 'No', 
				width: 40
			}
			),
			{
				text	: 'Status',			
				width		: 100,
				cls   : 'header-cell',
				dataIndex	: 'status_alert'
			},
			{
				text	: 'Tanggal',
				// locked   : true,
				width		: 75,
				cls   : 'header-cell',				
				dataIndex	: 'tanggal',
				// autoSizeColumn : true
				
			},
			{
				text	: 'RD',
				// locked   : true,
				width		: 75,
				cls   : 'header-cell',				
				dataIndex	: 'sbu',
				// autoSizeColumn : true
			},
			{
				text	: 'Area',
				// locked   : true,
				width		: 100,
				cls   : 'header-cell',
				// autoSizeColumn : true,
				dataIndex	: 'area'
			},			
			{
				text	: 'No Reff',
				// locked   : true,
				width		: 100,
				cls   : 'header-cell',	
				autoSizeColumn : true,
				dataIndex	: 'no_reff'
			},
			{
				text	: 'Nama Pelanggan',
				// locked   : true,
				width		: 100,
				cls   : 'header-cell',	
				// autoSizeColumn : true,				
				dataIndex	: 'pelanggan'
			},			
			{
				text	: 'Stream',
				width		: 50,
				type : 'float',
				cls   : 'header-cell',
				// locked   : true,
				// autoSizeColumn : true,
				dataIndex	: 'stream'
			},
				
			{
				text	: 'Volume (m3)',
				// type : 'float',
				width		: 100,
				cls   : 'header-cell',
				align	: 'right',
				dataIndex	: 'volume_m3'
			},			
			{
				text	: 'Volume (mscf)',
				// type : 'float',
				width		: 100,
				cls   : 'header-cell',
				align	: 'right',
				dataIndex	: 'volmscf'
			},
			{
				text	: 'GHV (btu/scf)',
				// type : 'float',
				width		: 100,
				cls   : 'header-cell',
				align	: 'right',
				dataIndex	: 'ghv_btuperscf'
			},	
			{
				text	: 'Energy (mmbtu)',
				// type : 'float',
				width		: 100,
				cls   : 'header-cell',
				align	: 'right',
				dataIndex	: 'energy_mmbtu'
			},			
			{
				text	: 'Station',
				// type : 'float',
				width		: 100,
				cls   : 'header-cell',
				align	: 'left',
				dataIndex	: 'station'
			},			
		],	
		
		/*listeners	: 
		{
			beforeselect: function(model, record, index, eOpts) {
				if (record.data.stat == 0) {//replace this with your logic.
					return false;
				}
			},
			itemclick : function(model, record, index, eOpts)
			{
				storeGridAnomaliDetail.reload({params:{
								id : record.data.reffamralertid
							}});				
			},
			select: function (model, record, index, eOpts) {
				// console.log(record.data);
				dataselect = record.data;
				
				storeGridAnomaliDetail.reload({params:{
								id : record.data.reffamralertid
							}});
				record.set('approved',1);
				record.set('selectopts',true);
			},
			deselect: function (view, record, item, index, e, eOpts) {
				record.set('selectopts',false);
			}
			 
		}
		, */
			viewConfig: {
				stripeRows: false, 
				getRowClass: function(record) { 
					return !record.get('energy_mmbtu') ? 'incompleterow' : '' ; 
				}
				/*
				,
				
				listeners: {
				refresh: function(dataview) {
					Ext.each(dataview.panel.columns, function(column) {
						if (column.autoSizeColumn === true)
							column.autoSize();
						})
					}
				}
				*/
			}	
		});
		this.callParent(arguments);
	}
});