<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class Analisa extends MY_Controller {

	function __construct() {		
        parent::__construct();        
    }
	
	public function index ()
	{
		vd::dump($this->session->userdata('username'));
	}
	
	public function findamrvalid ()
	{
		
	    $this->load->model('b_model');
		
		// default:  lepasin saya
		// $kemarin = whereTofilter('tanggal', date("Y-m-d", time() - 86400) , 'date' , 'lt');
		$kemarin = date("Y-m-d", time() - 86400);
		$kemarinlusa = date("Y-m-d", time() - 86400);
		// $kemarinlusa = whereTofilter('tanggal', date("Y-m-d", time() - 172800) , 'date' , 'gt');
		
		$canrd = whereTofilter('sbu', $this->session->userdata('rd') , 'list' , '');	
		
		$canarea = whereTofilter('area', $this->session->userdata('area') , 'list' , '');
		
		$filter = $this->input->get('filter', TRUE) > ''? $this->input->get('filter', TRUE) : array();		
		
		// $startt = $this->input->get('startt',true) >'' ? whereTofilter('tanggal', $this->input->get('startt',true) , 'date' , 'gt') : $kemarinlusa ;
		// $endd = $this->input->get('endd',true) > '' ? whereTofilter('tanggal', $this->input->get('endd',true) , 'date' , 'lt') : $kemarin ;		
		// $sbu = $this->input->get('sbu',true) > '' ? whereTofilter('sbu', $this->input->get('sbu',true) , 'string' , 'eq') : $canrd ;
		// $area = $this->input->get('area',true) > '' ? whereTofilter('area', $this->input->get('area',true) , 'string' , 'eq') : $canarea ;
		// $id_pel = $this->input->get('id_pel',true) > '' ? whereTofilter('id_pel', $this->input->get('id_pel',true) , 'string' , 'eq') : '' ;
		// $namapel = $this->input->get('namapel',true) > '' ? whereTofilter('namapel', $this->input->get('namapel',true) , 'string' , '') : '' ;		
		
		$startt = $this->input->get('startt',true) > '' ?  $this->input->get('startt',true) : $kemarinlusa ;
		$endd = $this->input->get('endd',true) > '' ?  $this->input->get('endd',true): $kemarin ;		
		$sbu = $this->input->get('sbu',true) > '' ? whereTofilter('sbu', $this->input->get('sbu',true) , 'string' , 'eq') : $canrd ;
		$area = $this->input->get('area',true) > '' ? whereTofilter('area', $this->input->get('area',true) , 'string' , 'eq') : $canarea ;
		$id_pel = $this->input->get('id_pel',true) > '' ?  $this->input->get('id_pel',true) : '' ;
		$namapel = $this->input->get('namapel',true) > '' ? $this->input->get('namapel',true) : '' ;		
		//$merah = whereTofilter('', 2, 'numeric' , 'noteq');
		//$anomali = whereTofilter('stat', 2, 'numeric' , 'noteq');
		// $isapproval = whereTofilter('approved', 'NULL' , 'boolean' , '');		

		
		$validate = whereTofilter('stat', 2 , 'numeric' , 'eq');
		// $isapproval = whereTofilter('approved', 'NULL' , 'boolean' , '');	
		
		// array_push($filter, $startt, $endd, $sbu, $area, $id_pel, $validate, $isapproval, $namapel);
		//array_push($filter, $validate);
		array_push($filter, $validate,$area,$sbu);
		// vd::dump($this->session->userdata('area')); 		
		
		$limit = $this->input->get('limit', TRUE) > '' ? $this->input->get('limit', TRUE) : 25;
	    $offset = $this->input->get('start', TRUE);
	    
	    $sorts = json_decode($this->input->get('sort', TRUE));
	    if ($sorts) {
		    foreach ($sorts as $sort) {
		        $orders[] = $sort->property.' '.$sort->direction;
		    }
		    $order_by = implode(', ', $orders);
	    } else {
	    	$order_by = 'tanggal desc';
	    }		

		$filters = generate_filter($filter, 'okeh');
		//echo $filters;
		//vd::dump($filter); 		
	    $total_entries = $this->b_model->total_getalert_daily( $area, $startt, $endd, $id_pel, $namapel, $filters );
		$entries = $this->b_model->getalert_daily( $area, $startt, $endd, $id_pel, $namapel , $filters , $limit, $offset, $order_by);
		
	    $data['success'] = true;
	    $data['total'] = $total_entries;
	    $data['data'] = $entries;    
		
		// vd::dump($data); 
	    extjs_output($data);
	}	
	
	public function loadjenisstation()
	{
		$this->load->model('b_model');
		$entries = $this->b_model->get_all('idx_configuration', null);	
	    $data['success'] = true;	    
	    $data['data'] = $entries;    
		
	    extjs_output($data);
	}
		
	public function findamranomali ()
	{
		
	  
		$this->load->model('b_model');
		// default:  lepasin saya
		$kemarin = date("Y-m-d", time() - 86400);
		$kemarinlusa = date("Y-m-d", time() - 86400);
		// $kemarinlusa = whereTofilter('tanggal', date("Y-m-d", time() - 172800) , 'date' , 'gt');

		$canrd = whereTofilter('sbu', $this->session->userdata('rd') , 'list' , '');	
		
		$canarea = whereTofilter('area', $this->session->userdata('area') , 'list' , '');
		
		$filter = $this->input->get('filter', TRUE) > ''? $this->input->get('filter', TRUE) : array();		
		
		$startt = $this->input->get('startt',true) > '' ?  $this->input->get('startt',true) : $kemarinlusa ;
		$endd = $this->input->get('endd',true) > '' ?  $this->input->get('endd',true): $kemarin ;		
		$sbu = $this->input->get('sbu',true) > '' ? whereTofilter('sbu', $this->input->get('sbu',true) , 'string' , 'eq') : $canrd ;
		$area = $this->input->get('area',true) > '' ? whereTofilter('area', $this->input->get('area',true) , 'string' , 'eq') : $canarea ;
		$id_pel = $this->input->get('id_pel',true) > '' ?  $this->input->get('id_pel',true) : '' ;
		$namapel = $this->input->get('namapel',true) > '' ? $this->input->get('namapel',true) : '' ;		
		//$merah = whereTofilter('', 2, 'numeric' , 'noteq');
		$anomali = whereTofilter('stat', 2, 'numeric' , 'noteq');
		// $isapproval = whereTofilter('approved', 'NULL' , 'boolean' , '');		
		
		array_push($filter, $anomali,$area,$sbu);
		
		
		
		$limit = $this->input->get('limit', TRUE) > '' ? $this->input->get('limit', TRUE) : 25;
	    $offset = $this->input->get('start', TRUE);
	    
	    $sorts = json_decode($this->input->get('sort', TRUE));
	    if ($sorts) {
		    foreach ($sorts as $sort) {
		        $orders[] = $sort->property.' '.$sort->direction;
		    }
		    $order_by = implode(', ', $orders);
	    } else {
	    	$order_by = 'tanggal desc';
	    }		

		$filters = generate_filter($filter, 'okeh');
		//echo $filters;
		//vd::dump($filter); 		
	    $total_entries = $this->b_model->total_getalert_daily( $area, $startt, $endd, $id_pel, $namapel, $filters );
		$entries = $this->b_model->getalert_daily( $area, $startt, $endd, $id_pel, $namapel , $filters , $limit, $offset, $order_by);
		
	    $data['success'] = true;
	    $data['total'] = $total_entries;
	    $data['data'] = $entries;    
		
		// vd::dump($data); 
	    extjs_output($data);
	}
	
	public function alert_anomali()
	{

		$this->load->model('b_model');
		
		$tanggal = $this->input->get('tanggal', TRUE); 
		$id_pel = $this->input->get('id_pel', TRUE); 
		$where = array( 'tanggal' => $tanggal , 'id_pel' => $id_pel);		
		$entries = $this->b_model->get_all('temp_alert_daily', $where);	
	    $data['success'] = true;	    
	    $data['data'] = $entries;  
		
	     // vd::dump($data); 
	    extjs_output($data);
		
	}
	
	public function updateapproval()
	{
		
		$this->load->model('b_model');	
		$datass = $this->input->post('data', TRUE);
		$datapost = json_decode($datass);
		$setun = array();		
		foreach ($datapost as $items)
		{
			// $upfilt = whereTofilter('rowid', $items->reffamralertid, 'string' , 'eq');
			// $delfilt = whereTofilter('keyid', $items->keyid, 'string' , 'eq');
			$upfilt  = array('rowid' => $items->reffamralertid);
			$delfilt = array('rowid' => $items->reffidamrbridgedaily);			
			$dataapp = array('isapproval' => 1,
				'updperson' => $this->session->userdata('username'),				
				'upddate' => dateTonum(date('Y-m-d H:i:s'))
			);
			$datanya = array(
				
				'reffidamrbridgedaily' 	=> $items->reffidamrbridgedaily,
				'reffamralertid' 		=> $items->reffamralertid,
				'sbu' => $items->sbu,
				'area' => $items->areacode,
				'streamid' => $items->stream,
				'idpel' => $items->id_pel,
				'pelname' => $items->namapel,
				'fdatetime' => $items->fdatetime,			
				'fdate' => $items->fdate,
				'fmonth' => $items->fmonth,
				'fyear' => $items->fyear,				
				'fdvm' => $items->fdvm,
				'fdvc' => $items->fdvc,
				'fvm' => $items->fvm,
				'fvc' => $items->fvc,				
				'fp' => $items->fp,
				'ft' => $items->ft,				
				'status' => 1,
				'delflag' => 1,									
				'creperson' => $this->session->userdata('username'),				
				'credate' => dateTonum(date('Y-m-d H:i:s')),				
				'updcnt' => 1,
				'isapproval' => 1,
				'typeapproved' => $items->stat
			);	
			
			$appr = $this->b_model->insert_data('penyaluran_amr_daily', $datanya);			
			$datanya['penyaluran_amr_dailypenyaluranid'] = "pad".$appr ;
			$this->b_model->insert_data('h_penyaluran_amr_daily', $datanya);
			$this->b_model->update_all('amr_alert_daily', $upfilt , $dataapp);
			array_push($setun, $datanya);
		}			
		
		$dadum['success'] = true;
		$dadum['data'] = $setun;	
	    echo json_encode($dadum);		
	}
	public function updateapprovalAll()
	{
		//echo "OKOK";
	    $offset = 0;
		$kemarin = whereTofilter('tanggal', date("Y-m-d", time() - 86400) , 'date' , 'lt');
		$kemarinlusa = whereTofilter('tanggal', date("Y-m-d", time() - 86400) , 'date' , 'gt');
		// $kemarinlusa = whereTofilter('tanggal', date("Y-m-d", time() - 172800) , 'date' , 'gt');
		
		$canrd = whereTofilter('sbu', $this->session->userdata('rd') , 'list' , '');	
		$canarea = whereTofilter('area', $this->session->userdata('area') , 'list' , '');		
	
		$filter = $this->input->get('filter', TRUE) > ''? $this->input->get('filter', TRUE) : array();		
		
		$startt 	= $this->input->post('startt',true) >'' ? whereTofilter('tanggal', $this->input->post('startt',true) , 'date' , 'gt') : $kemarinlusa ;
		$endd 		= $this->input->post('endd',true) > '' ? whereTofilter('tanggal', $this->input->post('endd',true) , 'date' , 'lt') : $kemarin ;		
		$sbu 		= $this->input->post('sbu',true) > '' ? whereTofilter('sbu', $this->input->post('sbu',true) , 'string' , 'eq') : $canrd ;
		$area 		= $this->input->post('area',true) > '' ? whereTofilter('area', $this->input->post('area',true) , 'string' , 'eq') : $canarea ;
		$id_pel 	= $this->input->post('id_pel',true) > '' ? whereTofilter('id_pel', $this->input->post('id_pel',true) , 'string' , '') : '' ;
		$namapel 	= $this->input->post('namapel',true) > '' ? whereTofilter('namapel', $this->input->post('namapel',true) , 'string' , '') : '' ;		
		
		$validate = whereTofilter('stat', $this->input->post('stat') , 'numeric' , 'eq');
		$isapproval = whereTofilter('approved', 'NULL' , 'boolean' , '');	
		
		array_push($filter, $startt, $endd, $sbu, $area, $id_pel, $validate, $isapproval, $namapel);
		
		$limit = $this->input->post('limit', TRUE) > '' ? $this->input->post('limit', TRUE) : 25;
	    $offset = $this->input->post('start', TRUE);
		
		$total_entries = $this->b_model->count_all_data('temp_amr_bridge_daily', $filter);
		$entries = $this->b_model->get_all_data('temp_amr_bridge_daily', $filter , $limit, $offset, '');
		$n = 0;
		foreach ($entries as $items)
		{
			
			
			// $upfilt = whereTofilter('rowid', $items->reffamralertid, 'string' , 'eq');
			// $delfilt = whereTofilter('keyid', $items->keyid, 'string' , 'eq');
			$upfilt  = array('rowid' => $items->reffamralertid);
			$delfilt = array('rowid' => $items->reffidamrbridgedaily);			
			$dataapp = array('isapproval' => 1,
				'updperson' => $this->session->userdata('username'),				
				'upddate' => dateTonumlengkap(date('Y-m-d H:i:s'))
			);
			$datanya = array(
				
				'reffidamrbridgedaily' 	=> $items->reffidamrbridgedaily,
				'reffamralertid' 		=> $items->reffamralertid,
				'sbu' => $items->sbu,
				'area' => $items->areacode,
				'streamid' => $items->stream,
				'idpel' => $items->id_pel,
				'pelname' => $items->namapel,
				'fdatetime' => $items->fdatetime,			
				'fdate' => $items->fdate,
				'fmonth' => $items->fmonth,
				'fyear' => $items->fyear,				
				'fdvm' => $items->fdvm,
				'fdvc' => $items->fdvc,
				'fvm' => $items->fvm,
				'fvc' => $items->fvc,				
				'fp' => $items->fp,
				'ft' => $items->ft,				
				'status' => 1,
				'delflag' => 1,									
				'creperson' => $this->session->userdata('username'),				
				'credate' => dateTonumlengkap(date('Y-m-d H:i:s')),				
				'updcnt' => 1,
				'isapproval' => 1,
				'typeapproved' => $items->stat
			);	
			
			$appr = $this->b_model->insert_data('penyaluran_amr_daily', $datanya);			
			$datanya['penyaluran_amr_dailypenyaluranid'] = "pad".$appr ;
			$this->b_model->insert_data('h_penyaluran_amr_daily', $datanya);
			$this->b_model->update_all('amr_alert_daily', $upfilt , $dataapp);
			//array_push($setun, $datanya);
			
		}			
		
		$dadum['success'] = true;
		//$dadum['data'] = $setun;	
	    echo json_encode($dadum);
	}
	
	public function updatetaksasi()
	{
		$this->load->model('b_model');	
		$datass 		= $this->input->post('data', TRUE);
		$rowid 			= $this->input->post('rowid');
		$refftaxation = $this->input->post('refftaxation');
		$datapost 	= json_decode($datass);
		$setun1 		= array();		
		
		foreach ($datapost as $items)
		{
			$a_datanya = array(				
									'reffidamrbridgedaily'  =>$items->reffidamrbridgedaily,
									'reffamralertid'  =>$items->reffamralertid,
									'sbu'  =>$items->sbu,
									'area'  =>$items->areacode,
									'streamid'  =>$items->stream,
									'idpel'  =>$items->id_pel,
									'pelname'  =>$items->namapel,
									'fdatetime'  =>$items->fdatetime,
									'fdate'  =>$items->fdate,
									'fmonth'  =>$items->fmonth,
									'fyear'  =>$items->fyear,
									'fdvm'  =>$items->fdvm,
									'fdvc'  =>$items->fdvc,
									'fvm'  =>$items->fvm,
									'fvc'  =>$items->fvc,
									'fp'  =>$items->fp,
									'ft'  =>$items->ft,
									'status' => 1,
									'typeapproved' => $items->stat,
									'delflag' => 1,									
									'creperson' => $this->session->userdata('username'),				
									'credate' => dateTonum(date('Y-m-d H:i:s')),				
									'updcnt' => 1,
									'isapproval' => 1,
									'reffidtaxation' => $refftaxation
			);
			
			$appr = $this->b_model->insert_data('penyaluran_amr_daily', $a_datanya);			
			$a_datanya['penyaluran_amr_dailypenyaluranid'] = "pad".$appr ;
			$this->b_model->insert_data('h_penyaluran_amr_daily', $a_datanya);
			array_push($setun1, $a_datanya);
		}
		
		$where = array('rowid' => $rowid);
		$c_datanya = array(				
					'delflag' => 1,									
					'creperson' => $this->session->userdata('username'),				
					'credate' => dateTonum(date('Y-m-d H:i:s')),				
					'isapproval' => 1,
					'updcnt' => 1
		);
		
		$setun2 = $this->b_model->update_all('taxation', $where, $c_datanya);
		$this->db->last_query();
		$json['success'] = true;
		$json['data1'] = $setun1;	
		$json['data2'] = $setun2;	
	    echo json_encode($json);
	
	}
	
	public function showalertdailydetail ()
	{
		$this->load->model('b_model');
		$rowid = $this->input->get('id',TRUE);
		$where = array('reffamralertdaily' => $rowid);
		$total = $this->b_model->count_all('v_alert_daily', $where);
		if ($total > 0) {
			$entries = $this->b_model->get_all('v_alert_daily', $where);
		} else {
			$entries = $this->b_model->get_all('v_alert_daily_warning', $where);
		}
	    $data['success'] = true;	    
	    $data['data'] = $entries; 
		extjs_output($data);	
		
	}
	
	public function findamrapproved ()
	{
		
	    $this->load->model('b_model');
		
		// default:  lepasin saya
		$kemarin = whereTofilter('tanggal', date("Y-m-d", time() - 86400) , 'date' , 'lt');
		$kemarinlusa = whereTofilter('tanggal', date("Y-m-d", time() - 86400) , 'date' , 'gt');
		// $kemarinlusa = whereTofilter('tanggal', date("Y-m-d", time() - 172800) , 'date' , 'gt');
		$canrd = whereTofilter('sbu', $this->session->userdata('rd') , 'list' , '');	
		$canarea = whereTofilter('area', $this->session->userdata('area') , 'list' , '');		

		$filter = $this->input->get('filter', TRUE) > ''? $this->input->get('filter', TRUE) : array();		
		
		$startt = $this->input->get('startt',true) > '' ? whereTofilter('tanggal', $this->input->get('startt',true) , 'date' , 'gt') : $kemarinlusa ;
		$endd = $this->input->get('endd',true) > '' ? whereTofilter('tanggal', $this->input->get('endd',true) , 'date' , 'lt') : $kemarin ;		
		$sbu = $this->input->get('sbu',true) > '' ? whereTofilter('sbu', $this->input->get('sbu',true) , 'string' , 'eq') : $canrd ;
		$area = $this->input->get('area',true) > '' ? whereTofilter('area', $this->input->get('area',true) , 'string' , 'eq') : $canarea ;
		$id_pel = $this->input->get('id_pel',true) > '' ? whereTofilter('id_pel', $this->input->get('id_pel',true) , 'string' , '') : '' ;
		$namapel = $this->input->get('namapel',true) > '' ? whereTofilter('namapel', $this->input->get('namapel',true) , 'string' , '') : '' ;		
		//$isapproval = $this->input->get('isapproval',true) > '' ? whereTofilter('isapproval', $this->input->get('isapproval',true) , 'numeric' , 'eq') : '' ;
		array_push($filter, $startt, $endd,$sbu, $area, $id_pel, $namapel);
		
		// vd::dump($filter); 		
		
		$limit = $this->input->get('limit', TRUE) > '' ? $this->input->get('limit', TRUE) : 25;
	    $offset = $this->input->get('start', TRUE);
	    
	    $sorts = json_decode($this->input->get('sort', TRUE));
	    if ($sorts) {
		    foreach ($sorts as $sort) {
		        $orders[] = $sort->property.' '.$sort->direction;
		    }
		    $order_by = implode(', ', $orders);
	    } else {
	    	// $order_by = 'tanggal,fdatetime,status,viewid asc';
	    	$order_by = 'tanggal,fdatetime,status asc';
	    }
		
	    $total_entries = $this->b_model->count_all_data('v_h_penyaluran_amr_daily_reals', $filter);
		$entries = $this->b_model->get_all_data('v_h_penyaluran_amr_daily_reals', $filter , $limit, $offset, $order_by);		
		
	    $data['success'] = true;
	    $data['total'] = $total_entries;
	    $data['data'] = $entries;    
		
	    // vd::dump($data); 
	    extjs_output($data);
	}
	
	public function findamrtaksasi ()
	{
		
	    $this->load->model('b_model');
		
		// default:  lepasin saya
		$kemarin = whereTofilter('createdate', date("Y-m-d", time() - 86400) , 'date' , 'lt');
		$kemarinlusa = whereTofilter('createdate', date("Y-m-d", time() - 86400) , 'date' , 'gt');
		// $kemarinlusa = whereTofilter('createdate', date("Y-m-d", time() - 172800) , 'date' , 'gt');
		
		$filter = $this->input->get('filter', TRUE) > ''? $this->input->get('filter', TRUE) : array();		
		
		$startt = $this->input->get('startt',true) > '' ? whereTofilter('createdate', $this->input->get('startt',true) , 'date' , 'gt') : $kemarinlusa ;
		$endd = $this->input->get('endd',true) > '' ? whereTofilter('createdate', $this->input->get('endd',true) , 'date' , 'lt') : $kemarin ;		
		$sbu = $this->input->get('sbu',true) > '' ? whereTofilter('sbuname', $this->input->get('sbu',true) , 'numeric' , 'eq') : '' ;
		$area = $this->input->get('area',true) > '' ? whereTofilter('areaname', $this->input->get('area',true) , 'numeric' , 'eq') : '' ;
		$id_pel = $this->input->get('id_pel',true) > '' ? whereTofilter('customercode', $this->input->get('id_pel',true) , 'numeric' , 'eq') : '' ;
		$namapel = $this->input->get('namapel',true) > '' ? whereTofilter('customername', $this->input->get('namapel',true) , 'string' , '') : '' ;		
		
		$filterojan = whereTofilter('jenisba', 9,  'numeric' , 'eq') ;
		$isapproval = whereTofilter('isapproval', 'null',  'boolean' , 'eq');
		
		array_push($filter, $startt,  $endd, $sbu, $area, $filterojan , $id_pel, $namapel,$isapproval);
		//var_dump($filter); 		
		
		$limit = $this->input->get('limit', TRUE) > '' ? $this->input->get('limit', TRUE) : 25;
	    $offset = $this->input->get('start', TRUE);
	    
	    $sorts = json_decode($this->input->get('sort', TRUE));
	    if ($sorts) {
		    foreach ($sorts as $sort) {
		        $orders[] = $sort->property.' '.$sort->direction;
		    }
		    $order_by = implode(', ', $orders);
	    } 
		else {
	    	$order_by = 'badate desc';
	    }
		

	    $total_entries 	= $this->b_model->count_all_data('v_taxation', $filter);
		$entries 			= $this->b_model->get_all_data('v_taxation', $filter , $limit, $offset, $order_by);		
		
	    $data['success'] = true;
	    $data['total'] = $total_entries;
	    $data['data'] = $entries;    
		
	    // vd::dump($data); 
	    extjs_output($data);
	}
	
	
	public function findamrdetailtaksasi ()
	{
		
	    $this->load->model('b_model');
		
		// default:  lepasin saya
		//$kemarin = whereTofilter('createdate', date("Y-m-d", time() - 86400) , 'date' , 'lt');
		//$kemarinlusa = whereTofilter('createdate', date("Y-m-d", time() - 172800) , 'date' , 'gt');
		
		$filter = $this->input->get('filter', TRUE) > ''? $this->input->get('filter', TRUE) : array();		
		
		$startt = $this->input->get('startt',true) > '' ? whereTofilter('createdate', $this->input->get('startt',true) , 'date' , 'gt') : '' ;
		$endd = $this->input->get('endd',true) > '' ? whereTofilter('createdate', $this->input->get('endd',true) , 'date' , 'lt') : '' ;		
		$sbu = $this->input->get('sbu',true) > '' ? whereTofilter('sbuname', $this->input->get('sbu',true) , 'numeric' , 'eq') : '' ;
		$area = $this->input->get('area',true) > '' ? whereTofilter('areaname', $this->input->get('area',true) , 'numeric' , 'eq') : '' ;
		$id_pel = $this->input->get('id_pel',true) > '' ? whereTofilter('customercode', $this->input->get('id_pel',true) , 'numeric' , 'eq') : '' ;
		$namapel = $this->input->get('namapel',true) > '' ? whereTofilter('customername', $this->input->get('namapel',true) , 'string' , '') : '' ;
		
		$codetax = $this->input->get('codetax',true) > '' ? whereTofilter('codetaxation', $this->input->get('codetax',true) , 'string' , 'eq') : '' ;		
		$filterojan = whereTofilter('jenisba', 9,  'numeric' , 'noteq');		
		$isapproval = whereTofilter('isapproval', 0,  'numeric' , 'eq');		
		
		array_push($filter, $startt,  $endd, $sbu, $area, $codetax , $filterojan , $id_pel, $namapel, $isapproval);
		//var_dump($filter); 		
		
		$limit = $this->input->get('limit', TRUE) > '' ? $this->input->get('limit', TRUE) : 25;
	    $offset = $this->input->get('start', TRUE);
	    
	    $sorts = json_decode($this->input->get('sort', TRUE));
	    if ($sorts) {
		    foreach ($sorts as $sort) {
		        $orders[] = $sort->property.' '.$sort->direction;
		    }
		    $order_by = implode(', ', $orders);
	    } else {
	    	$order_by = 'badate desc';
	    }
		

	    $total_entries 	= $this->b_model->count_all_data('v_taxation', $filter);
		$entries 			= $this->b_model->get_all_data('v_taxation', $filter , $limit, $offset, $order_by);		
		
	    $data['success'] = true;
	    $data['total'] = $total_entries;
	    $data['data'] = $entries;    
		
	    // vd::dump($data); 
	    extjs_output($data);
	}
	
	public function detailpengukuran()
	{
		
	   
	    $this->load->model('b_model');
	    $filter = $this->input->get('filter', TRUE) > ''? $this->input->get('filter', TRUE) : array();		
		
		$startt = $this->input->get('pstart',true) > '' ? whereTofilter('tanggal', $this->input->get('pstart',true) , 'date' , 'gt') : '' ;
		$endd = $this->input->get('pend',true) > '' ? whereTofilter('tanggal', $this->input->get('pend',true) , 'date' , 'lt') : '' ;
		$idrefpelanggan 	= $this->input->get('idrefpelanggan',true) > '' ? whereTofilter('id_pel', $this->input->get('idrefpelanggan',true) , 'string' , '') : '' ;		
			
		
		array_push($filter, $startt,  $endd,$idrefpelanggan);
		//var_dump($filter); 		
		
		$limit = $this->input->get('limit', TRUE) > '' ? $this->input->get('limit', TRUE) : 1000;
	    $offset = $this->input->get('start', TRUE);
	    
	    $sorts = json_decode($this->input->get('sort', TRUE));
	    if ($sorts) {
		    foreach ($sorts as $sort) {
		        $orders[] = $sort->property.' '.$sort->direction;
		    }
		    $order_by = implode(', ', $orders);
	    } else {
	    	$order_by = 'tanggal desc';
	    }
		

	    $total_entries 	= $this->b_model->count_all_data('v_taxationpengukuran', $filter);
		$entries 			= $this->b_model->get_all_data('v_taxationpengukuran', $filter , $limit, $offset, $order_by);		
		
	    $data['success'] = true;
	    $data['total'] = $total_entries;
	    $data['data'] = $entries;    
		
	    // vd::dump($data); 
	    extjs_output($data);
		
	}	
	
	public function showhourlyanomali()
	{
		$this->load->model('b_model');
		
		$area = $this->input->get('area',true) > '' ? $this->input->get('area',true) : $this->session->userdata('area');
		$filter = $this->input->get('filter', TRUE) > '' ? $this->input->get('filter', TRUE) : array();	
				
		$id_pel = $this->input->get('id_pel',true) ;
		$stream = $this->input->get('stream',true) > '' ? whereTofilter('stream', $this->input->get('stream',true) , 'numeric' , 'eq') : '' ;
		
		$tanggal = $this->input->get('tanggal',true);
		
		array_push($filter, $stream);
				
		$limit = $this->input->get('limit', TRUE) > '' ? $this->input->get('limit', TRUE) : 25;
	    $offset = $this->input->get('start', TRUE);
	    
	    $sorts = json_decode($this->input->get('sort', TRUE));
	    if ($sorts) {
		    foreach ($sorts as $sort) {
		        $orders[] = $sort->property.' '.$sort->direction;
		    }
		    $order_by = implode(', ', $orders);
	    } else {
	    	$order_by = 'tanggal desc';
	    }
		
		$filters = generate_filter($filter, 'okeh');
		
	    $total_entries = $this->b_model->total_getkelengkapan_amrhourly($id_pel, $area, $tanggal, $tanggal, $filters);
	    // $total_entries = $this->b_model->count_all_data('temp_kelengkapan_data_amr_hourly', $filter);
		// $entries = $this->b_model->get_all_data('temp_kelengkapan_data_amr_hourly', $filter , $limit, $offset, $order_by);
		$entries = $this->b_model->getkelengkapan_amrhourly($id_pel, $area, $tanggal, $tanggal, $filters , $limit, $offset, $order_by);
		
		
	    $data['success'] = true;
	    $data['total'] = $total_entries;
	    $data['data'] = $entries;  
		
		//vd::dump($entries2);
		
		extjs_output($data);	
	}
	
	public function showhourlyvalidate()
	{
		$this->load->model('b_model');
		
		$filter = $this->input->get('filter', TRUE) > '' ? $this->input->get('filter', TRUE) : array();	
				
		$id_pel = $this->input->get('id_pel',true) > '' ? whereTofilter('id_pel', $this->input->get('id_pel',true) , 'numeric' , 'eq') : '' ;
		$stream = $this->input->get('stream',true) > '' ? whereTofilter('stream', $this->input->get('stream',true) , 'numeric' , 'eq') : '' ;
		
		$tanggal = $this->input->get('tanggal',true) > '' ? whereTofilter('tanggal', $this->input->get('tanggal',true) , 'date' , 'eq') : '' ;
		
		array_push($filter, $tanggal, $id_pel, $stream);
		
		//vd::dump($filter); 		
		
		// $where = array(
			// 'tanggal' => $this->input->get('tanggal',true),
			// 'id_pel' => $this->input->get('id_pel',true),
			// 'stream' => $this->input->get('stream',true)	
		// );		
		
		$limit = $this->input->get('limit', TRUE) > '' ? $this->input->get('limit', TRUE) : 25;
	    $offset = $this->input->get('start', TRUE);
	    
	    $sorts = json_decode($this->input->get('sort', TRUE));
	    if ($sorts) {
		    foreach ($sorts as $sort) {
		        $orders[] = $sort->property.' '.$sort->direction;
		    }
		    $order_by = implode(', ', $orders);
	    } else {
	    	$order_by = 'tanggal desc';
	    }
	    $total_entries = $this->b_model->count_all_data('temp_kelengkapan_data_amr_hourly', $filter);
		$entries = $this->b_model->get_all_data('temp_kelengkapan_data_amr_hourly', $filter , $limit, $offset, $order_by);
		
		// $entries2 = $this->b_model->get_all('temp_kelengkapan_data_amr_hourly', $where );
		
	    $data['success'] = true;
	    $data['total'] = $total_entries;
	    $data['data'] = $entries;  
		
		//vd::dump($entries2);
		
		extjs_output($data);	
	}

	public function findhourlyanomali ()
	{		
	    $this->load->model('b_model');
		$filter = $this->input->get('filter', TRUE) > ''? $this->input->get('filter', TRUE) : array();		
		$tanggal = $this->input->get('tanggal',true);	
		$tahun = whereTofilter('tahun', substr($tanggal, 0, 4), 'numeric','eq');
        $bulan = whereTofilter('bulan', substr($tanggal, 5, 2),'numeric','eq');
        $tgl   = whereTofilter('tgl', substr($tanggal, 8, 2),'numeric','eq');
		$id_pel = $this->input->get('id_pel',true) > '' ? whereTofilter('idrefpelanggan', $this->input->get('id_pel',true) , 'numeric' , 'eq') : '' ;
		$stream = $this->input->get('stream',true) > '' ? whereTofilter('streamid', $this->input->get('stream',true) , 'numeric' , 'eq') : '' ;		
		
		array_push($filter, $tahun, $bulan, $tgl, $id_pel, $stream);
		
		// vd::dump(generate_filter($filter)); 		
		
		$limit = $this->input->get('limit', TRUE) > '' ? $this->input->get('limit', TRUE) : 25;
	    $offset = $this->input->get('start', TRUE);
	    
	    $sorts = json_decode($this->input->get('sort', TRUE));
	    if ($sorts) {
		    foreach ($sorts as $sort) {
		        $orders[] = $sort->property.' '.$sort->direction;
		    }
		    $order_by = implode(', ', $orders);
	    } else {
	    	$order_by = 'tgl desc';
	    }
	    $total_entries = $this->b_model->count_all_data('penyaluran_amr_hourly', $filter);
		$entries = $this->b_model->get_all_data('penyaluran_amr_hourly', $filter , $limit, $offset, $order_by);		
	    $data['success'] = true;
	    $data['total'] = $total_entries;
	    $data['data'] = $entries;    
		
	    extjs_output($data);
	}	
	public function findkelengkapandetailamr ()
	{
		$this->load->model('b_model');
		
		$filter = $this->input->get('filter', TRUE) > ''? $this->input->get('filter', TRUE) : array();		
		
		$select = $this->input->get('select', TRUE);
		
		switch ($select) 
		{
			case 'complete':
				$where =  whereTofilter('total', 24 , 'numeric' , 'eq');
				$tanggal = $this->input->get('tanggal',true) > '' ? whereTofilter('tanggal', $this->input->get('tanggal',true) , 'date' , 'eq') : '' ;	
				$table = 'temp_kelengkapan_data_amr_hourly';
				break;
			case 'incomplete':
				$where =  whereTofilter('total', 24 , 'numeric' , 'lt');
				$tanggal = $this->input->get('tanggal',true) > '' ? whereTofilter('tanggal', $this->input->get('tanggal',true) , 'date' , 'eq') : '' ;	
				$table = 'temp_kelengkapan_data_amr_hourly';
				break;				
			case 'emptyy':
				$where =  whereTofilter('total', 24 , 'numeric' , 'lt');
				$where2 = whereTofilter('tanggal', 'null' , 'boolean' , 'null');
				$where3 = whereTofilter('tanggal_daily', 'not null' , 'boolean' , 'not null');	
				$tanggal = $this->input->get('tanggal',true) > '' ? whereTofilter('tanggal_alert', $this->input->get('tanggal',true) , 'date' , 'eq') : '' ;
				$table = 'temp_kelengkapan_data_amr_hourly';
				break;
			case 'good':
				$where =  whereTofilter('stat', '2', 'numeric' , 'eq');
				$tanggal = $this->input->get('tanggal',true) > '' ? whereTofilter('tanggal_daily', $this->input->get('tanggal',true) , 'date' , 'eq') : '' ;
				$table = 'temp_kelengkapan_data_amr_hourly';
				break;
			case 'warning':
				$where =  whereTofilter('stat', '1', 'numeric' , 'eq');
				$tanggal = $this->input->get('tanggal',true) > '' ? whereTofilter('tanggal_daily', $this->input->get('tanggal',true) , 'date' , 'eq') : '' ;
				$table = 'temp_kelengkapan_data_amr_hourly';
				break;
			case 'alert':
				$where =  whereTofilter('stat', '0', 'numeric' , 'eq');
				$tanggal = $this->input->get('tanggal',true) > '' ? whereTofilter('tanggal_daily', $this->input->get('tanggal',true) , 'date' , 'eq') : '' ;
				$table = 'temp_kelengkapan_data_amr_hourly';
				break;				
			case 'daily':
				$where =  whereTofilter('tanggal_daily', 'not null', 'boolean' , 'not null');
				$tanggal = $this->input->get('tanggal',true) > '' ? whereTofilter('tanggal_alert', $this->input->get('tanggal',true) , 'date' , 'eq') : '' ;
				$table = 'temp_kelengkapan_data_amr_hourly';
				break;
			case 'amr':
				// $where =  whereTofilter('tanggal_daily', 'not null', 'boolean' , 'not null');
				$tanggal = $this->input->get('tanggal',true) > '' ? whereTofilter('tanggal_alert', $this->input->get('tanggal',true) , 'date' , 'eq') : '' ;
				$table = 'temp_kelengkapan_data_amr_hourly';
				break;
			case 'crm':
				$where =  whereTofilter('namapel', 'not null', 'boolean' , 'not null');
				$tanggal = $this->input->get('tanggal',true) > '' ? whereTofilter('tanggal_alert', $this->input->get('tanggal',true) , 'date' , 'eq') : '' ;
				$table = 'temp_kelengkapan_data_amr_hourly';
				break;
			case 'validate':
				//$where =  whereTofilter('total', 24 , 'numeric' , 'lt');
				$table = 'penyaluran_amr_daily';
				break;
			case 'na_crm':			
				$where =  whereTofilter('namapel', 'not null' , 'boolean' , 'not null');
				$where2 = whereTofilter('tanggal', 'null' , 'boolean' , 'null');
				$where3 = whereTofilter('tanggal_daily', 'null' , 'boolean' , 'null');	
				$tanggal = $this->input->get('tanggal',true) > '' ? whereTofilter('tanggal_alert', $this->input->get('tanggal',true) , 'date' , 'eq') : '' ;				
				$table = 'temp_kelengkapan_data_amr_hourly';
				break;
			case 'non_crm':			
				$where =  whereTofilter('namapel', 'null' , 'boolean' , 'null');
				$where2 = whereTofilter('tanggal', 'null' , 'boolean' , 'null');
				$where3 = whereTofilter('tanggal_daily', 'null' , 'boolean' , 'null');	
				$tanggal = $this->input->get('tanggal',true) > '' ? whereTofilter('tanggal_alert', $this->input->get('tanggal',true) , 'date' , 'eq') : '' ;				
				$table = 'temp_kelengkapan_data_amr_hourly';
				break;				
			default :
				$tanggal = $this->input->get('tanggal',true) > '' ? whereTofilter('tanggal_alert', $this->input->get('tanggal',true) , 'date' , 'eq') : '' ;
				break;				
		}
		
		$sbu = $this->input->get('sbu',true) > '' ? whereTofilter('sbu', $this->input->get('sbu',true) , 'string' , 'eq') : '' ;
		$area = $this->input->get('area',true) > '' ? whereTofilter('area', $this->input->get('area',true) , 'string' , 'eq') : '' ;
		
		array_push($filter, $tanggal, $sbu, $area, $where , $where2, $where3 );
		
		// vd::dump($filter); 		
		
		$limit = $this->input->get('limit', TRUE) > '' ? $this->input->get('limit', TRUE) : 25;
	    $offset = $this->input->get('start', TRUE);
	    
	    $sorts = json_decode($this->input->get('sort', TRUE));
	    if ($sorts) {
		    foreach ($sorts as $sort) {
		        $orders[] = $sort->property.' '.$sort->direction;
		    }
		    $order_by = implode(', ', $orders);
	    } else {
	    	$order_by = 'tanggal desc';
	    }	

	    $total_entries = $this->b_model->count_all_data('temp_kelengkapan_data_amr_hourly', $filter);
		$entries = $this->b_model->get_all_data('temp_kelengkapan_data_amr_hourly', $filter , $limit, $offset, $order_by);	
		
	    $data['success'] = true;
	    $data['total'] = $total_entries;
	    $data['data'] = $entries;    
		
	    // vd::dump($data); 
	    extjs_output($data);		
		
	}
	
	public function findkelengkapandataamr ()
	{
		$this->load->model('b_model');
		
		// default:  lepasin saya
		// $kemarin = whereTofilter('tanggal', date("Y-m-d", time() - 86400) , 'date' , 'lt');
		$kemarin = date("Y-m-d", time() - 86400);
		// $kemarinlusa = whereTofilter('tanggal', date("Y-m-d", time() - 86400) , 'date' , 'gt');
		$kemarinlusa = date("Y-m-d", time() - 86400);		
		
		$canrd = whereTofilter('sbu', $this->session->userdata('rd') , 'list' , '');	
		$canarea = whereTofilter('area', $this->session->userdata('area') , 'list' , '');
		
		$filter = $this->input->get('filter', TRUE) > ''? $this->input->get('filter', TRUE) : array();		
		
		$startt = $this->input->get('startt',true) > '' ? $this->input->get('startt',true) : $kemarinlusa ;
		$endd = $this->input->get('endd',true) > '' ? $this->input->get('endd',true) : $kemarin ;		
		$sbu = $this->input->get('sbu',true) > '' ? whereTofilter('sbu', $this->input->get('sbu',true) , 'string' , 'eq') : $canrd ;
		$area = $this->input->get('area',true) > '' ? whereTofilter('area', $this->input->get('area',true) , 'string' , 'eq') :$canarea  ;
		//echo $filters ;
		
		array_push($filter, $sbu, $area);
		
		$limit = $this->input->get('limit', TRUE) > '' ? $this->input->get('limit', TRUE) : 25;
	    $offset = $this->input->get('start', TRUE);
	    
	    $sorts = json_decode($this->input->get('sort', TRUE));
	    if ($sorts) {
		    foreach ($sorts as $sort) {
		        $orders[] = $sort->property.' '.$sort->direction;
		    }
		    $order_by = implode(', ', $orders);
	    } else {
	    	$order_by = 'tanggal desc';
	    }	
		
		$filters = generate_filter($filter, 'okeh');
		
	    // $total_entries  = $this->b_model->count_all_data('v_summary_kelengkapan_data', $filter);
	    $total_entries  = $this->b_model->total_getsummary_kelengkapan_data($area, $startt, $endd, $filters);
		// $entries 		= $this->b_model->get_all_data('v_summary_kelengkapan_data', $filter , $limit, $offset, $order_by);
		$entries 		= $this->b_model->getsummary_kelengkapan_data($area, $startt, $endd, $filters , $limit, $offset, $order_by);
		// $totalvalidate 	= $this->b_model->count_all_data('v_h_penyaluran_amr_daily', $filter);		
	    $data['success'] = true;
	    $data['total'] = $total_entries;
	    $data['data'] = $entries;  
		
	    // vd::dump($data); 
	    extjs_output($data);	
		
	}
	
	public function loadsbu()
	{	   
		$this->load->model('b_model');
		$filter = $this->input->get('filter', TRUE) > '' ? $this->input->get('filter', TRUE) : array();
		
		//$rd = "RD 1,RD 2";
		$rd = $this->session->userdata('rd');
		$rd_permit = whereTofilter('description', $rd , 'list' , '');	
		//echo $rd;
		array_push($filter, $rd_permit);
		
		$limit = $this->input->get('limit', TRUE) > '' ? $this->input->get('limit', TRUE) : 150;
	    $offset = $this->input->get('start', TRUE);
	    
	    $sorts = json_decode($this->input->get('sort', TRUE));
	    if ($sorts) {
		    foreach ($sorts as $sort) {
		        $orders[] = $sort->property.' '.$sort->direction;
		    }
		    $order_by = implode(', ', $orders);
	    } else {
	    	$order_by = 'credate desc';
	    }		
		$total_entries = $this->b_model->count_all_data('bisnisunit', $filter);
		$entries = $this->b_model->get_all_data('bisnisunit', $filter , $limit, $offset, $order_by);	
		
		// $entries = $this->b_model->get_all('bisnisunit', null);	
	    $data['success'] = true;	
		$data['total'] = $total_entries;		
	    $data['data'] = $entries;    
		
	     // vd::dump($data); 
	    extjs_output($data);
		
	}	
	
	public function loadarea()
	{

		$this->load->model('b_model');
		$filter = $this->input->get('filter', TRUE) > '' ? $this->input->get('filter', TRUE) : array();		
		
		$sbu = $this->input->get('sbu', TRUE) > '' ? $this->input->get('sbu', TRUE) : '';	 
		//$sbu = $this->input->get('sbu', TRUE);
		//var_dump($sbu);	
		 //$rd_code = $this->session->userdata('rdcode');
		 $area = $this->session->userdata('area');

		//$rd_code = "RD 1,RD 2";
		//$area = "Tangerang,Bekasi,Kerawang,Bogor,Cirebon,Palembang,Lampung,Cilegon,Medan,Jakarta,Surabaya,Sidoarjo,Pasuruan" ;
		
		$area_permit = whereTofilter('namearea', $area , 'list' , '');
		$sbu_permit = whereTofilter('sbu', $sbu , 'string' , 'eq');
		
		array_push($filter, $area_permit,$sbu_permit);
		
		$limit = $this->input->get('limit', TRUE) > '' ? $this->input->get('limit', TRUE) : 150;
	    $offset = $this->input->get('start', TRUE);
	    
	    $sorts = json_decode($this->input->get('sort', TRUE));
	    if ($sorts) {
		    foreach ($sorts as $sort) {
		        $orders[] = $sort->property.' '.$sort->direction;
		    }
		    $order_by = implode(', ', $orders);
	    } else {
	    	$order_by = 'credate desc';
	    }		
		$total_entries = $this->b_model->count_all_data('area', $filter);
		$entries = $this->b_model->get_all_data('area', $filter , $limit, $offset, $order_by);
		
		// $entries = $this->b_model->get_all('bisnisunit', null);	
	    $data['success'] = true;	
		$data['total'] = $total_entries;		
	    $data['data'] = $entries;    
		
	     // vd::dump($data); 
	    extjs_output($data);	
		
	}	
	
	public function loadrejectcategory()
	{	   
		$this->load->model('b_model');
		$filter = $this->input->get('filter', TRUE) > '' ? $this->input->get('filter', TRUE) : array();
		
		array_push($filter);
		
		$limit = $this->input->get('limit', TRUE) > '' ? $this->input->get('limit', TRUE) : 150;
	    $offset = $this->input->get('start', TRUE);
	    
	    $sorts = json_decode($this->input->get('sort', TRUE));
	    if ($sorts) {
		    foreach ($sorts as $sort) {
		        $orders[] = $sort->property.' '.$sort->direction;
		    }
		    $order_by = implode(', ', $orders);
	    } else {
	    	$order_by = 'rowid asc';
	    }		
		$total_entries = $this->b_model->count_all_data('v_categoryrejectamr', $filter);
		$entries = $this->b_model->get_all_data('v_categoryrejectamr', $filter , $limit, $offset, $order_by);
		
	    $data['success'] = true;	
		$data['total'] = $total_entries;		
	    $data['data'] = $entries;
	     
	    extjs_output($data);
		
	}
	public function loadrejectcategorybulk()
	{
		$this->load->model('b_model');
		$filter = $this->input->get('filter', TRUE) > '' ? $this->input->get('filter', TRUE) : array();
		
		array_push($filter);
		
		$limit = $this->input->get('limit', TRUE) > '' ? $this->input->get('limit', TRUE) : 150;
	    $offset = $this->input->get('start', TRUE);
	    
	    $sorts = json_decode($this->input->get('sort', TRUE));
	    if ($sorts) {
		    foreach ($sorts as $sort) {
		        $orders[] = $sort->property.' '.$sort->direction;
		    }
		    $order_by = implode(', ', $orders);
	    } else {
	    	$order_by = 'rowid asc';
	    }		
		$total_entries = $this->b_model->count_all_data('v_categoryrejectbulk', $filter);
		$entries = $this->b_model->get_all_data('v_categoryrejectbulk', $filter , $limit, $offset, $order_by);
		
	    $data['success'] = true;	
		$data['total'] = $total_entries;		
	    $data['data'] = $entries;
	     
	    extjs_output($data);
	}
	public function kelengkapantoexcel()
	{
		$this->load->model('b_model');
		
		$limit = 'All';
	    $offset = 0;
	    
		$sorts = json_decode($this->input->get('sort', TRUE));
		
		$filter = json_decode($this->input->get('filter'),true);	    
		
		$tanggalnya = $filter[0]['data']['value'];
		
		if ($sorts) {
		    foreach ($sorts as $sort) {
		        $orders[] = $sort->property.' '.$sort->direction;
		    }
		    $order_by = implode(', ', $orders);
	    } else {
	    	$order_by = 'tanggal desc';
	    }		
		$dataas = $this->b_model->get_all_data('temp_kelengkapan_data_amr_hourly', $filter , $limit, $offset, '');
		$count  = $this->b_model->count_all_data('temp_kelengkapan_data_amr_hourly', $filter);
		$n=0;
		
		$path = substr(BASEPATH,0,-7).'asset/xls/';		
		
		$objReader = PHPExcel_IOFactory::createReader('Excel5');
		$objPHPExcel = $objReader->load($path.'kelengkapan_data.xls');
		
		$objPHPExcel->getActiveSheet()->setCellValue('A1', 'Kelengkapan Data '. $tanggalnya );
		$objPHPExcel->getActiveSheet()->getColumnDimension('F')->setAutoSize(true);
		$baseRow = 3;
		//vd::dump($dataas);
		//die();
		foreach ($dataas as $datarow) {
			$row = $baseRow + $n;
			//foreach($datarow as $key=>$value)
			
			$objPHPExcel->getActiveSheet()->setCellValue('A'.$row, $n+1)
										  ->setCellValue('B'.$row, $datarow->stat)
										  ->setCellValue('C'.$row, $datarow->sbu)
										  ->setCellValue('D'.$row, $datarow->area)
										  ->setCellValue('E'.$row, "'".$datarow->id_pel)
										  ->setCellValue('F'.$row, $datarow->namapel)
										  ->setCellValue('G'.$row, $datarow->stream)
										  ->setCellValue('H'.$row, is_null($datarow->h00) ? "-" : $datarow->h00  )
										  ->setCellValue('I'.$row, is_null($datarow->h01) ? "-" : $datarow->h01  )
										  ->setCellValue('J'.$row, is_null($datarow->h02) ? "-" : $datarow->h02  )
										  ->setCellValue('K'.$row, is_null($datarow->h03) ? "-" : $datarow->h03  )
										  ->setCellValue('L'.$row, is_null($datarow->h04) ? "-" : $datarow->h04  )
										  ->setCellValue('M'.$row, is_null($datarow->h05) ? "-" : $datarow->h05  )
										  ->setCellValue('N'.$row, is_null($datarow->h06) ? "-" : $datarow->h06  )
										  ->setCellValue('O'.$row, is_null($datarow->h07) ? "-" : $datarow->h07  )
										  ->setCellValue('P'.$row, is_null($datarow->h08) ? "-" : $datarow->h08  )
										  ->setCellValue('Q'.$row, is_null($datarow->h09) ? "-" : $datarow->h09  )
										  ->setCellValue('R'.$row, is_null($datarow->h10) ? "-" : $datarow->h10  )
										  ->setCellValue('S'.$row, is_null($datarow->h11) ? "-" : $datarow->h11  )
										  ->setCellValue('T'.$row, is_null($datarow->h12) ? "-" : $datarow->h12  )
										  ->setCellValue('U'.$row, is_null($datarow->h13) ? "-" : $datarow->h13  )
										  ->setCellValue('V'.$row, is_null($datarow->h14) ? "-" : $datarow->h14  )
										  ->setCellValue('W'.$row, is_null($datarow->h15) ? "-" : $datarow->h15  )
										  ->setCellValue('X'.$row, is_null($datarow->h16) ? "-" : $datarow->h16  )
										  ->setCellValue('Y'.$row, is_null($datarow->h17) ? "-" : $datarow->h17  )
										  ->setCellValue('Z'.$row, is_null($datarow->h18) ? "-" : $datarow->h18  )
										  ->setCellValue('AA'.$row, is_null($datarow->h19) ? "-" : $datarow->h19  )
										  ->setCellValue('AB'.$row, is_null($datarow->h20) ? "-" : $datarow->h20  )
										  ->setCellValue('AC'.$row, is_null($datarow->h21) ? "-" : $datarow->h21  )
										  ->setCellValue('AD'.$row, is_null($datarow->h22) ? "-" : $datarow->h22  )
										  ->setCellValue('AE'.$row, is_null($datarow->h23) ? "-" : $datarow->h23  )
										  ->setCellValue('AF'.$row, $datarow->total_hourly)
										  ->setCellValue('AG'.$row, $datarow->daily);										 
										   
			$n++;
		}
		
		$conditional = new PHPExcel_Style_Conditional();
		$conditional->setConditionType(PHPExcel_Style_Conditional::CONDITION_CELLIS)
				->setOperatorType(PHPExcel_Style_Conditional::OPERATOR_EQUAL)
				->addCondition('"-"');
		$conditional->getStyle()->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID)->getEndColor()->setARGB('ffa7a7');		
		$conditional2 = new PHPExcel_Style_Conditional();
		$conditional2->setConditionType(PHPExcel_Style_Conditional::CONDITION_CELLIS)
				->setOperatorType(PHPExcel_Style_Conditional::OPERATOR_NOTEQUAL)
				->addCondition('"-"');
		$conditional2->getStyle()->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID)->getEndColor()->setARGB('98fb98');		
		$conditionalStyles = $objPHPExcel->getActiveSheet()->getStyle('A3')->getConditionalStyles();
		array_push($conditionalStyles, $conditional, $conditional2 );               
		$objPHPExcel->getActiveSheet()->getStyle('A$3:AG$'.$row)->setConditionalStyles($conditionalStyles);		
		
		header('Content-Disposition: attachment;filename="Kelengkapan_Data_'.$tanggalnya.'.xlsx"'); 
        header('Cache-Control: max-age=0');
		
		$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
		$objWriter->save('php://output');
		
		$dataxttt['success'] = true;	     
	    extjs_output($dataxttt);
			
	}
	
	public function toexcel()
	{
		$this->load->model('b_model');
		
		$limit = 'All';
	    $offset = 0;
	    $sorts = json_decode($this->input->get('sort', TRUE));
		$typeexport = $this->input->get('typeexport', True);
		$filter = json_decode($this->input->get('filter'),true);
		$areanya = $filter[3]['data']['value'];
		$canrd = whereTofilter('sbu', $this->session->userdata('rd') , 'list' , '');	
		$canarea = whereTofilter('area', $this->session->userdata('area') , 'list' , '');
		$kemarin = date("Y-m-d", time() - 86400);
		$kemarinlusa = date("Y-m-d", time() - 86400);
		$startt = $filter[0]['data']['value'] > '' ?  $filter[0]['data']['value'] : $kemarinlusa ;
		$endd = $filter[1]['data']['value'] > '' ?  $filter[1]['data']['value']: $kemarin ;		
		
		if($filter[3]['data']['value'] == '')
		{
			$area = $filter[3]['data']['value'] > '' ? whereTofilter('area', $filter[3]['data']['value'] , 'string' , 'eq') : $canarea ;
			array_push($filter,$area);	
		}
		if($filter[2]['data']['value'] == '')
		{
			$sbu = $filter[2]['data']['value'] > '' ? whereTofilter('sbu', $filter[2]['data']['value'] , 'string' , 'eq') : $canrd ;
			array_push($filter,$sbu);	
		}
		if (empty($filter)){			
			$filter =  array();			
			$startt = $this->input->get('startt',true) > '' ?  $this->input->get('startt',true) : $kemarinlusa ;
			$endd = $this->input->get('endd',true) > '' ?  $this->input->get('endd',true): $kemarin ;		
			
			$id_pel = '' ;
			$namapel =  '' ;		
			array_push($filter, $anomali,$area,$sbu);
			//array_push($filter, $kemarin, $kemarinlusa, $sbu, $area, $id_pel, $namapel );
		}
		
		
		$isapproval = whereTofilter('approved', 'NULL' , 'boolean' , '');
		
		if ($typeexport === 'Validate'){
			$validate = whereTofilter('stat', 2 , 'numeric' , 'eq');
			$vtable = 'temp_amr_bridge_daily';
		} else if ($typeexport === 'Anomali') {
			//$validate = whereTofilter('stat', 2 , 'numeric' , 'noteq');
			$validate = whereTofilter('stat', 2, 'numeric' , 'noteq');
			$vtable = 'temp_amr_bridge_daily_export';
		}
		
		array_push($filter, $validate);
		$filters = generate_filter($filter, 'okeh');
		
		// vd::dump($filter);	
		
		if ($sorts) {
		    foreach ($sorts as $sort) {
		        $orders[] = $sort->property.' '.$sort->direction;
		    }
		    $order_by = implode(', ', $orders);
	    } else {
	    	$order_by = 'tanggal desc';
	    }		
		$vtable = "get_alert_daily15( '', '".$startt."', '".$endd."', '".$id_pel."', '".$namapel."')";
		$dataas = $this->b_model->get_all_datafunc($vtable, $filter , $limit, $offset, '');
		
		//$count  = $this->b_model->count_all_data($vtable, $filter);
		$count = $this->b_model->total_getalert_daily( '', $startt, $endd, $id_pel, $namapel, $filters );
		//$dataas = $this->b_model->getalert_daily( '', $startt, $endd, $id_pel, $namapel , $filters , $limit, $offset, $order_by);
		$n=0;
		
		$path = substr(BASEPATH,0,-7).'asset/xls/';		
		
		$objReader = PHPExcel_IOFactory::createReader('Excel2007');
		$objPHPExcel = $objReader->load($path.$typeexport.'_data.xlsx');
		if (!empty($areanya) || $areanya != ''){
			$objPHPExcel->getActiveSheet()->setCellValue('A1', $typeexport.' Data '. $areanya );
		} else {
			$objPHPExcel->getActiveSheet()->setCellValue('A1', $typeexport.' Data '. date("Y-m-d", time() - 172800) . '-' . date("Y-m-d", time() - 86400) );
		}
		$objPHPExcel->getActiveSheet()->getColumnDimension('F')->setAutoSize(true);
		$baseRow = 3;
		
		if ($typeexport === 'Validate'){		
			foreach ($dataas as $datarow) {
				$row = $baseRow + $n;
				
				$objPHPExcel->getActiveSheet()->setCellValue('A'.$row, $n+1)
											  ->setCellValue('B'.$row, $datarow->stat_desc)
											  ->setCellValue('C'.$row, $datarow->sbu)
											  ->setCellValue('D'.$row, $datarow->area)
											  ->setCellValue('E'.$row, "'".$datarow->id_pel)
											  ->setCellValue('F'.$row, $datarow->namapel)
											  ->setCellValue('G'.$row, $datarow->stream)
											  ->setCellValue('H'.$row, $datarow->tanggal)
											  ->setCellValue('I'.$row, is_null($datarow->fp) ? "-" : $datarow->fp )
											  ->setCellValue('J'.$row, is_null($datarow->ft) ? "-" : $datarow->ft )
											  ->setCellValue('K'.$row, is_null($datarow->fcf) ? "-" : $datarow->fcf )
											  ->setCellValue('L'.$row, is_null($datarow->fmc) ? "-" : $datarow->fmc )
											  ->setCellValue('M'.$row, is_null($datarow->fmn) ? "-" : $datarow->fmn )
											  ->setCellValue('N'.$row, is_null($datarow->fsg) ? "-" : $datarow->fsg )
											  ->setCellValue('O'.$row, is_null($datarow->pbase) ? "-" : $datarow->pbase )
											  ->setCellValue('P'.$row, is_null($datarow->tbase) ? "-" : $datarow->tbase )
											  ->setCellValue('Q'.$row, is_null($datarow->pmax) ? "-" : $datarow->pmax )
											  ->setCellValue('R'.$row, is_null($datarow->pmin) ? "-" : $datarow->pmin )
											  ->setCellValue('S'.$row, is_null($datarow->qmax) ? "-" : $datarow->qmax )
											  ->setCellValue('T'.$row, is_null($datarow->qmin) ? "-" : $datarow->qmin )
											  ->setCellValue('U'.$row, is_null($datarow->tmax) ? "-" : $datarow->tmax )
											  ->setCellValue('V'.$row, is_null($datarow->tmin) ? "-" : $datarow->tmin )
											  ->setCellValue('W'.$row, is_null($datarow->qbase_max) ? "-" : $datarow->qbase_max )
											  ->setCellValue('X'.$row, is_null($datarow->qbase_min) ? "-" : $datarow->qbase_min )
											  ->setCellValue('Y'.$row, is_null($datarow->fdvm) ? "-" : $datarow->fdvm )
											  ->setCellValue('Z'.$row, is_null($datarow->fdvc) ? "-" : $datarow->fdvc )
											  ->setCellValue('AA'.$row, is_null($datarow->fvm) ? "-" : $datarow->fvm )
											  ->setCellValue('AB'.$row, is_null($datarow->fvc) ? "-" : $datarow->fvc );
				$n++;
			}
		} else {
			foreach ($dataas as $datarow) {
				$row = $baseRow + $n;
				
				$objPHPExcel->getActiveSheet()->setCellValue('A'.$row, $n+1)
											  ->setCellValue('B'.$row, $datarow->stat_desc)
											  ->setCellValue('C'.$row, $datarow->sbu)
											  ->setCellValue('D'.$row, $datarow->area)
											  ->setCellValue('E'.$row, "'".$datarow->id_pel)
											  ->setCellValue('F'.$row, $datarow->namapel)
											  ->setCellValue('G'.$row, $datarow->stream)
											  ->setCellValue('H'.$row, $datarow->tanggal)
											  ->setCellValue('I'.$row, is_null($datarow->fp) ? "-" : $datarow->fp )
											  ->setCellValue('J'.$row, is_null($datarow->ft) ? "-" : $datarow->ft )
											  ->setCellValue('K'.$row, is_null($datarow->fcf) ? "-" : $datarow->fcf )
											  ->setCellValue('L'.$row, is_null($datarow->fmc) ? "-" : $datarow->fmc )
											  ->setCellValue('M'.$row, is_null($datarow->fmn) ? "-" : $datarow->fmn )
											  ->setCellValue('N'.$row, is_null($datarow->fsg) ? "-" : $datarow->fsg )
											  ->setCellValue('O'.$row, is_null($datarow->pbase) ? "-" : $datarow->pbase )
											  ->setCellValue('P'.$row, is_null($datarow->tbase) ? "-" : $datarow->tbase )
											  ->setCellValue('Q'.$row, is_null($datarow->pmax) ? "-" : $datarow->pmax )
											  ->setCellValue('R'.$row, is_null($datarow->pmin) ? "-" : $datarow->pmin )
											  ->setCellValue('S'.$row, is_null($datarow->qmax) ? "-" : $datarow->qmax )
											  ->setCellValue('T'.$row, is_null($datarow->qmin) ? "-" : $datarow->qmin )
											  ->setCellValue('U'.$row, is_null($datarow->tmax) ? "-" : $datarow->tmax )
											  ->setCellValue('V'.$row, is_null($datarow->tmin) ? "-" : $datarow->tmin )
											  ->setCellValue('W'.$row, is_null($datarow->qbase_max) ? "-" : $datarow->qbase_max )
											  ->setCellValue('X'.$row, is_null($datarow->qbase_min) ? "-" : $datarow->qbase_min )
											  ->setCellValue('Y'.$row, is_null($datarow->fdvm) ? "-" : $datarow->fdvm )
											  ->setCellValue('Z'.$row, is_null($datarow->fdvc) ? "-" : $datarow->fdvc )
											  ->setCellValue('AA'.$row, is_null($datarow->fvm) ? "-" : $datarow->fvm )
											  ->setCellValue('AB'.$row, is_null($datarow->fvc) ? "-" : $datarow->fvc )
										  ->setCellValue('AC'.$row, $datarow->w1)
										  ->setCellValue('AD'.$row, $datarow->w2)
										  ->setCellValue('AE'.$row, $datarow->w3)
										  ->setCellValue('AF'.$row, $datarow->w4)
										  ->setCellValue('AG'.$row, $datarow->w5)
										  ->setCellValue('AH'.$row, $datarow->w6)
										  ->setCellValue('AI'.$row, $datarow->w7)
										  ->setCellValue('AJ'.$row, $datarow->w8)
										  ->setCellValue('AK'.$row, $datarow->w_spare_1)
										  ->setCellValue('AL'.$row, $datarow->w_spare_2)
										  ->setCellValue('AM'.$row, $datarow->a1)
										  ->setCellValue('AN'.$row, $datarow->a2)
										  ->setCellValue('AO'.$row, $datarow->a3)
										  ->setCellValue('AP'.$row, $datarow->a4)
										  ->setCellValue('AQ'.$row, $datarow->a5)
										  ->setCellValue('AR'.$row, $datarow->a6)
										  ->setCellValue('AS'.$row, $datarow->a7)
										  ->setCellValue('AT'.$row, $datarow->a8)
										  ->setCellValue('AU'.$row, $datarow->a9)
										  ->setCellValue('AV'.$row, $datarow->a_spare_1)
										  ->setCellValue('AW'.$row, $datarow->a_spare_2);											  
				$n++;
			}			
		}	
		
		$conditional = new PHPExcel_Style_Conditional();
		$conditional->setConditionType(PHPExcel_Style_Conditional::CONDITION_CELLIS)
				->setOperatorType(PHPExcel_Style_Conditional::OPERATOR_EQUAL)
				->addCondition('"-"');
		$conditional->getStyle()->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID)->getEndColor()->setARGB('ffa7a7');		
		$conditional2 = new PHPExcel_Style_Conditional();
		$conditional2->setConditionType(PHPExcel_Style_Conditional::CONDITION_CELLIS)
				->setOperatorType(PHPExcel_Style_Conditional::OPERATOR_NOTEQUAL)
				->addCondition('"-"');
		$conditional2->getStyle()->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID)->getEndColor()->setARGB('98fb98');		
		$conditionalStyles = $objPHPExcel->getActiveSheet()->getStyle('A3')->getConditionalStyles();
		array_push($conditionalStyles, $conditional, $conditional2 );      

		if ($typeexport === 'Validate'){
			$objPHPExcel->getActiveSheet()->getStyle('A$3:AB$'.$row)->setConditionalStyles($conditionalStyles);		
		} else {
			$objPHPExcel->getActiveSheet()->getStyle('A$3:AW$'.$row)->setConditionalStyles($conditionalStyles);	
		}	
		header('Content-Disposition: attachment;filename="'.$typeexport.'_Data_'.date("Y-m-d").'.xlsx"'); 
        header('Cache-Control: max-age=0'); //no cache	
				
		$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
		$objWriter->save('php://output');

	
	}
	
	public function findhistorypenyaluran () 
	{
		$this->load->model('b_model');
		
		// default:  lepasin saya
		$kemarin = whereTofilter('tanggal', date("Y-m-d", time() - 86400) , 'date' , 'lt');
		$kemarinlusa = whereTofilter('tanggal', date("Y-m-d", time() - 172800) , 'date' , 'gt');
		
		$canrd = whereTofilter('sbu', $this->session->userdata('rd') , 'list' , '');	
		$canarea = whereTofilter('area', $this->session->userdata('area') , 'list' , '');		

		
		$filter = $this->input->get('filter', TRUE) > ''? $this->input->get('filter', TRUE) : array();		
		
		$startt = $this->input->get('startt',true) > '' ? whereTofilter('tanggal', $this->input->get('startt',true) , 'date' , 'gt') : $kemarinlusa ;
		$endd = $this->input->get('endd',true) > '' ? whereTofilter('tanggal', $this->input->get('endd',true) , 'date' , 'lt') : $kemarin ;		
		$sbu = $this->input->get('sbu',true) > '' ? whereTofilter('sbu', $this->input->get('sbu',true) , 'string' , 'eq') : $canrd ;
		$area = $this->input->get('area',true) > '' ? whereTofilter('area', $this->input->get('area',true) , 'string' , 'eq') : $canarea ;
		$id_pel = $this->input->get('id_pel',true) > '' ? whereTofilter('id_pel', $this->input->get('id_pel',true) , 'string' , 'eq') : '' ;
		$namapel = $this->input->get('namapel',true) > '' ? whereTofilter('namapel', $this->input->get('namapel',true) , 'string' , 'eq') : '' ;		
		
		array_push($filter, $startt, $endd, $sbu, $area, $id_pel, $namapel);
		
		// vd::dump($filter); 		
		
		$limit = $this->input->get('limit', TRUE) > '' ? $this->input->get('limit', TRUE) : 25;
	    $offset = $this->input->get('start', TRUE);
	    
	    $sorts = json_decode($this->input->get('sort', TRUE));
	    if ($sorts) {
		    foreach ($sorts as $sort) {
		        $orders[] = $sort->property.' '.$sort->direction;
		    }
		    $order_by = implode(', ', $orders);
	    } else {
	    	$order_by = 'tanggal desc';
	    }	
		
	    $total_entries = $this->b_model->count_all_data('v_log_hist_peny_daily', $filter);
		$entries = $this->b_model->get_all_data('v_log_hist_peny_daily', $filter , $limit, $offset, $order_by);		
		
	    $data['success'] = true;
	    $data['total'] = $total_entries;
	    $data['data'] = $entries;    
		
	    // vd::dump($data); 
	    extjs_output($data);
	}
	

	public function updatereject()
	{
		
		$this->load->model('b_model');	
		$datass = $this->input->post('datagrid', TRUE);
		$user_email = $this->session->userdata('user_email');
		$group_email = $this->session->userdata('group_email');
		$group_exp	  = explode(';',$group_email);		
		$to			  = array($user_email);		
		foreach($group_exp as $emp)
		{
			array_push($to,$emp);
		}

		$filter[0]['field'] = "isinfo";
		$filter[0]['data']  = array("comparison"	=> "eq",
								   "type"		=> "numeric",
								   "value"		=> 5);
		
		$filter[1]['field'] = "areacode";
		$filter[1]['data']  = array("comparison"	=> "eq",
								   "type"			=> "string",
								   "value"			=> $this->input->post('areaval'));
								   
		$datatemplate = $this->b_model->get_all_data('general_info', $filter , 2 , 0 , '');
		
		$email_temp   = $datatemplate[0]->email;
		$email_exp	  = explode(';',$email_temp);

		foreach($email_exp as $emp)
		{
			array_push($to,$emp);
		}

		$subject 	= $datatemplate[0]->subject;
		$pesan 		= $datatemplate[0]->template;		
		
		$datapost = json_decode($datass);
		$setun = array();
		
		$n=0;		
		$path = substr(BASEPATH,0,-7).'asset/xls/';
		$topath = substr(BASEPATH,0,-7).'asset/tmp/';	
		$objReader = PHPExcel_IOFactory::createReader('Excel5');
		$objPHPExcel = $objReader->load($path.'reject_data.xls');
		$baseRow = 3;		
		$objPHPExcel->getActiveSheet()->setCellValue('A1', 'Reject Data ' );	
		
		foreach ($datapost as $items)
		{
			$row = $baseRow + $n;
			// $upfilt = whereTofilter('rowid', $items->reffamralertid, 'string' , 'eq');
			// $delfilt = whereTofilter('keyid', $items->keyid, 'string' , 'eq');
			$upfilt = array('rowid' => $items->reffamralertid);
			$delfilt = array('rowid' => $items->reffidamrbridgedaily);			
			$dataapp = array('isapproval' => 0,
				'updperson' => $this->session->userdata('username'),				
				'upddate' => dateTonum(date('Y-m-d H:i:s'))
			);
			$datanya = array(
				'penyaluran_amr_dailypenyaluranid' => '99',
				'reffidamrbridgedaily' 	=> $items->reffidamrbridgedaily,
				'reffamralertid' 		=> $items->reffamralertid,
				'sbu' 		=> $items->sbu,
				'area'		=> $items->areacode,
				'streamid' 	=> $items->stream,
				'idpel' => $items->id_pel,
				'pelname' => $items->namapel,
				'fdatetime' => $items->fdatetime,			
				'fdate' => $items->fdate,
				'fmonth' => $items->fmonth,
				'fyear' => $items->fyear,				
				'fdvm' =>$items->fdvm,
				'fdvc' =>$items->fdvc,
				'fvm' =>$items->fvm,
				'fvc' =>$items->fvc,				
				'fp' =>$items->fp,
				'ft' =>$items->ft,				
				'status' => 4,
				'delflag' => 1,
				'creperson' => $this->session->userdata('username'),				
				'credate' => dateTonum(date('Y-m-d H:i:s')),				
				'updcnt' => 1,
				'isapproval' => 0,
				'typeapproved' => $items->stat
			);
			
			$datareject = $this->b_model->insert_data('h_penyaluran_amr_daily', $datanya);
			$sial = 'padh'.$datareject;
			// vd::dump($sial);
			$fieldsval = "";
			foreach ($items->field as $r)
			{
				$fieldsval .=$r.",";
			}
			$fieldsval = substr($fieldsval,0,-1);
			$datainfo = array (
				'reffidpengukuran' => $sial,
				'category' => $items->kategori,
				'fields' => $fieldsval,
				'keterangan' => $items->keterangan,
				'creperson' => $this->session->userdata('username'),				
				'credate' => dateTonum(date('Y-m-d H:i:s'))			
			);	

			$objPHPExcel->getActiveSheet()->setCellValue('A'.$row, $n+1)
							  ->setCellValue('B'.$row, $items->stat)
							  ->setCellValue('C'.$row, $items->sbu)
							  ->setCellValue('D'.$row, $items->area)
							  ->setCellValue('E'.$row, "'".$items->id_pel)
							  ->setCellValue('F'.$row, $items->namapel)
							  ->setCellValue('G'.$row, $items->stream)
							  ->setCellValue('H'.$row, $items->tanggal)
							  ->setCellValue('I'.$row, $items->fp)
							  ->setCellValue('J'.$row, $items->ft)
							  ->setCellValue('K'.$row, $items->fcf)
							  ->setCellValue('L'.$row, $items->fmc)
							  ->setCellValue('M'.$row, $items->fmn)
							  ->setCellValue('N'.$row, $items->fsg)
							  ->setCellValue('O'.$row, $items->pbase)
							  ->setCellValue('P'.$row, $items->tbase)
							  ->setCellValue('Q'.$row, $items->pmax)
							  ->setCellValue('R'.$row, $items->pmin)
							  ->setCellValue('S'.$row, $items->qmax)
							  ->setCellValue('T'.$row, $items->qmin)
							  ->setCellValue('U'.$row, $items->tmax)
							  ->setCellValue('V'.$row, $items->tmin)
							  ->setCellValue('W'.$row, $items->qbase_max)
							  ->setCellValue('X'.$row, $items->qbase_min)
							  ->setCellValue('Y'.$row, $items->fdvm)
							  ->setCellValue('Z'.$row, $items->fdvc)
							  ->setCellValue('AA'.$row, $items->fvm)
							  ->setCellValue('AB'.$row, $items->fvc)
							  ->setCellValue('AC'.$row, date('Y-m-d H:i:s'))
							  ->setCellValue('AD'.$row, $items->kategori)
							  ->setCellValue('AE'.$row, $fieldsval)
							  ->setCellValue('AF'.$row, $items->keterangan);
			
			$this->b_model->insert_data('reject_info', $datainfo);
			
			// $this->b_model->insert_data('penyaluran_amr_daily', $datanya);
			$this->b_model->update_all('amr_alert_daily', $upfilt , $dataapp);			
			
			// delete data di table asal //
			// $this->b_model->delete_all('temp_amr_bridge_daily', $delfilt);	
			array_push($setun, $datanya);
			$n++;
		}	
		
		$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
		$file = "".$topath."Reject_Data". $sial. ".xls";
		$objWriter->save($file);

		$this->send_emailmultiaddress( $to, $subject, $pesan, $file );
		delete_files( $topath );
		$dadum['success'] = true;
		$dadum['data'] = $setun;	
	    echo json_encode($dadum);	    
	}
	
	public function updaterejectbulk()
	{
		$this->load->model('b_model');	
		//$idgroup 	= $this->
		$datass 	= $this->input->post('datagrid',TRUE);
		$user_email = $this->session->userdata('user_email');
		$group_email = $this->session->userdata('group_email');
		$group_exp	  = explode(';',$group_email);
		$to			  = array($user_email);
		
		foreach($group_exp as $emp)
		{
			array_push($to,$emp);
		}
		
		//$to = array($user_email,$group_email);
		
		$filter[0]['field'] = "isinfo";
		$filter[0]['data'] = array("comparison"	=> "eq",
								   "type"		=> "string",
								   "value"		=> 2);
		
		$datatemplate = $this->b_model->get_all_data('general_info', $filter , 2, 0, '');	
		$email_temp   = $datatemplate[0]->email;
		$email_exp	  = explode(';',$email_temp);
		
		foreach($email_exp as $emp)
		{
			array_push($to,$emp);
		}
		//$to 		= $this->input->post('toemail',TRUE);
		
		$subject 	= $datatemplate[0]->subject;
		$pesan 		= $datatemplate[0]->template;
		
		$datapost	= json_decode($datass);
		$setun 		= array();
		
		$n=0;		
		$path = substr(BASEPATH,0,-7).'asset/xls/';
		$topath = substr(BASEPATH,0,-7).'asset/tmp/';	
		$objReader = PHPExcel_IOFactory::createReader('Excel5');
		$objPHPExcel = $objReader->load($path.'reject_databulk.xls');
		$baseRow = 3;		
		$objPHPExcel->getActiveSheet()->setCellValue('A1', 'Reject Data ' );	
		
		
		foreach ($datapost as $items)
		{
			$row = $baseRow + $n;
			// $upfilt = whereTofilter('rowid', $items->reffamralertid, 'string' , 'eq');
			// $delfilt = whereTofilter('keyid', $items->keyid, 'string' , 'eq');
			//$upfilt = array('reffamralertdaily' => $items->reffamralertid);
			//$delfilt = array('rowid' => $items->reffidamrbridgedaily);			
			
			$filter[0]['field'] = "rowid";
			$filter[0]['data'] = array("comparison"	=> "eq",
									   "type"		=> "string",
									   "value"		=> $items->rowid);
									   
			$dataapp = array("statusapproval"	=> "Reject",
								 //"isapproval"		=> 0,
								 "updperson"		=> $this->session->userdata('username'),
								 "upddate"			=> dateTonum(date('Y-m-d H:i:s'))
								);
			//$dataapp = array('isapproval' => 0);
			
			$data = array(
				//"realisasipenyaluranstationdailyfinalrowid"	=> "PDFH".$data_id,
				"realisasipenyaluranstationdailyrowid"		=> $items->rowid,
				 "mstationrowid"							=> $items->mstationrowid,
				 "stationid"								=> $items->stationid,
				 "tglpengukuran"							=> dateTonum($items->tanggal_pengukuran),
				 "volume"									=> $items->volume,
				 "energy"									=> $items->energy,
				 "ghv"										=> $items->ghv,
				 "pressureinlet"							=> $items->pressureinlet,
				 "pressureoutlet"							=> $items->pressureoutlet,
				 "temperature"								=> $items->temperature,
				 "pressureoutlet"							=> $items->pressureoutlet,
				 "counter_volume"							=> $items->counter_volume,
				 "counter_energy"							=> $items->counter_energy,
				 "status"									=> 4,
				 //"isapproval"								=> 1,
				 //"typeapproval"								=> 2,
				 "creperson"								=> $this->session->userdata('username'),
				 "credate"									=> dateTonum(date('Y-m-d H:i:s'))
			);
					 
			$datareject = $this->b_model->insert_data('h_realisasipenyaluranstationdaily', $data);		
			
			//$datareject = $this->b_model->insert_data('h_penyaluran_amr_daily', $datanya);
			
			$sial = 'psd'.$datareject;
			// vd::dump($sial);
			$fieldsval = "";
			foreach ($items->field as $r)
			{
				$fieldsval .=$r.",";
			}
			$fieldsval = substr($fieldsval,0,-1);
			
			$datainfo = array (
				'reffidpengukuran' => $sial,
				'category' => $items->kategori,
				'fields' => $fieldsval,
				'keterangan' => $items->keterangan,
				'creperson' => $this->session->userdata('username'),				
				'credate' => dateTonum(date('Y-m-d h:i:s'))			
			);	

			$objPHPExcel->getActiveSheet()->setCellValue('A'.$row, $n+1)
							  ->setCellValue('B'.$row, "Reject")
							  ->setCellValue('C'.$row, $items->rd)
							  ->setCellValue('D'.$row, $items->nama_station)
							  ->setCellValue('E'.$row, $items->stationid)
							  ->setCellValue('F'.$row, $items->tanggal_pengukuran)
							  ->setCellValue('G'.$row, $items->volume)
							  ->setCellValue('H'.$row, $items->energy)
							  ->setCellValue('I'.$row, $items->counter_volume)
							  ->setCellValue('J'.$row, $items->counter_energy)
							  ->setCellValue('K'.$row, $items->ghv)
							  ->setCellValue('L'.$row, $items->pressureinlet)
							  ->setCellValue('M'.$row, $items->pressureoutlet)
							  ->setCellValue('N'.$row, $items->temperature)
							  ->setCellValue('O'.$row, date('Y-m-d h:i:s'))
							  ->setCellValue('P'.$row, $items->kategori)
							  ->setCellValue('Q'.$row, $fieldsval)
							  ->setCellValue('R'.$row, $items->keterangan);
			
			$this->b_model->insert_data('reject_info', $datainfo);
			// $this->b_model->insert_data('penyaluran_amr_daily', $datanya);
			//$this->b_model->update_all('realisasipenyaluranstationdaily', $filter , $dataapp);
			$this->b_model->update_data('realisasipenyaluranstationdaily', $filter ,$dataapp);	
			// delete data di table asal //
			// $this->b_model->delete_all('temp_amr_bridge_daily', $delfilt);	
			array_push($setun, $datanya);
			$n++;
		}	
		
		$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
		$file = "".$topath."Reject_Data". $sial. ".xls";
		$objWriter->save($file);
		$this->send_emailmultiaddress($to, $subject, $pesan, $file);
		delete_files( $topath );
		$dadum['success'] = true;
		$dadum['data'] = $setun;	
	    echo json_encode($dadum);	
	}
	public function unapprove()
	{
		$this->load->model('b_model');	
		//$idgroup 	= $this->
		$datass 	= $this->input->post('datagrid',TRUE);
		$user_email = $this->session->userdata('user_email');
		$group_email = $this->session->userdata('group_email');
		$group_exp	  = explode(';',$group_email);
		$to			  = array($user_email);
		
		foreach($group_exp as $emp)
		{
			array_push($to,$emp);
		}
		
		//$to = array($user_email,$group_email);
		
		$filter[0]['field'] = "isinfo";
		$filter[0]['data'] = array("comparison"	=> "eq",
								   "type"		=> "string",
								   "value"		=> 6);
		
		$datatemplate = $this->b_model->get_all_data('general_info', $filter , 2, 0, '');	
		$email_temp   = $datatemplate[0]->email;
		$email_exp	  = explode(';',$email_temp);
		
		foreach($email_exp as $emp)
		{
			array_push($to,$emp);
		}
		//$to 		= $this->input->post('toemail',TRUE);
		
		$subject 	= $datatemplate[0]->subject;
		$pesan 		= $datatemplate[0]->template;
		
		$datapost	= json_decode($datass);
		$setun 		= array();
		
		$n=0;		
		$path = substr(BASEPATH,0,-7).'asset/xls/';
		$topath = substr(BASEPATH,0,-7).'asset/tmp/';	
		$objReader = PHPExcel_IOFactory::createReader('Excel5');
		$objPHPExcel = $objReader->load($path.'reject_databulk.xls');
		$baseRow = 3;		
		$objPHPExcel->getActiveSheet()->setCellValue('A1', 'Reject Data ' );	
		
		
		foreach ($datapost as $items)
		{
			$row = $baseRow + $n;
			// $upfilt = whereTofilter('rowid', $items->reffamralertid, 'string' , 'eq');
			// $delfilt = whereTofilter('keyid', $items->keyid, 'string' , 'eq');
			//$upfilt = array('reffamralertdaily' => $items->reffamralertid);
			//$delfilt = array('rowid' => $items->reffidamrbridgedaily);			
			
			$filter[0]['field'] = "rowid";
			$filter[0]['data'] = array("comparison"	=> "eq",
									   "type"		=> "string",
									   "value"		=> $items->realisasipenyaluranstationdailyrowid);
									   
			$dataapp = array("statusapproval"	=> NULL,
							//"isapproval"		=> 0,
							"updperson"		=> $this->session->userdata('username'),
							"upddate"			=> dateTonum(date('Y-m-d H:i:s'))
			);
			$this->b_model->update_data('realisasipenyaluranstationdaily', $filter ,$dataapp);
			
			
			$filterupdfinal[0]['field'] = "rowid";
			$filterupdfinal[0]['data'] = array("comparison"	=> "eq",
									   "type"		=> "string",
									   "value"		=> $items->rowid);
									   
			$dataappfinal = array("isapproval"		=> 2);
		
			$this->b_model->update_data('realisasipenyaluranstationdailyfinal', $filterupdfinal ,$dataappfinal);
			
			//$dataapp = array('isapproval' => 0);
			
			$data = array(
				//"realisasipenyaluranstationdailyfinalrowid"	=> "PDFH".$data_id,
				"realisasipenyaluranstationdailyrowid"		=> $items->realisasipenyaluranstationdailyrowid,
				 "mstationrowid"							=> $items->mstationrowid,
				 "stationid"								=> $items->stationid,
				 "tglpengukuran"							=> dateTonum($items->tanggal_pengukuran),
				 "volume"									=> $items->volume,
				 "energy"									=> $items->energy,
				 "ghv"										=> $items->ghv,
				 "pressureinlet"							=> $items->pressureinlet,
				 "pressureoutlet"							=> $items->pressureoutlet,
				 "temperature"								=> $items->temperature,
				 "pressureoutlet"							=> $items->pressureoutlet,
				 "counter_volume"							=> $items->counter_volume,
				 "counter_energy"							=> $items->counter_energy,
				 "status"									=> 5,
				 "isapproval"								=> 2,
				 "typeapproval"								=> 2,
				 "creperson"								=> $this->session->userdata('username'),
				 "credate"									=> dateTonum(date('Y-m-d H:i:s'))
			);
					 
			$this->b_model->insert_data('h_realisasipenyaluranstationdaily', $data);		
			
			//$datareject = $this->b_model->insert_data('h_penyaluran_amr_daily', $datanya);
			
			$sial = 'padh'.$datareject;
			// vd::dump($sial);
			$fieldsval = "";
			foreach ($items->field as $r)
			{
				$fieldsval .=$r.",";
			}
			$fieldsval = substr($fieldsval,0,-1);
			
			$datainfo = array (
				'reffidpengukuran' => $sial,
				'category' => $items->kategori,
				'fields' => $fieldsval,
				'keterangan' => $items->keterangan,
				'creperson' => $this->session->userdata('username'),				
				'credate' => dateTonum(date('Y-m-d h:i:s'))			
			);	

			$objPHPExcel->getActiveSheet()->setCellValue('A'.$row, $n+1)
							  ->setCellValue('B'.$row, "Reject")
							  ->setCellValue('C'.$row, $items->rd)
							  ->setCellValue('D'.$row, $items->nama_station)
							  ->setCellValue('E'.$row, $items->stationid)
							  ->setCellValue('F'.$row, $items->tanggal_pengukuran)
							  ->setCellValue('G'.$row, $items->volume)
							  ->setCellValue('H'.$row, $items->energy)
							  ->setCellValue('I'.$row, $items->counter_volume)
							  ->setCellValue('J'.$row, $items->counter_energy)
							  ->setCellValue('K'.$row, $items->ghv)
							  ->setCellValue('L'.$row, $items->pressureinlet)
							  ->setCellValue('M'.$row, $items->pressureoutlet)
							  ->setCellValue('N'.$row, $items->temperature)
							  ->setCellValue('O'.$row, date('Y-m-d h:i:s'))
							  ->setCellValue('P'.$row, $items->kategori)
							  ->setCellValue('Q'.$row, $fieldsval)
							  ->setCellValue('R'.$row, $items->keterangan);
			
			$this->b_model->insert_data('reject_info', $datainfo);
			// $this->b_model->insert_data('penyaluran_amr_daily', $datanya);
			//$this->b_model->update_all('realisasipenyaluranstationdaily', $filter , $dataapp);
				
			// delete data di table asal //
			// $this->b_model->delete_all('temp_amr_bridge_daily', $delfilt);	
			array_push($setun, $datanya);
			$n++;
		}	
		
		$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
		$file = "".$topath."UN APPROVE". $sial. ".xls";
		$objWriter->save($file);
		
		$this->send_emailmultiaddress($to, $subject, $pesan, $file);
		delete_files( $topath );
		$dadum['success'] = true;
		$dadum['data'] = $setun;	
	    echo json_encode($dadum);	
	}
	
	public function updaterejectgaskomp()
	{
		$this->load->model('b_model');	
		$datass 	= $this->input->post('datagrid',TRUE);
		$to 		= $this->input->post('toemail',TRUE);
		$subject 	= $this->input->post('subject',TRUE);
		$pesan 		= $this->input->post('message',TRUE);
		$datapost 	= json_decode($datass);
		$setun = array();
		
		
		$n=0;		
		$path = substr(BASEPATH,0,-7).'asset/xls/';
		$topath = substr(BASEPATH,0,-7).'asset/tmp/';	
		$objReader = PHPExcel_IOFactory::createReader('Excel5');
		$objPHPExcel = $objReader->load($path.'reject_datagaskomp.xls');
		$baseRow = 3;		
		$objPHPExcel->getActiveSheet()->setCellValue('A1', 'Reject Data ' );
		
		foreach ($datapost as $items)
		{
			$row = $baseRow + $n;
						
			
			$filter[0]['field'] = "rowid";
			$filter[0]['data'] = array("comparison"	=> "eq",
									   "type"		=> "string",
									   "value"		=> $items->rowid);
									   
			$dataapp = array("statusapproval"	=> "Reject",
								 //"isapproval"		=> 0,
								 "updperson"		=> $this->session->userdata('username'),
								 "upddate"			=> dateTonum(date('Y-m-d h:i:s'))
								);
			//$dataapp = array('isapproval' => 0);
			
			$dataupd = array(
					  //"penygaskomposisifinalrowid"	=> "PGK".$data_id,
					  "gaskomposisidailyrowid"	=> $items->rowid,
					  "mstationrowid"			=> $items->stationcd,
					  "tbl_station_id"			=> $items->stationid,
					  "tgl_pencatatan"			=> dateTonum($items->tanggal_pencatatan),
					  "pressure"				=> floatval($items->pressure),
					  "temperatur"				=> floatval($items->temperatur),
					  "kalori"					=> floatval($items->kalori),
					  "isdaily"					=> 1,
					  "wobbe_index"				=> floatval($items->wobbe_index),
					  "sg"						=> floatval($items->sg),
					  "ch4"						=> floatval($items->ch4),
					  "c2h6"					=> floatval($items->c2h6),
					  "c3h8"					=> floatval($items->c3h8),
					  "n_c4h10"					=> floatval($items->n_c4h10),
					  "i_c4h10"					=> floatval($items->i_c4h10),
					  "n_c5h12"					=> floatval($items->n_c5h12),
					  "i_c5h12"					=> floatval($items->i_c5h12),
					  "c6h14"					=> floatval($items->c6h14),
					  "n2"						=> floatval($items->n2),
					  "co2"						=> floatval($items->co2),
					  "h2s"						=> floatval($items->h2s),
					  "h2o"						=> floatval($items->h2o),
					  "s"						=> floatval($items->s),
					  "sodium_potassium"		=> floatval($items->sodium_potassium),
					  "inerts"					=> floatval($items->inerts),
					  "o2"						=> floatval($items->o2),
					  "lead"					=> floatval($items->lead),
					  "mg"						=> floatval($items->mg),
					  "partikel"				=> floatval($items->partikel),
					  "partikel_size"			=> floatval($items->partikel_size),
					  "partikel_size"			=> floatval($items->partikel_size),
					  "isapproval"				=> 1,
					  "typeapproval"			=> 2,
					  "status"					=> 4,
					  "credate"					=> dateTonum(date('Y-m-d H:i:s')),
					  "creperson"				=> $this->session->userdata('username')
			);
					 
			$datareject = $this->b_model->insert_data('h_penygaskomposisifinal', $dataupd);		
		
			$sial = 'padh'.$datareject;
			// vd::dump($sial);
			$fieldsval = "";
			foreach ($items->field as $r)
			{
				$fieldsval .=$r.",";
			}
			$fieldsval = substr($fieldsval,0,-1);
			
			$datainfo = array (
				'reffidpengukuran' => $sial,
				'category' => $items->kategori,
				'fields' => $fieldsval,
				'keterangan' => $items->keterangan,
				'creperson' => $this->session->userdata('username'),				
				'credate' => dateTonum(date('Y-m-d h:i:s'))			
			);	

			$objPHPExcel->getActiveSheet()->setCellValue('A'.$row, $n+1)
							  ->setCellValue('B'.$row, "Reject")
							  ->setCellValue('C'.$row, $items->rd)
							  ->setCellValue('D'.$row, $items->nama_station)
							  ->setCellValue('E'.$row, $items->stationid)
							  ->setCellValue('F'.$row, $items->tanggal_pencatatan)
							  ->setCellValue('G'.$row, $items->kategori)
							  ->setCellValue('H'.$row, $fieldsval)
							  ->setCellValue('I'.$row, $items->wobbe_index)
							  ->setCellValue('J'.$row, $items->sg)
							  ->setCellValue('K'.$row, $items->ch4)
							  ->setCellValue('L'.$row, $items->c2h6)
							  ->setCellValue('M'.$row, $items->c3h8)
							  ->setCellValue('N'.$row, $items->n_c4h10)
							  ->setCellValue('O'.$row, $items->i_c4h10)
							  ->setCellValue('P'.$row, $items->n_c5h12)
							  ->setCellValue('Q'.$row, $items->i_c5h12)
							  ->setCellValue('R'.$row, $items->c6h14)
							  ->setCellValue('S'.$row, $items->n2)
							  ->setCellValue('T'.$row, $items->co2);
			
			$this->b_model->insert_data('reject_info', $datainfo);
			// $this->b_model->insert_data('penyaluran_amr_daily', $datanya);
			//$this->b_model->update_all('realisasipenyaluranstationdaily', $filter , $dataapp);
			$this->b_model->update_data('gaskomposisidaily', $filter ,$dataapp);	
			// delete data di table asal //
			// $this->b_model->delete_all('temp_amr_bridge_daily', $delfilt);	
			array_push($setun, $datanya);
			$n++;
		}	
		
		$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
		$file = "".$topath."Reject_Data". $sial. ".xls";
		$objWriter->save($file);

		$this->send_email($to, $subject, $pesan, $file);
		delete_files( $topath );
		$dadum['success'] = true;
		$dadum['data'] = $setun;	
	    echo json_encode($dadum);		
		
	}
	
	public function toexcelfinal()
	{
		$this->load->model('b_model');
		
		$limit = 'All';
	    $offset = 0;
	    $sorts = json_decode($this->input->get('sort', TRUE));
		$typeexport = $this->input->get('typeexport', True);
		$filter = json_decode($this->input->get('filter'),true);
		$areanya = $filter[3]['data']['value'];
		if (empty($filter)){			
			$filter =  array();			
			$kemarin = whereTofilter('tanggal', date("Y-m-d", time() - 86400) , 'date' , 'lt');
			$kemarinlusa = whereTofilter('tanggal', date("Y-m-d", time() - 172800) , 'date' , 'gt');
			$sbu = '' ;
			$area = '' ;
			$id_pel = '' ;
			$namapel =  '' ;		
			array_push($filter, $kemarin, $kemarinlusa, $sbu, $area, $id_pel, $namapel );
		} 		
		
		$isapproval = whereTofilter('isapproval', 1 , 'numeric' , 'eq');
		
		if ($typeexport === 'Validate'){
			$validate = whereTofilter('stat', 2 , 'numeric' , 'eq');
		} else if ($typeexport === 'Anomali') {
			$validate = whereTofilter('stat', 2 , 'numeric' , 'noteq');
		}
		
		array_push($filter, $validate, $isapproval);	
		
		// vd::dump($filter);	
		
		if ($sorts) {
		    foreach ($sorts as $sort) {
		        $orders[] = $sort->property.' '.$sort->direction;
		    }
		    $order_by = implode(', ', $orders);
	    } else {
	    	$order_by = 'tanggal,status,viewid  asc';
	    }		
		$dataas = $this->b_model->get_all_data('v_h_penyaluran_amr_daily_reals_export', $filter , $limit, $offset, $order_by);
		$count  = $this->b_model->count_all_data('v_h_penyaluran_amr_daily_reals_export', $filter);
		$n=0;
		
		$path = substr(BASEPATH,0,-7).'asset/xls/';		
		
		$objReader = PHPExcel_IOFactory::createReader('Excel2007');
		$objPHPExcel = $objReader->load($path.'data_final.xlsx');
		if (!empty($areanya) || $areanya != ''){
			$objPHPExcel->getActiveSheet()->setCellValue('A1', $typeexport.' Data Penyaluran Final'. $areanya );
		} else {
			$objPHPExcel->getActiveSheet()->setCellValue('A1', $typeexport.' Data Penyaluran Final'. date("Y-m-d", time() - 172800) . '-' . date("Y-m-d", time() - 86400) );
		}
		$objPHPExcel->getActiveSheet()->getColumnDimension('F')->setAutoSize(true);
		$baseRow = 3;
		
		foreach ($dataas as $datarow) {
			$row = $baseRow + $n;
			
			$objPHPExcel->getActiveSheet()->setCellValue('A'.$row, $n+1)
										  ->setCellValue('B'.$row, $datarow->typeapproved_desc)
										  ->setCellValue('C'.$row, $datarow->sbu)
										  ->setCellValue('D'.$row, $datarow->area)
										  ->setCellValue('E'.$row, "'".$datarow->id_pel)
										  ->setCellValue('F'.$row, $datarow->namapel)
										  ->setCellValue('G'.$row, $datarow->stream)
										  ->setCellValue('H'.$row, $datarow->tanggal)
										  ->setCellValue('I'.$row, is_null($datarow->fp) ? "-" : $datarow->fp )
										  ->setCellValue('J'.$row, is_null($datarow->ft) ? "-" : $datarow->ft )
										  ->setCellValue('K'.$row, is_null($datarow->fdvm) ? "-" : $datarow->fdvm )
										  ->setCellValue('L'.$row, is_null($datarow->fdvc) ? "-" : $datarow->fdvc )
										  ->setCellValue('M'.$row, is_null($datarow->fvm) ? "-" : $datarow->fvm )
										  ->setCellValue('N'.$row, is_null($datarow->fvc) ? "-" : $datarow->fvc )
										  ->setCellValue('O'.$row, is_null($datarow->ghvpel) ? "-" : $datarow->ghvpel )
										  ->setCellValue('P'.$row, is_null($datarow->energypel) ? "-" : $datarow->energypel )
										  ->setCellValue('Q'.$row, is_null($datarow->volmscf) ? "-" : $datarow->volmscf )
										  ->setCellValue('R'.$row, is_null($datarow->isapproval_desc) ? "-" : $datarow->isapproval_desc )
										  ->setCellValue('S'.$row, $datarow->creperson)
										  ->setCellValue('T'.$row, $datarow->credate)
										  ->setCellValue('U'.$row, $datarow->remarks)
										  ->setCellValue('V'.$row, $datarow->w1)
										  ->setCellValue('W'.$row, $datarow->w2)
										  ->setCellValue('X'.$row, $datarow->w3)
										  ->setCellValue('Y'.$row, $datarow->w4)
										  ->setCellValue('Z'.$row, $datarow->w5)
										  ->setCellValue('AA'.$row, $datarow->w6)
										  ->setCellValue('AB'.$row, $datarow->w7)
										  ->setCellValue('AC'.$row, $datarow->w8)
										  ->setCellValue('AD'.$row, $datarow->w_spare_1)
										  ->setCellValue('AE'.$row, $datarow->w_spare_2)
										  ->setCellValue('AF'.$row, $datarow->a1)
										  ->setCellValue('AG'.$row, $datarow->a2)
										  ->setCellValue('AH'.$row, $datarow->a3)
										  ->setCellValue('AI'.$row, $datarow->a4)
										  ->setCellValue('AJ'.$row, $datarow->a5)
										  ->setCellValue('AK'.$row, $datarow->a6)
										  ->setCellValue('AL'.$row, $datarow->a7)
										  ->setCellValue('AM'.$row, $datarow->a8)
										  ->setCellValue('AN'.$row, $datarow->a9)
										  ->setCellValue('AO'.$row, $datarow->a_spare_1)
										  ->setCellValue('AP'.$row, $datarow->a_spare_2);
			$n++;
		}
		
		$conditional = new PHPExcel_Style_Conditional();
		$conditional->setConditionType(PHPExcel_Style_Conditional::CONDITION_CELLIS)
				->setOperatorType(PHPExcel_Style_Conditional::OPERATOR_EQUAL)
				->addCondition('"-"');
		$conditional->getStyle()->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID)->getEndColor()->setARGB('ffa7a7');		
		
		$conditional2 = new PHPExcel_Style_Conditional();
		$conditional2->setConditionType(PHPExcel_Style_Conditional::CONDITION_CELLIS)
				->setOperatorType(PHPExcel_Style_Conditional::OPERATOR_NOTEQUAL)
				->addCondition('"-"');
		$conditional2->getStyle()->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID)->getEndColor()->setARGB('98fb98');		
		
		
		$conditional3 = new PHPExcel_Style_Conditional();
		$conditional3->setConditionType(PHPExcel_Style_Conditional::CONDITION_CELLIS)
				->setOperatorType(PHPExcel_Style_Conditional::OPERATOR_EQUAL)
				->addCondition('""');
		$conditional3->getStyle()->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID)->getEndColor()->setARGB('ffa7a7');
		
		$conditionalStyles = $objPHPExcel->getActiveSheet()->getStyle('A3')->getConditionalStyles();
		array_push($conditionalStyles, $conditional, $conditional2,$conditional3 );               
		$objPHPExcel->getActiveSheet()->getStyle('A$3:AP$'.$row)->setConditionalStyles($conditionalStyles);		
				
		header('Content-Disposition: attachment;filename="PenyaluranFinal_Data_'.date("Y-m-d").'.xlsx"'); 
        header('Cache-Control: max-age=0'); //no cache	
				
		$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
		$objWriter->save('php://output');

	
	}
	public function rebatchamr()	
	{		
		$start 		 = $this->input->post('startt',true);
		$end 		 = $this->input->post('endd',true);
		$area  		 = $this->input->post('area',true);
		$startTime   = strtotime($start);
		$endTime 	 = strtotime($end);
		$kemarin 	 = date("Y-m-d", time() - 86400);
		$kemarinlusa = date("Y-m-d", time() - 172800);
		$startt = $start > '' ? $start : $kemarinlusa;
		$endd 	= $end > '' ? $end : $kemarin;
		$out = array();
		echo 'success';
		exec('C:\\xampp\\htdocs\\sipgem\\exec\\rebatch2.bat '.$area. ' '. $startt. ' '. $endd.'' ,$out, $exitcode);	
	}
	
	public function loadrejectfield()
	{	   
		$this->load->model('b_model');
		$filter = $this->input->get('filter', TRUE) > '' ? $this->input->get('filter', TRUE) : array();
		
		array_push($filter);
		
		$limit = $this->input->get('limit', TRUE) > '' ? $this->input->get('limit', TRUE) : 150;
	    $offset = $this->input->get('start', TRUE);
	    
	    $sorts = json_decode($this->input->get('sort', TRUE));
	    if ($sorts) {
		    foreach ($sorts as $sort) {
		        $orders[] = $sort->property.' '.$sort->direction;
		    }
		    $order_by = implode(', ', $orders);
	    } else {
	    	$order_by = 'rowid asc';
	    }		
		$total_entries = $this->b_model->count_all_data('v_fieldsreject', $filter);
		$entries = $this->b_model->get_all_data('v_fieldsreject', $filter , $limit, $offset, $order_by);
		
	    $data['success'] = true;	
		$data['total'] = $total_entries;		
	    $data['data'] = $entries;
	     
	    extjs_output($data);
		
	}
	public function recalculate()
	{
		$filter = array();
		$limit = $this->input->post('limit', TRUE) > '' ? $this->input->post('limit', TRUE) : 25;
	    $offset = $this->input->post('start', TRUE);
		
		$kemarin = date("Y-m-d", time() - 86400);
		$kemarinlusa = date("Y-m-d", time() - 86400);
		// $kemarinlusa = whereTofilter('tanggal', date("Y-m-d", time() - 172800) , 'date' , 'gt');
		
		// $canrd = whereTofilter('sbu', $this->session->userdata('rd') , 'list' , '');	
		// $canarea = whereTofilter('area', $this->session->userdata('area') , 'list' , '');	
		
		$startt 	= $this->input->post('startt',true) > '' ? $this->input->post('startt',true) : $kemarinlusa ;
		$endd 		= $this->input->post('endd',true) > '' ? $this->input->post('endd',true) : $kemarin ;		
		// $sbu 		= $this->input->post('sbu',true) > '' ? whereTofilter('sbu', $this->input->post('sbu',true) , 'string' , 'eq') : $canrd ;
		// $area 		= $this->input->post('area',true) > '' ? whereTofilter('area', $this->input->post('area',true) , 'string' , 'eq') : $canarea ;
		// $id_pel 	= $this->input->post('id_pel',true) > '' ? whereTofilter('id_pel', $this->input->post('id_pel',true) , 'string' , 'eq') : '' ;
		// $namapel 	= $this->input->post('namapel',true) > '' ? whereTofilter('namapel', $this->input->post('namapel',true) , 'string' , '') : '' ;		
		
		$sql = $this->db->query("select updateghvdate('$startt', '$endd')");
		
		
		/*
		array_push($filter, $startt, $endd, $sbu, $area, $id_pel, $namapel);
		
		$total_entries = $this->b_model->count_all_data('v_h_penyaluran_amr_daily2_old_lama', $filter);
		$entries = $this->b_model->get_all_data('v_h_penyaluran_amr_daily2_old_lama', $filter , $limit, $offset, $order_by);
		$filterupdate = array();
		
		echo "<pre>";
				var_dump($filter);
		echo "</pre>";
		foreach($entries as $row)
		{
			//$penyaluranid = $row->penyaluranid;
			
			$filterupdate[0]['field'] = "penyaluranid";
			$filterupdate[0]['data'] = array("comparison"	=> "eq",
									   "type"		=> "string",
									   "value"		=> $row->penyaluranid);
									   
			$data = array("ghv"			=> $row->ghvpel,
						 "energy"		=> $row->energypel);		
							 
			$this->b_model->update_data('penyaluran_amr_daily', $filterupdate ,$data);				
			
		} */
		
		
	}
	public function deletedata()
	{
		$filter = $this->input->post('filter', TRUE) > '' ? $this->input->post('filter', TRUE) : array();
		$table = $this->input->post('tbl');
		$this->b_model->delete_data($table, $filter);
	}
	
	public function updateunapproved()
	{
		$this->load->model('b_model');	
		echo 'success';	
		$datass = $this->input->post('data', TRUE);
		$datapost = json_decode($datass);		
		$user_email = $this->session->userdata('user_email');
		$group_email = $this->session->userdata('group_email');
		$group_exp	  = explode(';',$group_email);		
		$to			  = array($user_email);		
		foreach($group_exp as $emp)
		{
			array_push($to,$emp);
		}
		$filter[0]['field'] = "isinfo";
		$filter[0]['data'] = array("comparison"	=> "eq",
								   "type"		=> "string",
								   "value"		=> 7 );	
		$filter[1]['field'] = "areacode";
		$filter[1]['data']  = array("comparison"	=> "eq",
								   "type"			=> "string",
								   "value"			=> $this->input->post('areaval'));

		
		$datatemplate = $this->b_model->get_all_data('general_info', $filter , 2 , 0 , '');		
		$email_temp   = $datatemplate[0]->email;
		$email_exp	  = explode(';',$email_temp);
		foreach($email_exp as $emp)
		{
			array_push($to,$emp);
		}
		$subject 	= $datatemplate[0]->subject;
		$pesan 		= $datatemplate[0]->template;			
		$setun = array();		
		$n=0;		
		$path = substr(BASEPATH,0,-7).'asset/xls/';
		$topath = substr(BASEPATH,0,-7).'asset/tmp/';	
		$objReader = PHPExcel_IOFactory::createReader('Excel5');
		$objPHPExcel = $objReader->load($path.'unapprove_amr.xls');
		$baseRow = 3;		
		$objPHPExcel->getActiveSheet()->setCellValue('A1', 'Unapproved Data Penyaluran Final' );	
		
		foreach ($datapost as $items)
		{			
			$row = $baseRow + $n;
			$upfilt = array('penyaluranid' => $items->penyaluranid );
			$dataupdate = array(				
				'updperson' => $this->session->userdata('username'),				
				'upddate' => dateTonum(date('Y-m-d H:i:s')),				
				// 'updcnt' => intval ($items->updcnt) + 1,
				'status' => 2,
				'isapproval' => 2
			);	
			
			$datanya = array(				
				'reffidamrbridgedaily' 	=> $items->reffidamrbridgedaily,
				'reffamralertid' 		=> $items->reffamralertid,
				'sbu' => $items->sbu,
				'area' => $items->areacode,
				'streamid' => $items->stream,
				'idpel' => $items->id_pel,
				'pelname' => $items->namapel,
				'fdatetime' => $items->fdatetime,			
				'fdate' => $items->fdate,
				'fmonth' => $items->fmonth,
				'fyear' => $items->fyear,				
				'fdvm' => $items->fdvm,
				'fdvc' => $items->fdvc,
				'fvm' => $items->fvm,
				'fvc' => $items->fvc,				
				'fp' => $items->fp,
				'ft' => $items->ft,				
				'status' => 2,
				'delflag' => 1,									
				'creperson' => $this->session->userdata('username'),				
				'credate' => dateTonum(date('Y-m-d H:i:s')),				
				'updcnt' => intval ($items->updcnt) + 1,
				'isapproval' => 2,
				'typeapproved' => $items->typeapproved
			);		
			
			$datanya['penyaluran_amr_dailypenyaluranid'] = $items->penyaluranid ;
			$this->b_model->insert_data('h_penyaluran_amr_daily', $datanya);
			$this->b_model->update_all('penyaluran_amr_daily', $upfilt , $dataupdate);
			
			$objPHPExcel->getActiveSheet()->setCellValue('A'.$row, $n+1)
							  ->setCellValue('B'.$row, $items->stat)
							  ->setCellValue('C'.$row, $items->sbu)
							  ->setCellValue('D'.$row, $items->area)
							  ->setCellValue('E'.$row, "'".$items->id_pel)
							  ->setCellValue('F'.$row, $items->namapel)
							  ->setCellValue('G'.$row, $items->stream)
							  ->setCellValue('H'.$row, $items->tanggal)
							  ->setCellValue('I'.$row, $items->fp)
							  ->setCellValue('J'.$row, $items->ft)
							  ->setCellValue('K'.$row, $items->fdvm)
							  ->setCellValue('L'.$row, $items->fdvc)
							  ->setCellValue('M'.$row, $items->volmscf)
							  ->setCellValue('N'.$row, $items->ghvpel)
							  ->setCellValue('O'.$row, $items->energypel)
							  ->setCellValue('P'.$row, $items->fvm)
							  ->setCellValue('Q'.$row, $items->fvc)
							  ->setCellValue('R'.$row, $this->session->userdata('username'))
							  ->setCellValue('S'.$row, date('Y-m-d H:i:s'));
			
			array_push($setun, $datanya);
			$n++;	
			
		}		
		
		$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
		$file = "".$topath."Unapproved_Data AMR.xls";
		$objWriter->save($file);

		$this->send_emailmultiaddress( $to, $subject, $pesan, $file );
		// delete_files( $topath );
	    
	}
	public function rebatchbulk()
	{
		$start 		 = $this->input->post('startt',true);
		$end 		 = $this->input->post('endd',true);
		$startTime   = strtotime($start);
		$endTime 	 = strtotime($end);
		$kemarin 	 = date("Y-m-d", time() - 86400);
		$kemarinlusa = date("Y-m-d", time() - 172800);
		$startt = $start > '' ? $start : $kemarinlusa;
		$endd 	= $end > '' ? $end : $kemarin;
		$out = array();
		echo 'success';
		exec('C:\\xampp\\htdocs\\sipgem\\exec\\rebatchbulk.bat '. $startt. ' '. $startt.' ' ,$out, $exitcode);		
	}
	public function getdatafdvc()
	{
		
		
		$filter[0]['field'] = "idrefpelanggan";
		$filter[0]['data'] = array("comparison"	=> "eq",
									   "type"		=> "string",
									   "value"		=> "012514873");
		
		$filter[1]['field'] = "fyear";
		$filter[1]['data'] = array("comparison"	=> "eq",
									   "type"		=> "numeric",
									   "value"		=> 2016);	
									   
		$filter[2]['field'] = "fmonth";
		$filter[2]['data'] = array("comparison"	=> "eq",
									   "type"		=> "numeric",
									   "value"		=> 8);

		$filter[3]['field'] = "fdate";
		$filter[3]['data'] = array("comparison"	=> "gt",
									   "type"		=> "numeric",
									   "value"		=> 5);
									   
		
		$filter[4]['field'] = "fdate";
		$filter[4]['data'] = array("comparison"	=> "lt",
									   "type"		=> "numeric",
									   "value"		=> 13);	
		$limit = "All";
		$offset = 0;
		$order_by = 'fdate,fhour ASC';
		$dataas = $this->b_model->get_all_data('amr_bridge', $filter , $limit, $offset, $order_by);
		
		foreach($dataas as $r)
		{
			for($n=0;$n<=24;$n++)
			{
				if($r->fhour == $n)
				{
					$data[$n][$r->fdate] = $r->fdvc;
				}
			}
			$n++;
		}
		
		$a = 0;	
		
		foreach($data as $popok)
		{
			$b = 1;
			foreach($popok as $p)
			{
				
				$datav[$a]["fhour"] = floatval($a);
				$datav[$a]["h".$b] = floatval($p);
				$b++;
			}
			$a++;
		}
		$json   = array(
			'success'   => TRUE,
			'message'   => "Loaded data",
			'total'     => $count,
			'data'      => $datav
		);
		echo json_encode($json);
		//echo $n;
		
		//die();

	}
	
	public function get_func_hourly ($satu, $dua, $tiga , $empat )
	{	 
		$sql = $this->db->query("select * from getscriptpivot_profile_hourly('fix','$satu', '$dua', '$tiga','$empat')");
		$hasil = $sql->result();
		$sqlasli = $this->db->query($hasil[0]->getscriptpivot_profile_hourly);
		return $sqlasli;
		// $data['success'] = true;	    
	    // $data['data'] = $sqlasli->result(); 
		// extjs_output($data);
		
	}
	
	public function findprofilingdaily()	
	{
		$endd = $this->input->get('endd',true) ;	
		$id_pel = $this->input->get('id_pel',true) ;
		$stream = $this->input->get('stream',true) > '' ? $this->input->get('stream',true) : 1 ;		
	    $total_entries = $this->b_model->total_func_chart($id_pel, $stream, $endd);
		$entries = $this->b_model->get_func_chart($id_pel, $stream, $endd);	
	
		$n = 0;
		foreach ($entries as $row){
			
			$saya[$n] = array (
				'id_pel' => $row->id_pel, 
				'namapel' => $row->namapel, 
				'tanggal' => $row->tanggal,
				'fdvc' => floatval($row->fdvc),
				'fdvm' => floatval($row->fdvm),
				'fp' => floatval($row->fp),
				'ft' => floatval($row->ft)
			);			
			$n++;
		}	
		
	    $data['success'] = true;
	    $data['total'] = $total_entries;
	    $data['data'] = $saya;    
		
	    extjs_output($data);		
	}
	
	public function findprofilinghourly($fdvc)	
	{
		$endd = $this->input->get('endd',true) ;	
		$id_pel = $this->input->get('id_pel',true) ;
		$stream = $this->input->get('stream',true) > '' ? $this->input->get('stream',true) : 1 ;
		$hasil = $this->get_func_hourly ($id_pel, $stream, $endd , $fdvc );		
			$gg=0;
			foreach($hasil->list_fields() as $field)
			{
				$namacolumn[$gg] = $field;
				$gg++;	
			}		
			$n = 0;
			
			foreach ($hasil->result() as $row ){
				$saya[$n] = array (
					'rowid' => $row->$namacolumn[0], 
					'id_pel' => $row->$namacolumn[1], 					
					'fhour' => $row->$namacolumn[2],					
					$namacolumn[4] => floatval($row->$namacolumn[4]),
					$namacolumn[5] => floatval($row->$namacolumn[5]),
					$namacolumn[6] => floatval($row->$namacolumn[6]),
					$namacolumn[7] => floatval($row->$namacolumn[7]),
					$namacolumn[8] => floatval($row->$namacolumn[8]),
					$namacolumn[9] => floatval($row->$namacolumn[9]),
					$namacolumn[10] => floatval($row->$namacolumn[10])
				);			
				$n++;	
			}
		// $data['success'] = true;
	    // $data['total'] = $total_entries;
	    // $data['data'] = $saya;    
			

	    extjs_output($saya);		

	}
	public function getmodelfindprofilinghourly($fdvc)
	{
		$endd = $this->input->post('endd',true) ;	
		$id_pel = $this->input->post('id_pel',true) ;
		$stream = $this->input->post('stream',true) > '' ? $this->input->post('stream',true) : 1 ;
		$hasil = $this->get_func_hourly ($id_pel, $stream, $endd , $fdvc );
		
		foreach($hasil->list_fields() as $field)
		{
			$data[] = $field;
		}			
		extjs_output($data);
		//var_dump($res);
	}
	
	public function cariprofiling ()
	{
		
	    $this->load->model('b_model');
		
		// default:  lepasin saya
		$kemarin = whereTofilter('tanggal', date("Y-m-d", time() - 86400) , 'date' , 'eq');
		// $kemarinlusa = whereTofilter('tanggal', date("Y-m-d", time() - 86400) , 'date' , 'gt');
		// $kemarinlusa = whereTofilter('tanggal', date("Y-m-d", time() - 172800) , 'date' , 'gt');
		
		$canrd = whereTofilter('sbu', $this->session->userdata('rd') , 'list' , '');	
		$canarea = whereTofilter('area', $this->session->userdata('area') , 'list' , '');		
	
		$filter = $this->input->get('filter', TRUE) > ''? $this->input->get('filter', TRUE) : array();		
		
		// $startt = $this->input->get('startt',true) >'' ? whereTofilter('tanggal', $this->input->get('startt',true) , 'date' , 'gt') : $kemarinlusa ;
		$endd = $this->input->get('endd',true) > '' ? whereTofilter('tanggal', $this->input->get('endd',true) , 'date' , 'eq') : $kemarin ;		
		$sbu = $this->input->get('sbu',true) > '' ? whereTofilter('sbu', $this->input->get('sbu',true) , 'string' , 'eq') : $canrd ;
		$area = $this->input->get('area',true) > '' ? whereTofilter('area', $this->input->get('area',true) , 'string' , 'eq') : $canarea ;
		$id_pel = $this->input->get('id_pel',true) > '' ? whereTofilter('id_pel', $this->input->get('id_pel',true) , 'string' , 'eq') : '' ;
		$namapel = $this->input->get('namapel',true) > '' ? whereTofilter('namapel', $this->input->get('namapel',true) , 'string' , '') : '' ;		
				
		array_push($filter, $startt, $endd, $sbu, $area, $id_pel, $namapel);
		// vd::dump($filter); 		
		
		$limit = $this->input->get('limit', TRUE) > '' ? $this->input->get('limit', TRUE) : 25;
	    $offset = $this->input->get('start', TRUE);
	    
	    $sorts = json_decode($this->input->get('sort', TRUE));
	    if ($sorts) {
		    foreach ($sorts as $sort) {
		        $orders[] = $sort->property.' '.$sort->direction;
		    }
		    $order_by = implode(', ', $orders);
	    } else {
	    	$order_by = 'namapel asc';
	    }
		
		//var_dump($filter);
	    $total_entries = $this->b_model->count_all_data('temp_amr_bridge_daily', $filter);
		$entries = $this->b_model->get_all_data('temp_amr_bridge_daily', $filter , $limit, $offset, $order_by);
		
	    $data['success'] = true;
	    $data['total'] = $total_entries;
	    $data['data'] = $entries;    
		
	    // vd::dump($data); 
	    extjs_output($data);
	}
	
	
	
}