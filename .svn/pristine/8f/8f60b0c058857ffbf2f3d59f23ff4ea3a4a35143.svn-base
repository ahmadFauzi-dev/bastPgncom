Ext.define('analisa.view.gridanomaliamr' ,{
	extend: 'Ext.grid.Panel', 
	initComponent	: function()
	{
		var msclass 	= Ext.create('master.global.geteventmenu');
		var event 	= 	Ext.decode(msclass.getevent(Init.idmenu));

		Init.asalnyareject = "1";
		var gridrejecto = Ext.create('analisa.view.rejecto');	
		
		Ext.define('modelGridAnomaliamr',{
			extend	: 'Ext.data.Model',
			fields	: ['keyid','id_pel','namapel','sbu','area','tanggal','stat','selisih_cm',
			'stream','selectopts','approved','reffamralertid', 'fmonth','fyear', 'fdatetime',
			'reffidamrbridgedaily', 'fdate', 'field', 'kategori','selisih_un','keterangan',
			{name : 'fdvm', usefield:'Y'},
			{name : 'fdvc', usefield:'Y'},
			{name : 'fp', usefield:'Y'},
			{name : 'ft', usefield:'Y'},
			{name : 'fvm', usefield:'Y'},
			{name : 'fvc', usefield:'Y'},
			{name : 'fcf', usefield:'Y'},
			{name : 'fmc', usefield:'Y'},
			{name : 'fmn', usefield:'Y'},
			{name : 'fsg', usefield:'Y'},
			{name : 'pbase', usefield:'Y'},
			{name : 'tbase', usefield:'Y'},
			{name : 'pmax', usefield:'Y'},
			{name : 'pmin', usefield:'Y'},
			{name : 'qmax', usefield:'Y'},
			{name : 'qmin', usefield:'Y'},
			{name : 'tmax', usefield:'Y'},
			{name : 'tmin', usefield:'Y'},
			{name : 'qbase_max', usefield:'Y'},
			{name : 'qbase_min', usefield:'Y'},
			'rdcode','areacode','credate','creperson','a_spare_1'
			]
		});	
		
		var storeGridAnomaliamr = Ext.create('Ext.data.JsonStore',{
			remoteSort : true,
			model	: 'modelGridAnomaliamr',
			storeId: 'amrAnomaliStore',
			proxy: {
				type: 'pgascomProxy',			
				url: base_url+'analisa/findamranomali',
				reader: {
					type: 'json',				
					root: 'data'
				}			
			}
		});	
			
		storeGridAnomaliamr.load();
		var statusAnomali;
		var storeGridHourlyAnomali;

		Ext.define('modelGridAnomaliDetail',{
			extend	: 'Ext.data.Model',
			fields	: ['id_pel','tanggal','alertdescription','alertname','alertalgoritma','status']
		});	
		var storeGridAnomaliDetail = Ext.create('Ext.data.JsonStore',{
			model	: 'modelGridAnomaliDetail',
			storeId: 'detailAnomaliStore',
			proxy: {
				type: 'pgascomProxy',
				pageParam: false, 
				startParam: false, 
				limitParam: false,			
				url: base_url+'analisa/showalertdailydetail',
				reader: {
					type: 'json',				
					root: 'data'
				}			
			}
		});	
		
		Ext.apply(this, {	
			loadMask: true, 
			columnLines: true, 
			multiSelect	: true,
			selType		: 'checkboxmodel',
			selModel: {
					injectCheckbox: 0,
					pruneRemoved: false,
					showHeaderCheckbox: false
				},		
			store		: storeGridAnomaliamr,
			id			: 'gridAnomaliamr',	
			// plugins: ['bufferedrenderer'],
			dockedItems: [
			{
				xtype: 'toolbar',
				items: [
					{
						iconCls: 'accept',					
						text: 'Approved',
						hidden	: event.p_approve,
						menu 	: {
						items	: [{
							text	: 'Approve All',
							handler	: function()
							{
								var extraparams = storeGridAnomaliamr.proxy.extraParams;
								extraparams.limit = storeGridAnomaliamr.pageSize;
								extraparams.start = parseInt(storeGridAnomaliamr.currentPage) - 1;
								extraparams.stat  = 1;
								
								Ext.Ajax.request({ 
									url			: base_url+'analisa/updateapprovalAll',
									method: 'POST',
									params:extraparams,
									success: function(response,requst){	
										var message = Ext.decode(response.responseText);
										// console.log(message.success);
										if(message.success == false)
										{
											Ext.Msg.alert('Error','Data sudah di approve oleh user lain');
										}else
										{
											Ext.Msg.alert('Sukses','Data Telah di Approve');
											
										}
										storeGridAnomaliamr.removeAll();								
										storeGridAnomaliamr.reload();
									},
									failure: function(response,requst)
									{
										Ext.Msg.alert('Fail !','Input Data Gagal');								
									}										
								});
							}
						},
						{
							text	: 'Approve Selected',
							handler	: function()
							{
								var items = [],tidakboleh;
								storeGridAnomaliamr.each(function(record){
									if (record.data.selectopts == true)
									{
										tidakboleh = record.data.stat;
										if (tidakboleh == 1){
											// console.log(record.data);
											items.push(record.data);
										}
										//console.log(record.data);
									}
								});
								Ext.Ajax.request({ 
									url			: base_url+'analisa/updateapproval',
									method: 'POST',
									params:{
										data : Ext.encode(items)
									},
									success: function(response,requst){
										var message = Ext.decode(response.responseText);
										// console.log(message.success);
										if(message.success == false)
										{
											Ext.Msg.alert('Error','Data sudah di approve oleh user lain');
										}else
										{
											Ext.Msg.alert('Sukses','Data Telah di Approve');
											
										}
										storeGridAnomaliamr.removeAll();								
										storeGridAnomaliamr.reload();
									},
									failure:function(response,requst)
									{
										Ext.Msg.alert('Fail !','Input Data Gagal '+response);
									}
								});
							}
						}]
						}
					},{
						text: 'Reject',
						iconCls : 'cancel',
						hidden	: event.p_reject,
						handler : function() 
						{
							Ext.Msg.show({
								 title:'Warning'
								,msg:'Anda Yakin..?'
								,buttons:Ext.Msg.YESNO
								,callback:function(btn) {
									if('yes' === btn) {
						
										Init.storeGridCopy = Ext.getCmp('gridrejecto').getStore();
										/*
										var grid = Ext.getCmp('gridAnomaliamr');
										var store = grid.getStore();							
										Init.storeGridCopy = store;
										Init.storeGridCopy.removeAll();							
										*/
										
										Init.storeGridCopy.removeAll();
										storeGridAnomaliamr.each(function(record){
											  if(record.data.selectopts == true)
											  {
													Init.storeGridCopy.add(record.copy());									
											  }
										  
										});
										
										var tabbbPanel = Ext.getCmp('TabAsikAja');
										
										storeGridAnomaliamr.removeAll();
										storeGridAnomaliamr.reload();										
													
										if (!Init.existtabreject) {							
											tabbbPanel.add(gridrejecto);
											tabbbPanel.child('#gridrejecto').tab.show();							
											tabbbPanel.setActiveTab('gridrejecto');
											Init.existtabreject = true;
										} else {
											tabbbPanel.child('#gridrejecto').tab.show();							
											tabbbPanel.setActiveTab('gridrejecto');								
										} 
										
									}
								}
							});

						}						
						
					},{
						text: 'Export',
						iconCls : 'page_white_excel',
						hidden	: event.p_export,
						xtype : 'button',
						handler : function(){
							window.location.href = base_url+'analisa/toexcel?typeexport=Anomali&filter='+Ext.encode(Init.specialparams);
							
						}
					},
					{
						text: 'Approve Alert',
						iconCls : 'rosette',
						hidden	: event.p_appalert,
						xtype : 'button',
						handler : function(){
								var items = [],tidakboleh;
								storeGridAnomaliamr.each(function(record){
									if (record.data.selectopts == true)
									{
										tidakboleh = record.data.stat;
										if (tidakboleh == 0){
											if(record.data.a_spare_1 == 1){
												items.push(record.data);
											}
											// console.log(record.data);
											
										}
										// console.log(record.data);
									}
								});
							
								Ext.Ajax.request({ 
									url			: base_url+'analisa/updateapproval',
									method: 'POST',
									params:{
										data : Ext.encode(items)
									},
									success: function(response,requst){
										var message = Ext.decode(response.responseText);
										// console.log(message.success);
										if(message.success == false)
										{
											Ext.Msg.alert('Error','Data sudah di approve oleh user lain');
										}else
										{
											Ext.Msg.alert('Sukses','Data Telah di Approve');
											
										}
										storeGridAnomaliamr.removeAll();								
										storeGridAnomaliamr.reload();
									},
									failure:function(response,requst)
									{
										Ext.Msg.alert('Fail !','Input Data Gagal '+response);
									}
								});	
							
						}
					}					
				]
			},
			{
				xtype: 'pagingtoolbar',
				dock: 'bottom',
				store: storeGridAnomaliamr,
				displayInfo: true,
				plugins : [Ext.create('Ext.ux.PagingToolbarResizer')]
			}],			
			columns		: [
				Ext.create('Ext.grid.RowNumberer',
					{
						header: 'No', 
						width: 40
					}
					),
				{
					dataIndex	: 'stat',
					locked : true,
					text	: 'Status',
					width		: 40,
					align	: 'center',
					renderer : function(value, metaData, record, rowIdx, colIdx, store, view){					
						var color = '';
						if(record.get('stat') == "2")
						{
							if (record.get('a_spare_1') == "0")
							{
								color = base_url+'asset/ico/black_indicator.ico';
							} else {
								color = base_url+'asset/ico/green_indicator.ico';
							}
						}else if(record.get('stat') == "1")
						{
							if (record.get('a_spare_1') == "0")
							{
								color = base_url+'asset/ico/black_indicator.ico';
							} else {
								color = base_url+'asset/ico/yellow_indicator.ico';
							}
						}else 							
						{
							if (record.get('a_spare_1') == "0")
							{
								color = base_url+'asset/ico/black_indicator.ico';
							} else {
								color = base_url+'asset/ico/red_indicator.ico';
							}
						}
						return '<div><img src='+color+' width="16px" height="16px"></div>';					
					}
				},
				{
					text	: 'RD',
					locked : true,
					width	: 60,
					cls : 'header-cell',
					dataIndex	: 'sbu'
				},
				{
					text	: 'Area',
					locked : true,
					width	: 80,
					cls : 'header-cell',
					dataIndex	: 'area'
				},	
				{
					text	: 'No Reff',
					locked : true,
					width	: 90,
					cls : 'header-cell',
					dataIndex	: 'id_pel'
				},
				{
					text	: 'Nama Pelanggan',
					locked : true,
					width	: 110,									
					cls : 'header-cell',
					dataIndex	: 'namapel'
				},
				{
					text	: 'Stream',
					locked : true,
					width	: 50,	
					align	: 'center',
					dataIndex	: 'stream'
				},		
				{
					text	: 'Tanggal',
					locked : true,
					width		: 70,
					cls : 'header-cell',
					align	: 'right',
					dataIndex	: 'tanggal'
				},
				{
					text	: 'Volume <br />(m3)',				
					width	: 100,
					cls   	: 'header-cell',
					align	: 'right',
					type	: 'float',
					dataIndex	: 'fdvc'
				},			
				{
					text	: 'P <br />(Bar-A)',				
					width	: 100,
					cls   	: 'header-cell',
					align	: 'right',
					type	: 'float',
					dataIndex	: 'fp'

				},
				{
					text	: 'T <br />(Celcius / Kelvin)',				
					width		: 100,
					cls   : 'header-cell',
					align	: 'right',
					type	: 'float',
					dataIndex	: 'ft'
				},
				{
					text	: 'Corr.Fact',				
					width		: 100,
					cls   : 'header-cell',
					align	: 'right',
					type	: 'float',
					dataIndex	: 'fcf'
				},
				{
					text	: 'C02 <br />(%)',				
					width		: 100,
					cls   : 'header-cell',
					align	: 'right',
					type	: 'float',
					dataIndex	: 'fmc'
				},
				{
					text	: 'N2 <br />(%)',				
					width		: 100,
					cls   : 'header-cell',
					align	: 'right',
					type	: 'float',
					dataIndex	: 'fmn'
				},			
				{
					text	: 'SG',				
					width		: 100,
					cls   : 'header-cell',
					align	: 'right',
					type	: 'float',
					dataIndex	: 'fsg'
				},			
				{
					text	: 'Pb <br />(bar)',				
					width		: 100,
					cls   : 'header-cell',
					type	: 'float',
					align	: 'right',
					dataIndex	: 'pbase'
				},
				{
					text	: 'Tb <br />(Celcius / Kelvin)',				
					width		: 100,
					type	: 'float',
					cls   : 'header-cell',
					align	: 'right',
					dataIndex	: 'tbase'
				},
				{
					text	: 'P.max <br />(bar)',				
					width		: 100,
					type	: 'float',
					cls   : 'header-cell',
					align	: 'right',
					dataIndex	: 'pmax'
				},
				{
					text	: 'P.min <br />(bar)',				
					width		: 100,
					type	: 'float',
					cls   : 'header-cell',
					align	: 'right',
					dataIndex	: 'pmin'
				},
				{
					text	: 'Q.max <br />(m3/jam)',				
					width		: 100,
					cls   : 'header-cell',
					align	: 'right',
					type	: 'float',
					dataIndex	: 'qmax'
				},			
				{
					text	: 'Q.min <br />(m3/jam)',				
					width		: 100,
					cls   : 'header-cell',
					align	: 'right',
					type	: 'float',
					dataIndex	: 'qmin'
				},				
				{
					text	: 'T.max <br />(Celcius / Kelvin)',				
					width		: 100,
					cls   : 'header-cell',
					align	: 'right',
					type	: 'float',
					dataIndex	: 'tmax'
				},				
				{
					text	: 'T.min <br />(Celcius / Kelvin)',				
					width		: 100,
					cls   : 'header-cell',
					align	: 'right',
					type	: 'float',
					dataIndex	: 'tmin'
				},	
				{
					text	: 'Vb Corr.Max <br />(m3/jam)',				
					width		: 100,
					cls   : 'header-cell',
					align	: 'right',
					type	: 'float',
					dataIndex	: 'qbase_max'
				},	
				{
					text	: 'Vb Corr.Min <br />(m3/jam)',
					width		: 100,
					cls   : 'header-cell',
					align	: 'right',
					type	: 'float',
					dataIndex	: 'qbase_min'
				},
				{
					text	: 'Created by',
					width		: 100,
					cls   : 'header-cell',
					// align	: 'right',
					// type	: 'float',
					dataIndex	: 'creperson'
				},
				{
					text	: 'Created date',
					width		: 100,
					cls   : 'header-cell',
					align	: 'right',
					// type	: 'float',
					dataIndex	: 'credate'
				}
			
			],
			listeners	: 
				{
					/* selectionchange: function (sm, records, options) {
						var rec = records[0];
						console.log('selectionchange fired '+ rec);
					}, 
					beforeselect: function(model, record, index, eOpts) {
						if (record.data.stat == 0) {//replace this with your logic.
							return false;
						}
					}, */
					itemclick : function(model, record, index, eOpts)
					{
						// if (record.data.stat == 0) {
							statusAnomali = Ext.getCmp('gridAnomaliStatus').getStore();
							storeGridHourlyAnomali = Ext.getCmp('gridVolumeHourly').getStore();

							statusAnomali.removeAll();
							statusAnomali.reload({params:{
											id : record.data.reffamralertid
							}});
							storeGridHourlyAnomali.removeAll();
							storeGridHourlyAnomali.reload({params:{
											id_pel : record.data.id_pel,
											tanggal : record.data.tanggal,
											area	: record.data.area,
											stream : record.data.stream
							}}
							);
						// }
					},
					select: function (model, record, index, eOpts) {
						// statusAnomali = Ext.getCmp('gridAnomaliStatus').getStore();
						// storeGridHourlyAnomali = Ext.getCmp('gridVolumeHourly').getStore();
						// statusAnomali.removeAll();
						// statusAnomali.reload({params:{
										// id : record.data.reffamralertid
						// }});
						// storeGridHourlyAnomali.removeAll();
						// storeGridHourlyAnomali.reload({params:{
										// id_pel : record.data.id_pel,
										// tanggal : record.data.tanggal,
										// stream : record.data.stream
						// }}
						// );

						record.set('approved',1);
						record.set('selectopts',true);
					},
					deselect: function (view, record, item, index, e, eOpts) {
						//console.log('deselect fired'+index);
						//record.data.selectopts = false;
						record.set('selectopts',false);
					}
				}		
			}
		);
		this.callParent(arguments);
	}	
	
});