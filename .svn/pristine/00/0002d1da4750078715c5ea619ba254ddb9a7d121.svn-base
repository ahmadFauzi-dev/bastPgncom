Ext.define('analisa.offtake.view_gaskomp.gridhourly' ,{
	 extend			: 'Ext.grid.Panel',
	 id    			: ''+Init.idmenu+'gridhourlygaskomp',
	 initComponent: function() {
		var filter 		= [];
		var msclass 		= Ext.create('master.global.geteventmenu');
		var model 			= msclass.getmodel('v_gaskomposisihourly');
			model.push('selectopts');
			model.push('field');
			model.push('kategori');
			model.push('keterangan');
		var columns 		= msclass.getcolumn('v_gaskomposisihourly');	
		var coldisplay		= [];
		var store 		  	= msclass.getstore(model,'v_gaskomposisihourly',filter);
		/*
		store.getProxy().extraParams = {
		
		view : "v_gaskomposisihourly",
			
			"filter[0][field]" : "statusapproval",
			"filter[0][data][type]" : "boolean",
			"filter[0][data][comparison]" : "eq",
			"filter[0][data][value]" :'Approve',
		};	
		*/
		//store.load();
		
		columns[1].hidden	= true;
		columns[3].text = "Kode Station";

		coldisplay[0] = columns[0];
		/*
		coldisplay[1] = {
			dataIndex	: "statusdata",
			width		: 20,
			locked   : true,
			renderer : function(value, metaData, record, rowIdx, colIdx, store, view){
				
				//metaData.tdAttr= 'data-qtip="'+message+'"';
				var color = '';
				if(record.get('statusdata') == "1")
				{
					color = base_url+'asset/icons/flag_green.png';
				}else if(record.get('statusdata') == "0")
				{
					color = base_url+'asset/icons/flag_red.png';
				}else
				{
					color = base_url+'asset/icons/flag_purple.png';
				}
				//color = base_url+'asset/ico/green_indicator.ico';
				return '<div><img src='+color+' width="15px" height="15px"></div>';
				
			}
		}*/
		coldisplay[1] = columns[3];
		coldisplay[1].hidden = true;
		coldisplay[1] = {
			text	: 'Nama Station',
			dataIndex	: columns[4].dataIndex,
			locked	: true
		}
		coldisplay[2] = columns[5];
		coldisplay[2].text = "RD";
		
		coldisplay[3] = columns[7];
		coldisplay[3].text = "Jenis Station";
		coldisplay[3].locked = true;
		
		coldisplay[4] = columns[9];
		coldisplay[4].text = "Tanggal Pencatatan";
		//coldisplay[4].flex = 1;
		coldisplay[4].locked = true;
		
		
		
		
		coldisplay[5] = 
		{
			text	: "Gas Komposisi",
			columns	: [
			/*
			{
				text	: "Pressure",
				dataIndex	: "pressure"
			},
			{
				text	: "Temperatur",
				dataIndex	: columns[11].dataIndex
			},
			{
				text	: "Kalori",
				dataIndex	: columns[12].dataIndex
			},
			*/
			columns[13],
			columns[14],
			columns[15],
			columns[16],
			columns[17],
			columns[18],
			columns[19],
			columns[20],
			columns[21],
			
			
			]
		};
		coldisplay[6] = 
		{
			text : "Total",
			dataIndex : "total"
		}
		
		//console.log(columns);
		
		var editing = Ext.create('Ext.grid.plugin.RowEditing', {
		  clicksToEdit: 2,
		  listeners :
			{					
				'edit' : function (editor,e) {
						 
						 var grid 	= e.grid;
						 var record = e.record;
						 
						var recordData = record.data; 
						//msclass.savedata(recordData,base_url+'admin/updategaskomp');
				}
			}
		});
		
		Ext.apply(this, {
			store		: store,
			//multiSelect	: true,
			selType		: 'checkboxmodel',
			multiSelect	: true,
			height		: 280,
			autoScroll	: true,
			id			: 'gridhourlygaskomp',
			closable		: true,
			dockedItems	: [
				{
					xtype: 'toolbar',
					items	: [{
						text	: 'Export',
						iconCls	: 'page_white_excel',
						handler	: function()
						{
							msclass.exportdata('gridhourlygaskomp');
						}
					}]
				}
			],
			columns		: coldisplay,
			plugins		: editing,
			bbar: Ext.create('Ext.PagingToolbar', {
				pageSize: 10,
				store: store,
				displayInfo: true
			}),
			listeners	: 
			{
				beforeitemcontextmenu: function(view, record, item, index, e)
				{
					e.stopEvent();
					data = record.data;
					medugridkelengkapan.showAt(e.getXY());
				},
				itemclick	: function(view, record, item, index, e, eOpts)
				{
				},
				select: function (model, record, index, eOpts) {
					record.set('selectopts',true);
				},
				deselect: function (view, record, item, index, e, eOpts) {
					
					record.set('selectopts',false);
				}
			}
		});
		this.callParent(arguments);
		
	}
});