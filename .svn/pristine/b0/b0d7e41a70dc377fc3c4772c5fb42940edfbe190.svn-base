Ext.define('EM.analisa.view.downgridpenyapp' ,{
    extend: 'Ext.grid.Panel',
    initComponent: function() {
	
	Ext.define('mdowngridpenyapp',{
		extend	: 'Ext.data.Model',
		fields	: ['tbl_station_id','tanggalpengukuran','volume','energy','ghv','pin','pout','temperature','counter_volume','counter_energy','tanggal','stat','stationname','error','tglpenyalurandate','selectopts']
	});
	var data;
	
	var storedowngridpenyapp = Ext.create('Ext.data.JsonStore',{
				model	: 'mdowngridpenyapp',
				proxy	: {
				type			: 'pgascomProxy',
				url				: base_url+'admin/downloadpenyaluran',
				//extraParams 	: {id : '24'},
				reader: {
					type: 'json',
					root: 'data'
				}
				}
	});
	storedowngridpenyapp.load();
	storedowngridpenyapp.filter('error',"1");

	
	
	
	
	var medugridkelengkapan = Ext.create('Ext.menu.Menu',{
		id: 'medugridkelengkapansapproval',
		items	: [{
			text	: 'Upload Dokumen Pendukung',
			iconCls	: 'arrow_join'
		},
		{
			text	: 'Download Dokumen Pendukung',
			iconCls	: 'attach'
		},
		{
			text	: 'Kelengkapan Data Hourly',
			iconCls	: 'application_form_magnify',
			handler	: function()
			{
				var data_show = data;
				
				console.log(data_show);
				
				var gridhourly = Ext.create('EM.analisa.view.downgridpenyhourly');
				var gridtaksasi = Ext.create('EM.analisa.view.downgridpenyhourlytaksasi');
				
				var storeHourlykelengkapan =  gridhourly.getStore();
				//var storekelengkapandatataksasi = storeHourlykelengkapan;
				
				storeHourlykelengkapan.load({
					method: 'GET',
					params : {
						"filter[0][field]" : "tgl_pengukuran",
						"filter[0][data][type]" : "date",
						"filter[0][data][comparison]" : "eq",
						"filter[0][data][value]" : data_show.tanggalpengukuran,
						"filter[1][field]" : "tbl_station_id",
						"filter[1][data][type]" : "numeric",
						"filter[1][data][comparison]" : "eq",
						"filter[1][data][value]" : parseInt(data.tbl_station_id),
					}
				});
				
				
					
				var tabPanelas = Ext.getCmp('tabpenyalurandata');
				var items = tabPanelas.items.items;
				var exist = false;
				
				var name = 'kelengkapandatahourly';
				var iconCls = 'application_form_magnify';
				var titless	 = 'Kelengkapan Data Hourly';
				var filter = ["filter"];
				filter.push({
					"field"	: "tglpenyalurandate",
						"data"	: [{
							"type"	: "date",
							"comparison"	: "eq",
							"value"			: "2015-12-11"
					}]
				},
				{
					"field"	: "tbl_station_id",
						"data"	: [{
							"type"			: "numeric",
							"comparison"	: "eq",
							"value"			: 116
						}]	
				});
				
				var aneh = "field";
				
				var tambahadd = Ext.create("Ext.tab.Panel",{
					title		: titless,
					id			: name,
					//xtype		: 'panel',
					iconCls		: iconCls,
					//closable	: true,
					//overflowY	: 'scroll',
					bodyPadding	: '5 5 0',
					items		: [{
						title	: 'Automatic',
						items	: gridhourly
					},
					{
						title	: 'Taksasi',
						items	: gridtaksasi
					}]
				});
				console.log(Ext.JSON.encode(filter));
				
				
				
				for(var i = 0; i < items.length; i++)
				{
					if(items[i].id == name){
							tabPanelas.setActiveTab(name);
							tabPanelas.remove(name);
							Ext.getCmp('tabpenyalurandata').add(tambahadd);
							tabPanelas.setActiveTab(name);	
							exist = true;
					}
				}
				
				if(!exist){
					Ext.getCmp('tabpenyalurandata').add(tambahadd);
					tabPanelas.setActiveTab(name);	
				}
			}
		}]
	});
	
	var editing = Ext.create('Ext.grid.plugin.RowEditing', {
		  clicksToEdit: 2,
		  listeners :
			{					
				'edit' : function (editor,e) {
						 
						 var grid 	= e.grid;
						 var record = e.record;
						 
						var recordData = record.data; 
						
						Ext.Ajax.request({ 
							
							url: base_url+'admin/insertdatamanualbulk',
							method: 'POST',
							params: recordData,
							success: function(response,requst){
								//workflowGrid.load();
								//console.log(response.text);
								//alert('test');
								storegridstationconfigdetail.reload();
							},
							failure:function(response,requst)
							{
								Ext.Msg.alert('Fail !','Input Data Entry Gagal');
								Ext.Msg.alert('Warning!', 'Authentication server is unreachable : ' + action.response.responseText + "");
							}
										
						})
							
				}
			}
		});
		
		var filterconfig = {ftype	: 'filters',
			filters	: [
				{
					type	: 'date',
					dateFormat	: 'Y-m-d',
					dataIndex	: 'tglpenyalurandate'
				}
			]
		};
		
		Ext.apply(this, {
			store		: storedowngridpenyapp,
			title		: 'Grid Penyaluran',
			//height		: 200,
			multiSelect	: true,
			selType		: 'checkboxmodel',
			autoScroll	: true,
			id			: 'downloadgridpenyaluranapp',
			tbar		: [{
				text	: 'Approve',
				iconCls	: 'accept',
				handler	: function()
				{
					storedowngridpenyapp.each(function(record){
					  
					  if(record.data.selectopts == true)
					  {
							Ext.Ajax.request({	 
								
								url: base_url+'admin/inserttofin',
								method: 'POST',
								params: record.data,
								success: function(response,requst){
									
									//storegridstationconfigdetail.reload();
								},
								failure:function(response,requst)
								{
									Ext.Msg.alert('Fail !','Input Data Entry Gagal');
									Ext.Msg.alert('Warning!', 'Authentication server is unreachable : ' + action.response.responseText + "");
								}
											
							})
					  }
					});
					 Ext.MessageBox.alert('Notification', 'Approved');
					//storedowngridpenyapp.reload();
				}
				
			},
			{
					text	: 'Reject',
					iconCls	: 'cancel'
			}],
			columns		: [
			Ext.create('Ext.grid.RowNumberer',{header:'No'}),
			{
				dataIndex	: 'error',
				width		: 20,
				renderer : function(value, metaData, record, rowIdx, colIdx, store, view){
					
					//metaData.tdAttr= 'data-qtip="'+message+'"';
					var color = '';
					if(record.get('error') == "1")
					{
						color = base_url+'asset/ico/green_indicator.ico';
					}else if(record.get('error') == "0")
					{
						color = base_url+'asset/ico/red_indicator.ico';
					}
					return '<div><img src='+color+' width="15px" height="15px"></div>';
					
				}
			},
			{
				"text"	: "Station Name",
				flex	: 1,
				"dataIndex" : "stationname"
			},
			{
				"text"		: "Tanggal Pengukuran",
				xtype		: 'datecolumn',
				flex	: 1,
				"dataIndex"	: "tglpenyalurandate",
				format		: 'Y-m-d'
			},
			{
				text	: 'Volume',
				align	: 'center',
				flex	: 1,
				xtype	: 'numbercolumn',
				format	: '0.00000000000000',
				dataIndex	: 'volume',
				renderer	: function(value, metaData, record, rowIdx, colIdx, store, view)
				{
					var volume = record.get('volume');
					//var parameter_periode	 = record.get('parameter_periode');
					//var message = getColorEstimasi(tgl_pengukuran,jam_pengukuran,tbl_station_id,tbl_parameter,parameter_periode);
					if (volume == 0) 
					{
						return '<div style="color:#FF0000">'+value+'</div>';
					}else
					{
						return value;
					}
				},
				editor		: 
				{	
					xtype	: 'numberfield',
					allowDecimals: true,
					decimalPrecision: 14,
					format	: '0.00000000000000',
					name	: 'volume'
				}
			},
			{
				text	: 'Energy <br /> BBTUD',
				align	: 'center',
				flex	: 1,
				dataIndex	: 'energy',
				renderer	: function(value, metaData, record, rowIdx, colIdx, store, view)
				{
					var volume = record.get('energy');
					//var parameter_periode	 = record.get('parameter_periode');
					//var message = getColorEstimasi(tgl_pengukuran,jam_pengukuran,tbl_station_id,tbl_parameter,parameter_periode);
					if (volume == 0) 
					{
						return '<div style="color:#FF0000">'+value+'</div>';
					}else
					{
						return value;
					}
				},
				editor		: 
				{
					xtype	: 'numberfield',
					allowDecimals: true,
					decimalPrecision: 14,
					name	: 'energy'
				}
			},
			{
				text	: 'Counter Volume <br /> (MMSCF)',
				align	: 'center',
				flex	: 1,
				dataIndex	: 'counter_volume',
				renderer	: function(value, metaData, record, rowIdx, colIdx, store, view)
				{
					var volume = record.get('counter_volume');
					//var parameter_periode	 = record.get('parameter_periode');
					//var message = getColorEstimasi(tgl_pengukuran,jam_pengukuran,tbl_station_id,tbl_parameter,parameter_periode);
					if (volume == 0) 
					{
						return '<div style="color:#FF0000">'+value+'</div>';
					}else
					{
						return value;
					}
				},
				editor		: {
					xtype	: 'numberfield',
					allowDecimals: true,
					decimalPrecision: 14,
					name	: 'counter_volume'
				}
				
			},
			{
				text	: 'Counter Energy <br /> (BBTU)',
				align	: 'center',
				flex	: 1,
				editor	:
				{
					xtype	: 'numberfield',
					allowDecimals: true,
					decimalPrecision: 14,
					name	: 'counter_energy'
				},
				dataIndex	: 'counter_energy',
				renderer	: function(value, metaData, record, rowIdx, colIdx, store, view)
				{
					var volume = record.get('counter_energy');
					//var parameter_periode	 = record.get('parameter_periode');
					//var message = getColorEstimasi(tgl_pengukuran,jam_pengukuran,tbl_station_id,tbl_parameter,parameter_periode);
					if (volume == 0) 
					{
						return '<div style="color:#FF0000">'+value+'</div>';
					}else
					{
						return value;
					}
				}
			},
			{
				text	: 'GHV <br /> (BTU/SCF)',
				align	: 'center',
				flex	: 1,
				dataIndex	: 'ghv',
				editor		: {
					xtype	: 'numberfield',
					allowDecimals: true,
					decimalPrecision: 14,
					name	: 'ghv'
				},
				renderer	: function(value, metaData, record, rowIdx, colIdx, store, view)
				{
					var volume = record.get('ghv');
					//var parameter_periode	 = record.get('parameter_periode');
					//var message = getColorEstimasi(tgl_pengukuran,jam_pengukuran,tbl_station_id,tbl_parameter,parameter_periode);
					if (volume == 0) 
					{
						return '<div style="color:#FF0000">'+value+'</div>';
					}else
					{
						return value;
					}
				}
			},
			{
				text	: 'Tekanan IN <br /> (PSIG)',
				align	: 'center',
				flex	: 1,
				dataIndex	: 'pin',
				editor		: {
					xtype	: 'numberfield',
					allowDecimals: true,
					decimalPrecision: 14,
					name	: 'pin'
				},
				renderer	: function(value, metaData, record, rowIdx, colIdx, store, view)
				{
					var volume = record.get('pin');
					//var parameter_periode	 = record.get('parameter_periode');
					//var message = getColorEstimasi(tgl_pengukuran,jam_pengukuran,tbl_station_id,tbl_parameter,parameter_periode);
					if (volume == 0) 
					{
						return '<div style="color:#FF0000">'+value+'</div>';
					}else
					{
						return value;
					}
				}
			},
			{
				text	: 'Tekanan OUT <br /> (PSIG)',
				align	: 'center',
				flex	: 1,
				dataIndex	: 'pout',
				editor		: {
					xtype	: 'numberfield',
					allowDecimals: true,
					decimalPrecision: 14,
					name	: 'pout'
				},
				renderer	: function(value, metaData, record, rowIdx, colIdx, store, view)
				{
					var volume = record.get('pout');
					//var parameter_periode	 = record.get('parameter_periode');
					//var message = getColorEstimasi(tgl_pengukuran,jam_pengukuran,tbl_station_id,tbl_parameter,parameter_periode);
					if (volume == 0) 
					{
						return '<div style="color:#FF0000">'+value+'</div>';
					}else
					{
						return value;
					}
				}
			},
			{
				text	: 'Temperature',
				align	: 'center',
				flex	: 1,
				dataIndex	: 'temperature',
				editor		: {
					xtype	: 'numberfield',
					allowDecimals: true,
					decimalPrecision: 14,
					name	: 'temperature'
				},
				renderer	: function(value, metaData, record, rowIdx, colIdx, store, view)
				{
					var volume = record.get('temperature');
					//var parameter_periode	 = record.get('parameter_periode');
					//var message = getColorEstimasi(tgl_pengukuran,jam_pengukuran,tbl_station_id,tbl_parameter,parameter_periode);
					if (volume == 0) 
					{
						return '<div style="color:#FF0000">'+value+'</div>';
					}else
					{
						return value;
					}
				}
			}],
			features	: [filterconfig],
			plugins	: editing,
			bbar: Ext.create('Ext.PagingToolbar', {
				pageSize: 10,
				store: storedowngridpenyapp,
				displayInfo: true
			}),
			listeners	: 
			{
				beforeitemcontextmenu: function(view, record, item, index, e)
				{
					e.stopEvent();
					data = record.data;
					medugridkelengkapan.showAt(e.getXY());
				},
				itemclick	: function(view, record, item, index, e, eOpts)
				{
					console.log(record.data);
				},
				select: function (model, record, index, eOpts) {
					//console.log(record.data);
					//record.data.selectopts = true;
					record.set('selectopts',true);
				},
				deselect: function (view, record, item, index, e, eOpts) {
					//console.log('deselect fired'+index);
					//record.data.selectopts = false;
					record.set('selectopts',false);
				}
			}
		});

        this.callParent(arguments);
    }
});