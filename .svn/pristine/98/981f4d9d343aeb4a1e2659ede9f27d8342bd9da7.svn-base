Ext.define('analisa.view.rejectoss' ,{
	extend: 'Ext.grid.Panel',    
	initComponent	: function()
	{
		
	Ext.define('modelComboRejectCategory',{
			extend	: 'Ext.data.Model',
			fields	: ['rowid','description']
		});	
		
	Ext.define('modelComboRejectField',{
			extend	: 'Ext.data.Model',
			fields	: ['rowid','tabel','kolom','description']
		});		

	
	var ComboRejectCategory = Ext.create('Ext.data.JsonStore',{
		model	: 'modelComboRejectCategory',
		storeId: 'idComboRejectCategory',
		proxy: {
			type: 'pgascomProxy',			
			url: base_url+'analisa/loadrejectcategory',
			reader: {
				type: 'json',				
				root: 'data'
			}			
		}
	});	
	
	var ComboField = Ext.create('Ext.data.JsonStore',{
		model	: 'modelComboRejectField',
		storeId: 'idComboRejectField',
		proxy: {
			type: 'pgascomProxy',			
			url: base_url+'analisa/loadrejectfield',
			reader: {
				type: 'json',				
				root: 'data'
			}			
		}
	});
	
	ComboField.load();
	ComboRejectCategory.load();
	
	var editing = Ext.create('Ext.grid.plugin.RowEditing', {
		clicksToEdit: 1,
		listeners :
		{					
			'edit' : function (editor,e) {
					 
					var grid 	= e.grid;
					var record = e.record;
					var recordData = record.data; 						
			
			}
		}
	});
	
	var required = '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>';	
	
	Ext.apply(this,{
			title  		: 'AMR Koreksi Reject',			
			frame		: true,
			store		: Init.storeGridCopy,
			// closable	: true,
			id			: 'gridrejectoss',
			iconCls 	: 'cross',			
		dockedItems: [
		{
			xtype: 'toolbar',
			items: [
				{	text: 'Cancel',
					iconCls : 'cancel',
					xtype : 'button',
					handler : 
					function() {
						var storeasal = Ext.getCmp('idgridamrkoreksi').getStore();
						Ext.getCmp('tabkoreksiamr').child('#gridrejectoss').tab.hide();
						Ext.getCmp('tabkoreksiamr').setActiveTab(0);

						storeasal.removeAll();
						storeasal.reload();
					}
				},
				{
					text: 'Send',
					iconCls : 'email_go',
					xtype : 'button',
					handler : 
					function() {
						
							var storetosubmit = Init.storeGridCopy;
							var dataobj = [];
							var datasbumit;
							var count = 0; boleh = false ;
							var areaold = "";
							var areaval = "";
							storetosubmit.each(function(record){								
								
								if(record.data.kategori == "" && record.data.keterangan == "" && record.data.field == "") {
									boleh = false;
								} else {
									boleh = true;
								}
								
								dataobj.push(record.data);
								if(areaold == "")
								{
									areaold = record.data.area;
								}
								
								if(areaold != record.data.area)
								{
									count = count+1;
								}
								
								areaval = record.data.areacd;
								
							});							
							datasubmit = Ext.encode(dataobj);
							// console.log(datasubmit);							
							// console.log(areaval);							
							if(count == 0 && boleh == true )
							{ 

								// Ext.Msg.show({
									// msg		: 'Please Wait',
									// wait	: true,
									// buttons	: Ext.Msg.INFO,
									// icon	: Ext.Msg.QUESTION
								// });								
								
								
								Ext.Ajax.request({
								method : 'POST',
								url		: base_url+'analisa/koreksi/updaterejectkoreksi',
								params: {
									datagrid : datasubmit,
									areaval	 : areaval
								},
								success: function(response){
									// var text = response.responseText;
									Ext.Msg.alert('Success', 'Email Telah di Kirim!!!');
									// Ext.getCmp('tabkoreksiamr').remove('gridrejectoss', true);
									
									var storeasal = Ext.getCmp('idgridamrkoreksi').getStore();
									Ext.getCmp('tabkoreksiamr').child('#gridrejectoss').tab.hide();
									Ext.getCmp('tabkoreksiamr').setActiveTab(0);
									
									// setTimeout(function(){
										// Ext.Msg.hide();											
									// }, 5000);
									
									storeasal.removeAll();
									storeasal.reload();										
									
								// process server response here
								}
								});
								

							}else
							{
								Ext.Msg.show({
									title	: 'Error',
									msg		: "Kategori, Field dan Keterangan Kosong!!!",
									buttons	: Ext.Msg.OK,
									icon	: Ext.Msg.ERROR,
								});
							}						
					}                     
				}
				]
		}],	
		columns		: [
			Ext.create('Ext.grid.RowNumberer',
				{
					header: 'No', 
					width: 40
				}
				),
			{
				text	: 'Tanggal',
				locked   : true,
				width		: 70,
				cls   : 'header-cell',
				align	: 'right',
				//type	: 'date',
				dataIndex	: 'createdate'
			},
			{
				text	: 'No Reff',
				locked   : true,
				width	: 100,
				cls   : 'header-cell',
				dataIndex	: 'customercode'
			},
			// {
				// text	: 'Nama Pelanggan',
				// locked   : true,
				// width	: 180,				
				// cls   : 'header-cell',
				// dataIndex	: 'namapel'
			// },
			// {
				// text	: 'Stream',
				// locked   : true,
				// align	: 'center',
				// width	: 50,
				// type	: 'int',				
				// dataIndex	: 'stream'
			// },				
			
			// {
				// text	: 'RD',
				// locked   : true,
				// width	: 75,
				// cls   : 'header-cell',
				// dataIndex	: 'sbu'
			// },
			// {
				// text	: 'Area',
				// locked   : true,
				// width	: 95,
				// cls   : 'header-cell',
				// dataIndex	: 'area'
			// },	
			{
				text : 'Category',
				width	: 250,
				dataIndex : 'kategori',
				editor		: {
					xtype	: 'combobox',
					name	: 'kategori',
					store	: ComboRejectCategory,
					queryMode	: 'local',
					displayField	: 'description',
					valueField	: 'description',
					allowBlank: false
				}				
			},
			{
				text : 'Fields',
				width	: 200,
				dataIndex : 'field',
				editor		: {
					xtype	: 'combobox',
					name	: 'field',
					multiSelect : true,
					store	: ComboField,
					queryMode	: 'local',
					displayField	: 'description',
					valueField	: 'description',
					allowBlank: false
				}				
				
			},
			{
				text	: 'Keterangan',
				// locked   : true,
				width	: 300,
				cls   : 'header-cell',
				dataIndex	: 'keterangan',
				editor		: {
					xtype	: 'textfield',
					name	: 'keterangan',
					allowBlank: false
				}
			}
			
		],
		plugins	: editing,
		});
		this.callParent(arguments);
	}
});