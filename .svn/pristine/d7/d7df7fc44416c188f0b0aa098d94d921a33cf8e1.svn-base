Ext.define('analisa.view.gridkoreksiamr' ,{
	extend: 'Ext.panel.Panel',    
	initComponent	: function()
	{
		var gridrejectoss = Ext.create('analisa.view.rejectoss'),win;
		var msclass = Ext.create('master.global.geteventmenu'); 
		var event = Ext.decode(msclass.getevent(Init.idmenu));
		
		function showWindowForm() {
        if (!win) {
            var form = Ext.widget('form', {
                layout: {
                    type: 'vbox',
                    align: 'stretch'
                },
                border: false,
                bodyPadding: 10,

                fieldDefaults: {
                    // labelAlign: 'top',
                    labelWidth: 90,
                    labelStyle: 'font-weight:bold'
                },
                items: [{
                    xtype: 'datefield',
                    fieldLabel: 'Start Date',
                    afterLabelTextTpl: required,
                    format	: 'Y-m-d',
					name : 'startt',
                    allowBlank: false
                }, {
                    xtype: 'datefield',
                    fieldLabel: 'End Date',
                    afterLabelTextTpl: required,
                    format	: 'Y-m-d',
					name : 'endd',
                    allowBlank: false
                }, {
					afterLabelTextTpl: required,
					allowBlank: false,
					xtype		: 'combobox',
					fieldLabel	: 'Area',						
					name		: 'area',
					displayField: 'namearea',
					valueField: 'reffcd',
					queryMode: 'local',									
					store: Init.storeArea						
                }],

                buttons: [{
                    text: 'Cancel',
                    handler: function() {
                        this.up('form').getForm().reset();
                        this.up('window').hide();
                    }
                }, {
                    text: 'Submit',
                    handler: function() {                        
						if (this.up('form').getForm().isValid()) {							
							this.up('form').getForm().submit(
							{
								clientValidation	: true,				
								url					: base_url+'analisa/taksasi/rebatchamr'
							});						
							
                        };
						Ext.Msg.alert('Success', 'Rebatch Berjalan pada Background, Proses ETL Rebatch 15 Menit!!');
						win.hide();
                    }
                }]
            });
			win = Ext.widget('window', {
					title: 'Rebatch Data Koreksi AMR',
					closeAction: 'hide',
					width: 330,
					height: 180,
					minWidth: 200,
					minHeight: 100,
					layout: 'fit',
					resizable: true,
					modal: true,
					items: form,
					defaultFocus: 'Startt Date'
				});
			}
			win.show();
		}			
		
		Ext.define('modelGridAmrkoreksi',{
			extend	: 'Ext.data.Model',
			fields	: ['rowid',
						'refftaxation',
						'codetaxation',
						'parentcode',
						'customercode',
						'customername',
						'streamid',
						'sbuid',
						'sbuname',
						'areacd',
						'areaname',
						'banumber',
						'badate',
						'createdate',
						'meterserialno',
						'priodestart',
						'priodestartori',
						'priodeend',
						'priodeendori',
						'pressure',
						'temperature',
						'uncorrectedstart',
						'uncorrectedend',
						'correctedstart',
						'correctedend',
						'co2',
						'n2',
						'sg',
						'volcorrected',
						'conversion_factor',
						'description',
						'typeprocess',
						'jenisba',
						'typetaxation',
						'file_scan',
						'jam',
						'isapproval',
						'delflag',
						'creperson',
						'credate',
						'updperson',
						'upddate',
						'updcnt',
						'kategori',
						'field',
						'keterangan',
						'noref']
		});	
		
		Ext.define('modelDetailKoreksi',{
			extend	: 'Ext.data.Model',
			fields	: ['rowid',
						'refftaxation',
						'codetaxation',
						'parentcode',
						'customercode',
						'customername',
						'streamid',
						'sbuid',
						'sbuname',
						'areacd',
						'areaname',
						'banumber',
						'badate',
						'createdate',
						'meterserialno',
						'priodestart',
						'priodeend',
						'pressure',
						'temperature',
						'uncorrectedstart',
						'uncorrectedend',
						'voluncorrected',
						'correctedstart',
						'correctedend',
						'co2',
						'n2',
						'sg',
						'volcorrected',
						'conversion_factor',
						'description',
						'typeprocess',
						'jenisba',
						'typetaxation',
						'file_scan',
						'jam',
						'isapproval',
						'delflag',
						'stand_awal',
						'stand_akhir',
						'corrected_awal',
						'corrected_akhir',
						'creperson',
						'credate',
						'updperson',
						'upddate',
						'updcnt',
						'remarks'
						]
		});	
		
		Ext.define('modelDetailPengukuran',{
			extend	: 'Ext.data.Model', 
			fields	: ['keyid','penyaluranid',
						'tanggal',
						'fdatetime',
						//'fyear',
						//'fmonth',
						//'fdate',
						'stat',
						'fdvm',
						'fdvc',
						'fvm',
						'fvc',
						'id_pel',
						'namapel',
						'area',
						'sbu',
						'selisih_cm',
						'selisih_un',
						'stream',
						'reffidamrbridgedaily',
						'reffamralertid',
						'approved',
						'fp',
						'ft',
						'fcf',
						'fmc',
						'fmn',
						//'fsg',
						//'pbase',
						//'tbase',
						//'pmax',
						//'pmin',
						//'qmin',
						//'qmax',
						//'tmax',
						//'tmin',
						//'qbase_max',
						//'qbase_min',
						'a_spare_1',
						'rdcode',
						'areacode']
		});		
		
		var StoreGridAmrKoreksi = Ext.create('Ext.data.JsonStore',{
			model	: 'modelGridAmrkoreksi',
			storeId: 'idstoreGridAmrkoreksi',
			proxy: {
				type: 'pgascomProxy',			
				url: base_url+'analisa/koreksi/findamrkoreksi',
				reader: {
					type: 'json',				
					root: 'data'
				}			
			}
		});
		
		StoreGridAmrKoreksi.load();
		
		
		var storeGridDetailKoreksi = Ext.create('Ext.data.JsonStore',{
			model	: 'modelDetailKoreksi',
			storeId: 'storeGridDetailKoreksi',
			proxy: {
				type: 'pgascomProxy',
				url: base_url+'analisa/koreksi/findamrdetailkoreksi',
				reader: {
					type: 'json',				
					root: 'data'
				}			
			}
		});	
		
		//storeGridDetailKoreksi.load();
		
		/* var storeGridAllKoreksi = Ext.create('Ext.data.JsonStore',{
			model	: 'modelGridDetailKoreksi',
			storeId: 'storeGridAllKoreksi',
			proxy: {
				type: 'pgascomProxy',			
				url: base_url+'analisa/koreksi/findamrallkoreksi',
				reader: {
					type: 'json',				
					root: 'data'
				}			
			}
		});	*/
		
		//storeGridDetailTaksasi.load();
		
		var storeGridDetailPengukuran = Ext.create('Ext.data.JsonStore',{
			model	: 'modelDetailPengukuran',
			storeId: 'storeGridDetailPengukuran',
			proxy: {
				type: 'pgascomProxy',
				url: base_url+'analisa/koreksi/detailpengukuran',
				reader: {
					type: 'json',				
					root: 'data'
				}			
			}
		});
		
		//storeGridDetailPengukuran.load();
		
		var GridAmrKoreksi = Ext.create('Ext.grid.Panel',{
		multiSelect	: true,
		border:false,
		layout:'fit',
		selModel: {
				injectCheckbox: 0,
				pruneRemoved: false
		},	
		store	: StoreGridAmrKoreksi,
		id		: 'idgridamrkoreksi',
		dockedItems: [
		{
			xtype: 'toolbar',
			items: [
				{
					text		: 'Approved',
					id		  	: 'approved_koreksi',
					iconCls	: 'accept',
					hidden	: event.p_approve,
					// disabled: true,
					handler	: function()
					{
						var items = [];
						
						storeGridDetailPengukuran.each(function(record){
							
							if (record.data.selectopts == true)
							{
								items.push(record.data);
								//console.log(record.data);
							}
							
						});
						
						//console.log(items.length);
						if(items.length != 0){
							
							var record 				= GridAmrKoreksi.getView().getSelectionModel().getSelection()[0];
							var gridrecord = GridDetailKoreksi.getView().getSelectionModel().getSelection()[2];
							//var detailtax	= GridDetailKoreksi.getStore().data.items[2];

							var rowid 				= record.data.rowid;
							var fp = 0;
							var ft = 0;
							var refftaxation 		= record.data.refftaxation ;
							var priodeend 			= record.data.priodeendori ;
							var volcorrected 		= record.data.volcorrected ;
							// console.log(fp);
							// console.log(ft);
							record.data.isapproval = 0;
							if (record.data.isapproval == 1 )
							
							{
								Ext.Msg.show({
									title	: 'Error',
									msg		: "Data sudah di approved!!!",
									buttons	: Ext.Msg.OK,
									icon	: Ext.Msg.ERROR,
								});
								
							} else if (record.data.isapproval == 4)
							{
								Ext.Msg.show({
									title	: 'Error',
									msg		: "Data sudah di Reject!!!",
									buttons	: Ext.Msg.OK,
									icon	: Ext.Msg.ERROR,
								});
								
							} else
						
							{
								
								Ext.Ajax.request({ 
								url			: base_url+'analisa/koreksi/updatekoreksi',
								method: 'POST',
params:{'rowid' : rowid, 'refftaxation':refftaxation, 'priodeend' : priodeend, 'volcorrected' : volcorrected, 'ft' : ft, 'fp' : fp , data : Ext.encode(items)
								},
								
								success: function(response,requst){
									Ext.Msg.alert('Sukses','Data Telah di Approve');
									StoreGridAmrKoreksi.reload();
									//storeGridDetailTaksasi.reload();
									//storeGridDetailPengukuran.reload();
									storeGridDetailKoreksi.removeAll();
									storeGridDetailPengukuran.removeAll();
								},
								failure:function(response,requst)
								{
									Ext.Msg.alert('Fail !','Input Data Gagal');
									Ext.Msg.alert('Warning!', 'Authentication server is unreachable : ' + action.response.responseText + "");
								}
							
								});
								 
							}
						}
						else{
							alert('Data pengukuran belum di pilih');
						}						
					}	
	
				},{
					text: 'Reject',
					id:'reject_koreksi',
					hidden	: event.p_reject,
					iconCls : 'cancel',
					// disabled: true,
					handler	: function()
					{
						Ext.Msg.confirm('Warning!', 'Anda Yakin..?', function(btn, text){
						//console.log(btn);
						if (btn == 'yes'){							
										Init.storeGridCopy = Ext.getCmp('gridrejectoss').getStore();
										var tabbbPanel = Ext.getCmp('tabkoreksiamr');
										var items = [];
										var exist = false;
										Init.storeGridCopy.removeAll();							
									
										/* StoreGridAmrTaksasi.each(function(record){
											Init.storeGridCopy.add(record.copy());
											//console.log(record.data);								
										}); */
										
										var record = GridAmrKoreksi.getView().getSelectionModel().getSelection()[0];
										//console.log(record.data.isapproval);
										Init.storeGridCopy.add(record.copy());
										if (record.data.isapproval == 4 )
										{
											Ext.Msg.show({
												title	: 'Error',
												msg		: "Data sudah di reject!!!",
												buttons	: Ext.Msg.OK,
												icon	: Ext.Msg.ERROR,
											});
										} else if (record.data.isapproval == 1)
										{
											Ext.Msg.show({
												title	: 'Error',
												msg		: "Data sudah di approved!!!",
												buttons	: Ext.Msg.OK,
												icon	: Ext.Msg.ERROR,
											});
											
										} else {
										
										/*tabbbPanel.items.each(function(c){							
											if (c.title == 'AMR Koreksi Reject') {
												tabbbPanel.setActiveTab('gridrejectoss');
												exist = true;
											}
										});*/
									
											if (!Init.existtabreject) {							
												tabbbPanel.add(gridrejectoss);
												tabbbPanel.child('#gridrejectoss').tab.show();							
												tabbbPanel.setActiveTab('gridrejectoss');
												Init.existtabreject = true;
											} else {
												tabbbPanel.child('#gridrejectoss').tab.show();							
												tabbbPanel.setActiveTab('gridrejectoss');
												
											}	
										}
						}
		});				
					}
				},{
					text: 'Download',
					id:'download_koreksi',
					disabled: true,
					hidden	: event.p_download,
					iconCls : 'folder_page',
					handler	: function()
					{
						var record 	= GridAmrKoreksi.getView().getSelectionModel().getSelection()[0]; 
						var file_scan = record.data.file_scan;
						//var file_name 		 = record.get('file_name_ori');
						//console.log(id);
						var url = "https://amr.pgn-solution.co.id" +"/"+ "uploads/" + file_scan + "";
						//console.log(url);
						if(file_scan != null){
							window.open(url);
						}
					}
				}
				,
				{
					text: 'Rebatch',
					id:'rebatch_tax',
					hidden	: event.p_rebatch,
					// disabled: true,
					iconCls : 'arrow_refresh',
					handler	: showWindowForm
				}				
			]
		},
		{
			xtype: 'pagingtoolbar',
			dock: 'bottom',
			store: StoreGridAmrKoreksi,
			displayInfo: true,
			plugins : [Ext.create('Ext.ux.PagingToolbarResizer')]
		}],		
		columns	: 
			[
			Ext.create('Ext.grid.RowNumberer',
				{
					header: 'No', 
					width: 40
				}
			),
			{
				text	: 'Status',
				width	: 100,
				align	: 'center',
				dataIndex	: 'isapproval',
				renderer: function(val, meta, record, rowIndex){
				
				var isapproval = record.data.isapproval;
					switch(isapproval){
						default:
							return 'Not-approve';
						break;
						case '1':
							return 'Approve';
						break;
						case '4':
							return 'Reject';
						break;
					}
				}
			},
			{
				text	: 'Tanggal',
				width		: 100,
				autoSizeColumn : true,
				cls   	: 'header-cell',
				align	: 'left',
				dataIndex	: 'createdate'
			},
			{
				text	: 'RD',
				width	: 100,
				autoSizeColumn : true,
				cls   	: 'header-cell',
				align	: 'left',
				dataIndex	: 'sbuname'
			},
			{
				text	: 'Area',
				width	: 100,
				autoSizeColumn : true,
				cls   	: 'header-cell',
				align	: 'left',
				dataIndex	: 'areaname'
			},					
			{
				text	: 'ID Reff',
				width	: 100,
				autoSizeColumn : true,
				cls   	: 'header-cell',
				align	: 'left',
				dataIndex	: 'customercode'
			},
			{
				text	: 'Nama Pelanggan',
				width	: 100,
				autoSizeColumn : true,
				cls   	: 'header-cell',
				align	: 'left',
				dataIndex	: 'customername'
			},	
			{
				text	: 'Stream',
				width	: 100,
				autoSizeColumn : true,
				cls   	: 'header-cell',
				align	: 'right',
				dataIndex	: 'streamid'
			},			
			{
				text	: 'Pukul',
				width		: 100,
				autoSizeColumn : true,
				cls   	: 'header-cell',
				align	: 'right',
				dataIndex	: 'jam'
			},
			{
				text	: 'Periode',
				align	: 'center',
				columns  : [{
					text : 'Awal',
					autoSizeColumn : true,
					cls   	: 'header-cell',
					align	: 'right',
					dataIndex	: 'priodestart'
				},
				{
					text : 'Akhir',
					autoSizeColumn : true,
					cls   	: 'header-cell',
					align	: 'right',
					dataIndex	: 'priodeend'
				}
				]				
			},
			{
				text	: 'Volume Corrected Total',
				autoSizeColumn : true,
				cls   	: 'header-cell',
				align	: 'right',
				dataIndex	: 'volcorrected'
			},
			{
				text	: 'Keterangan',
				autoSizeColumn : true,
				cls   	: 'header-cell',
				align	: 'left',
				dataIndex	: 'description'				
			}],
			listeners: {
				itemclick:function(view, record, item, index, e ) {
									
						var codetax 	= record.get('codetaxation');
						var idrefpelanggan 	= record.get('noref');
						var pstart 				= record.get('priodestartori');
						var pend 					= record.get('priodeendori');
						var area 					= record.get('areaname');
						var stream 					= record.get('streamid');
						//console.log(id);
										
						Ext.getCmp('approved_koreksi').setDisabled(false);
						Ext.getCmp('reject_koreksi').setDisabled(false);
						Ext.getCmp('download_koreksi').setDisabled(false);
										
						storeGridDetailKoreksi.load({method: 'POST',params : {'codetax':codetax}});
						// storeGridAllKoreksi.load({method: 'POST',params : {'codetax':codetax}});
						storeGridDetailPengukuran.load({method: 'POST',params : {'idrefpelanggan':idrefpelanggan,'pstart':pstart,'pend':pend,'area':area, 'stream':stream }});
										
				}
			},
			viewConfig: {
				listeners: {
					refresh: function(dataview) {
						Ext.each(dataview.panel.columns, function(column) {
							if (column.autoSizeColumn === true)
								column.autoSize();
							})
						}
					}	
			}
			
		});
		
			
		var GridDetailKoreksi = Ext.create('Ext.grid.Panel',{
		store	: storeGridDetailKoreksi,
		border	:false,
		layout	:'fit',
		id		: 'idgriddetailKoreksi',
		columns		: 
			[
			Ext.create('Ext.grid.RowNumberer',
				{
					header: 'No', 
					width: 40
				}
			),
			{
				text	: 'Activities',
				width	: 100,
				autoSizeColumn : true,
				cls   	: 'header-cell',
				align	: 'left',
				dataIndex	: 'description'
			},
			{
				text	: 'Serial Number',
				width	: 100,
				autoSizeColumn : true,
				cls   	: 'header-cell',
				align	: 'left',
				dataIndex	: 'meterserialno'
			},
			{
				text	: 'BA Date',
				width	: 100,
				autoSizeColumn : true,
				cls   	: 'header-cell',
				align	: 'left',
				dataIndex	: 'badate'
			},
			{
				text	: 'Created Date',
				width	: 100,
				autoSizeColumn : true,
				cls   	: 'header-cell',
				align	: 'left',
				dataIndex	: 'createdate'
			},
			{
				
				text	: 'BA Number',
				width	: 100,
				autoSizeColumn : true,
				cls   	: 'header-cell',
				align	: 'left',
				dataIndex	: 'banumber'
			},
			{
				text	: 'Uncorrected',
				align	: 'center',
				columns  : [{
					text : 'Awal',
					autoSizeColumn : true,
					cls   	: 'header-cell',
					align	: 'right',
					dataIndex	: 'uncorrectedstart'
				},
				{
					text : 'Akhir',
					autoSizeColumn : true,
					cls   	: 'header-cell',
					align	: 'right',
					dataIndex	: 'uncorrectedend'
				},
				{
					text : 'Selisih',
					autoSizeColumn : true,
					cls   	: 'header-cell',
					align	: 'right',
					dataIndex	: 'voluncorrected'					
				}
				
				]
			},
			{
				text	: 'Corrected',
				align	: 'center',
				columns  : [{
					text : 'Awal',
				autoSizeColumn : true,
				cls   	: 'header-cell',
				align	: 'right',
					dataIndex	: 'correctedstart'
				},
				{
					text : 'Akhir',
				autoSizeColumn : true,
				cls   	: 'header-cell',
				align	: 'right',
					dataIndex	: 'correctedend'
				}]
			},			
			{
				text	 	: 'Volume',
				width 		: 150,
				autoSizeColumn : true,
				cls   	: 'header-cell',
				align	: 'right',
				dataIndex	: 'volcorrected'
			},
			{
				text	 	: 'FCF',
				width 		: 150,
				autoSizeColumn : true,
				cls   	: 'header-cell',
				align	: 'right',
				dataIndex	: 'conversion_factor'
			},			
			{
				text	 		: 'Tekanan',
				width 		: 150,
				autoSizeColumn : true,
				cls   	: 'header-cell',
				align	: 'right',
				dataIndex	: 'pressure'
			},
			{
				text	: 'Temprature',
				autoSizeColumn : true,
				cls   	: 'header-cell',
				align	: 'right',
				dataIndex	: 'temperature'
			},
			{
				text	: 'CO2',
				autoSizeColumn : true,
				cls   	: 'header-cell',
				align	: 'right',
				dataIndex	: 'co2'
			},
			{
				autoSizeColumn : true,
				cls   	: 'header-cell',
				align	: 'right',
				
				text	: 'N2',
				dataIndex	: 'n2'				
			},
			{
				autoSizeColumn : true,
				cls   	: 'header-cell',
				align	: 'right',				
				text	: 'Sg',
				dataIndex	: 'sg'				
			},
			{
				autoSizeColumn : true,
				cls   	: 'header-cell',
				align	: 'left',				
				text	: 'Remarks',
				dataIndex	: 'remarks'				
			}],
			viewConfig: {
				listeners: {
					refresh: function(dataview) {
						Ext.each(dataview.panel.columns, function(column) {
							if (column.autoSizeColumn === true)
								column.autoSize();
							})
						}
					}	
			}

			
		});
		
		var GridDetailPengukuran = Ext.create('Ext.grid.Panel',{
		store		: storeGridDetailPengukuran,
		border		:false,
		selType		: 'checkboxmodel',
		layout		:'fit',
		id				: 'idgridDetailPengukuran',		
		columns	: 
		[
			{
				text	: 'Status',
				align	: 'center',
				width		: 60,				
				renderer : function(value, metaData, record, rowIdx, colIdx, store, view){	
						var color = '';
					if(record.get('approved') == "1")
					{
						if(record.get('stat') == "2") 
						{
							color = base_url+'asset/ico/green_indicator.ico';
						} else if (record.get('stat') == "1")
						{
							color = base_url+'asset/ico/yellow_green_indicator.ico';
						} else {
							color = base_url+'asset/ico/red_green_indicator.ico';
						}
						
					}else {
						if(record.get('stat') == "2") 
							{
								color = base_url+'asset/ico/green_indicator.ico';
							} else if (record.get('stat') == "1")
							{
								color = base_url+'asset/ico/yellow_indicator.ico';
							} else {
								if (record.get('a_spare_1') == "0")
								{
									color = base_url+'asset/ico/black_indicator.ico';
								} else {
									color = base_url+'asset/ico/red_indicator.ico';
								}
							}						
					} 
					return '<div><img src='+color+' width="16px" height="16px"></div>';

				}
					/* 	var color = '';
						if(record.get('stat') == "0")
						{
							color = base_url+'asset/ico/red_indicator.ico';
						}
						else if (record.get('stat') == "0")
						{
							color = base_url+'asset/ico/red_indicator.ico';
						}
						return '<div><img src='+color+' width="15px" height="15px"></div>';					
					} */
			},
			{
				autoSizeColumn : true,
				cls   	: 'header-cell',
				align	: 'left',				
				text	: 'ID Rev Pelanggan',
				width		: 100,				
				dataIndex	: 'id_pel'
			},			
			{
				autoSizeColumn : true,
				cls   	: 'header-cell',
				align	: 'right',				
				text	: 'Tanggal',
				width		: 100,		
				dataIndex	: 'tanggal'
			},			
			{
				autoSizeColumn : true,
				cls   	: 'header-cell',
				align	: 'right',				
				text	: 'Volume',
				flex		: 1,		
				dataIndex	: 'fdvc'
			},
			{
				autoSizeColumn : true,
				cls   	: 'header-cell',
				align	: 'left',				
				text	: 'Nama Pelanggan',
				width		: 100,				
				dataIndex	: 'namapel'
			}			
		],
		listeners	: 
			{
				beforeitemcontextmenu: function(view, record, item, index, e)
				{
					e.stopEvent();
					data = record.data;
					medugridkelengkapan.showAt(e.getXY());
				},
				itemclick	: function(view, record, item, index, e, eOpts)
				{
					data = record.data;
					
				},
				select: function (model, record, index, eOpts) {
					//console.log(record.data);
					//record.data.selectopts = true;
					record.set('selectopts',true);
				},
				deselect: function (view, record, item, index, e, eOpts) {
					//console.log('deselect fired'+index);
					//record.data.selectopts = false;
					record.set('selectopts',false);
				}
			},
			viewConfig: {
				listeners: {
					refresh: function(dataview) {
						Ext.each(dataview.panel.columns, function(column) {
							if (column.autoSizeColumn === true)
								column.autoSize();
							})
						}
					}	
			}

		});	
		
		Ext.apply(this,{
			title  : 'AMR Koreksi',
			frame: true,	
			iconCls 	: 'date',
			layout: 'border',
			defaults: {
                collapsible: true,
                split: true,
                //bodyStyle: 'padding:5px'
            },

			items: [
				{
					xtype : 'panel',
					title : 'Data Koreksi',
					//autoScroll : true,
					frame	: false,
					region : 'center',
					layout: 'fit',
					//collapsible: false,
					flex: 1,					
					//autoScroll : true,
					border: true,
					items: GridAmrKoreksi
					
				},
				{
					xtype : 'panel',					
					autoScroll : true,
					region : 'east',
					frame	: true,
					border	: true,					
					title : 'Data Pengukuran',					
					layout: 'fit',					
					flex: 1,
					items : GridDetailPengukuran
				},
				{
					xtype : 'panel',					
					autoScroll : true,
					region : 'south',
					frame	: true,
					border	: true,					
					title : 'Detail Koreksi',					
					layout: 'fit',					
					flex: 1,
					items : GridDetailKoreksi
				}
			]	
			
		});
		this.callParent(arguments);
	}
	
});