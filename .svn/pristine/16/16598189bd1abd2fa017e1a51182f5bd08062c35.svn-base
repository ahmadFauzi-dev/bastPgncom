Ext.define('analisa.view.gridkelamr' ,{
	extend: 'Ext.grid.Panel',
	initComponent	: function()
	{
		var required = '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>',
		win;
		
		function showWindowForm() {
        if (!win) {
            var form = Ext.widget('form', {
                layout: {
                    type: 'vbox',
                    align: 'stretch'
                },
                border: false,
                bodyPadding: 10,

                fieldDefaults: {
                    // labelAlign: 'top',
                    labelWidth: 90,
                    labelStyle: 'font-weight:bold'
                },
                items: [{
                    xtype: 'datefield',
                    fieldLabel: 'Start Date',
                    afterLabelTextTpl: required,
                    format	: 'Y-m-d',
					name : 'startt',
                    allowBlank: false
                }, {
                    xtype: 'datefield',
                    fieldLabel: 'End Date',
                    afterLabelTextTpl: required,
                    format	: 'Y-m-d',
					name : 'endd',
                    allowBlank: false
                }, {
					afterLabelTextTpl: required,
					allowBlank: false,
					xtype		: 'combobox',
					fieldLabel	: 'Area',						
					name		: 'area',
					displayField: 'namearea',
					valueField: 'reffcd',
					queryMode: 'local',									
					store: Init.storeArea						
                }],

                buttons: [{
                    text: 'Cancel',
                    handler: function() {
                        this.up('form').getForm().reset();
                        this.up('window').hide();
                    }
                }, {
                    text: 'Submit',
                    handler: function() {                        
						if (this.up('form').getForm().isValid()) {							
							this.up('form').getForm().submit(
							{
								clientValidation	: true,				
								url					: base_url+'analisa/rebatchamr'
								
								// success: function(form, action) {
									// var result = action.result;
									// win.hide();
									// console.log(result);
								// },
								// failure: function(form, action) {
									// switch (action.failureType) {
										// case Ext.form.action.Action.CLIENT_INVALID:
										// Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
										// break;
										// case Ext.form.action.Action.CONNECT_FAILURE:
										// Ext.Msg.alert('Failure', 'Ajax communication failed');
										// break;
										// case Ext.form.action.Action.SERVER_INVALID:
										// Ext.Msg.alert('Failure', action.result.msg);
									// }
								// }
							});						
							
                        };
						Ext.Msg.alert('Success', 'Rebatch Berjalan pada Background, Proses ETL Rebatch 30 Menit!!');
						win.hide();
                    }
                }]
            });
					win = Ext.widget('window', {
					title: 'Rebatch Data AMR',
					closeAction: 'hide',
					width: 330,
					height: 180,
					minWidth: 200,
					minHeight: 100,
					layout: 'fit',
					resizable: true,
					modal: true,
					items: form,
					defaultFocus: 'Startt Date'
				});
			}
			win.show();
		}

		var msclass 	= Ext.create('master.global.geteventmenu');
		var event 	= 	Ext.decode(msclass.getevent(Init.idmenu));
		Ext.define('modelGridvkel',{
			extend	: 'Ext.data.Model',
			fields	: ['key_data','tanggal','sbu','rdcode','area','areacode', 
			
			{name: 'total_crm', type : 'int'},
			{name: 'missing_crm', type : 'int'},
			{name: 'missing_amrboard', type : 'int'},
			{name: 'incompleted', type : 'int'},
			{name: 'jmlh_data_daily', type : 'int' },
			{name: 'jmlh_data_alert', type : 'int' },
			{name: 'completed', type : 'int' },
			{name: 'empty_hourly', type : 'int' },
			{name: 'warning', type : 'int' },
			{name: 'alert', type : 'int' },
			{name: 'good', type : 'int' },
			{name: 'anomali', type : 'int' },
			{name: 'validate', type : 'int' }]
		});	

		var storeGridkel = Ext.create('Ext.data.JsonStore',{
			model	: 'modelGridvkel',
			storeId: 'kelStore',
			proxy: {
				type: 'pgascomProxy',
				// pageParam: false, 
				// startParam: false, 
				// limitParam: false,
				url: base_url+'analisa/findkelengkapandataamr',
				reader: {
					type: 'json',				
					root: 'data'
				}			
			}
		});		
		
		storeGridkel.load();
		
		Ext.apply(this, {
			store	: storeGridkel,
			columnLines: true, 
			id		: 'gridKelamr',	
			features: [{								
				ftype: 'summary'
			}],
			dockedItems: [					
				{
					xtype: 'pagingtoolbar',
					dock: 'bottom',
					store: storeGridkel,
					displayInfo: true,
					plugins : [Ext.create('Ext.ux.PagingToolbarResizer')]
				},
				{
					xtype: 'toolbar',
					items: [{
						iconCls	: 'arrow_refresh',
						hidden	: event.p_rebatch,						
						text	: 'Rebatch',
						handler	: showWindowForm						
					}]
				}],			
			columns		: [
				Ext.create('Ext.grid.RowNumberer',
					{
						header: 'No', 
						width: 40
					}
					),
				{	
					dataIndex : 'tanggal',
					align	: 'center',
					width: 70,
					flex : 3,
					autoSizeColumn : true,
					text : 'Tanggal'					
				},
				{	
					dataIndex : 'sbu',
					align	: 'center',
					width: 60,
					autoSizeColumn : true,
					text : 'RD'					
				},	
				{	
					dataIndex : 'area',
					align	: 'center',
					width: 90,
					autoSizeColumn : true,
					text : 'Area',					
					summaryType: 'count',
					summaryRenderer: function(value, meta, rec) {
						meta.style = "font-weight: bold;font-size: 13px;";						
						return 'Total '
					}
				},
 				{	
					dataIndex : 'jmlh_data_alert',
					align	: 'center',
					autoSizeColumn : true,
					text : 'Data AMR Board',
					// flex : 3,
					renderer: function(value, meta, record) {
								return "<a href='#'><span style='color:blue;text-decoration: underline;font-weight:bold' >"+value+"</span></a>";
					},
					summaryType: 'sum',
					summaryRenderer: function(value, meta, rec) {
						meta.style = "font-weight: bold;font-size: 13px;";						
						return value
					}
				},
				{	
					dataIndex : 'total_crm',
					align	: 'center',
					autoSizeColumn : true,
					text : 'Data CRM',
					// flex : 3,
					renderer: function(value, meta, record) {
								return "<a href='#'><span style='color:blue;text-decoration: underline;font-weight:bold' >"+value+"</span></a>";
					},
					summaryType: 'sum',
					summaryRenderer: function(value, meta, rec) {
						meta.style = "font-weight: bold;font-size: 13px;";						
						return value
					}
				},				
				{	
					align	: 'center',
					text : 'Data Daily',
					columns : [
					{
						dataIndex : 'jmlh_data_daily',
						align	: 'center',
						autoSizeColumn : true,
						text : 'Available',
						// flex : 3,
						renderer: function(value, meta, record) {
									return "<a href='#'><span style='color:blue;text-decoration: underline;font-weight:bold' >"+value+"</span></a>";
						},
						summaryType: 'sum',
						summaryRenderer: function(value, meta, rec) {
							meta.style = "font-weight: bold;font-size: 13px;";						
							return value
						}
					},
					{
						dataIndex : 'missing_crm',
						align	: 'center',
						autoSizeColumn : true,
						text : 'N/A CRM',
						renderer: function(value, meta, record) {
								return "<a href='#'><span style='color:blue;text-decoration: underline;font-weight:bold' >"+value+"</span></a>";
						},

						summaryType: 'sum',
						summaryRenderer: function(value, meta, rec) {
							meta.style = "font-weight: bold;font-size: 13px;";						
							return value
						}

					},
					{
						dataIndex : 'missing_amrboard',
						align	: 'center',
						autoSizeColumn : true,
						text : 'N/A Non CRM',
						renderer: function(value, meta, record) {
								return "<a href='#'><span style='color:blue;text-decoration: underline;font-weight:bold' >"+value+"</span></a>";
						},
						summaryType: 'sum',
						summaryRenderer: function(value, meta, rec) {
							meta.style = "font-weight: bold;font-size: 13px;";						
							return value
						}

					}
					
					]
				},
				{
					align	: 'center',
					text : 'Data Hourly',
					columns : [
						{
							dataIndex : 'completed',
							align	: 'center',
							autoSizeColumn : true,
							text : 'Complete',
							renderer: function(value, meta, record) {
								return "<a href='#'><span style='color:blue;text-decoration: underline;font-weight:bold' >"+value+"</span></a>";
							},
							summaryType: 'sum',
							summaryRenderer: function(value, meta, rec) {
								meta.style = "font-weight: bold;font-size: 13px;";
								return value
							}

						},
						{
							dataIndex : 'incompleted',
							align	: 'center',
							text : 'Incomplete < 24',
							autoSizeColumn : true,
							renderer: function(value, meta, record) {
								return "<a href='#'><span style='color:blue;text-decoration: underline;font-weight:bold' >"+value+"</span></a>";
							},
							summaryType: 'sum',
							summaryRenderer: function(value, meta, rec) {
								meta.style = "font-weight: bold;font-size: 13px;";
								return value
							}

						},
						{
							dataIndex : 'empty_hourly',
							align	: 'center',
							text : 'Data Kosong',
							autoSizeColumn : true,
							renderer: function(value, meta, record) {
								return "<a href='#'><span style='color:blue;text-decoration: underline;font-weight:bold' >"+value+"</span></a>";
							},
							summaryType: 'sum',
							summaryRenderer: function(value, meta, rec) {
								meta.style = "font-weight: bold;font-size: 13px;";
								return value
							}

						}
					]
					
				},
				
				{
					align	: 'center',
					text : 'Status AMR',
					columns : [
						{
							dataIndex : 'good',
							align	: 'center',
							autoSizeColumn : true,
							text : 'Good',
							renderer: function(value, meta, record) {
								return "<a href='#'><span style='color:blue;text-decoration: underline;font-weight:bold' >"+value+"</span></a>";
							},
							summaryType: 'sum',
							summaryRenderer: function(value, meta, rec) {
								meta.style = "font-weight: bold;font-size: 13px;";
								return value
							}

						},
						{
							dataIndex : 'warning',
							align	: 'center',
							text : 'Warning',
							autoSizeColumn : true,
							renderer: function(value, meta, record) {
								return "<a href='#'><span style='color:blue;text-decoration: underline;font-weight:bold' >"+value+"</span></a>";
							},
							summaryType: 'sum',
							summaryRenderer: function(value, meta, rec) {
								meta.style = "font-weight: bold;font-size: 13px;";
								return value
							}

						},
						{
							dataIndex : 'alert',
							align	: 'center',
							text : 'Alert',
							autoSizeColumn : true,
							renderer: function(value, meta, record) {
								return "<a href='#'><span style='color:blue;text-decoration: underline;font-weight:bold' >"+value+"</span></a>";
							},
							summaryType: 'sum',
							summaryRenderer: function(value, meta, rec) {
								meta.style = "font-weight: bold;font-size: 13px;";
								return value
							}

						}
					]
					
				}
				/*
				,
				{
					dataIndex : 'validate',
					align	: 'center',
					autoSizeColumn : true,
					text : 'Validate',
					renderer: function(value, meta, record) {
						return "<a href='#'><span style='color:blue;text-decoration: underline;font-weight:bold' >"+value+"</span></a>";
					},
					summaryType: 'sum',
					summaryRenderer: function(value, meta, rec) {
						meta.style = "font-weight: bold;font-size: 13px;";
						return value
					}

				} */				
		],
		viewConfig : {
			listeners : {
				
				refresh: function(dataview) {
					Ext.each(dataview.panel.columns, function(column) {
						if (column.autoSizeColumn === true)
							column.autoSize();
						})
					},
					
				cellclick : function(view, cell, cellIndex, record, row, rowIndex, e){
					//console.log("OKOK");
					var recom = record.data;
					var ftanggal;
					var selectop;
					var dataexport,dataexport1,dataexport2,dataexport3;
					var clickedDataIndex = view.panel.headerCt.getHeaderAtIndex(cellIndex).dataIndex;
					var clickedColumnName = view.panel.headerCt.getHeaderAtIndex(cellIndex).text;					
					console.log(clickedColumnName);
					// console.log(clickedDataIndex);
					switch(clickedColumnName){
						case 'Complete' : 
							selectop = 'complete';
							ftanggal = {
								field :"tanggal",
								data  : {
									type : "date",
									comparison : "eq",
									value	   : recom.tanggal
								} 
							};							
							dataexport = {
								field : "total",
								data : {
								type : "numeric",
									comparison : "eq",
									value	   : 24										
								}
							};
						break;
						case 'Incomplete < 24' : 
							selectop = 'incomplete';
							dataexport = {
								field : "total",
								data : {
								type : "numeric",
									comparison : "lt",
									value	   : 24										
								}
							};
							ftanggal = {
								field :"tanggal",
								data  : {
									type : "date",
									comparison : "eq",
									value	   : recom.tanggal
								} 
							};							
						break;
						case 'Data Kosong' : 
							selectop = 'emptyy';
							dataexport = 
							{
								field : "tanggal",
								data : {
								type : "boolean",
									comparison : "null",
									value	   : "null"										
								}
							};
							dataexport1 = 
							{
								field : "total",
								data : {
								type : "numeric",
									comparison : "lt",
									value	   : 24									
								}
								
							};
							dataexport2 =
							{
								field : "tanggal_daily",
								data : {
								type : "boolean",
									comparison : "not null",
									value	   : "not null"										
								}
								
							};
							ftanggal = {
								field :"tanggal_alert",
								data  : {
									type : "date",
									comparison : "eq",
									value	   : recom.tanggal
								} 
							};
						break;
						case 'Good' : 
							selectop = 'good';
							dataexport = {
								field : "stat",
								data : {
								type : "numeric",
									comparison : "eq",
									value	   : "2"										
								}
							};
							ftanggal = {
								field :"tanggal_daily",
								data  : {
									type : "date",
									comparison : "eq",
									value	   : recom.tanggal
								} 
							};							
							
						break;
						case 'Warning' : 
							selectop = 'warning';
							dataexport = {
								field : "stat",
								data : {
								type : "numeric",
									comparison : "eq",
									value	   : "1"										
								}
							};	
							ftanggal = {
								field :"tanggal_daily",
								data  : {
									type : "date",
									comparison : "eq",
									value	   : recom.tanggal
								} 
							};							
							
						break;	
						case 'Alert' : 
							selectop = 'alert';
							dataexport = {
								field : "stat",
								data : {
								type : "numeric",
									comparison : "eq",
									value	   : "0"										
								}
							};	
							ftanggal = {
								field :"tanggal_daily",
								data  : {
									type : "date",
									comparison : "eq",
									value	   : recom.tanggal
								} 
							};							
						break;
						case 'Available' : 
							selectop = 'daily';
							dataexport = {
								field : "tanggal_daily",
								data : {
								type : "boolean",
									comparison : "not null",
									value	   : "not null"									
								}
							};	
							ftanggal = {
								field :"tanggal_alert",
								data  : {
									type : "date",
									comparison : "eq",
									value	   : recom.tanggal
								} 
							};								
						break;
						case 'Data AMR Board' : 
							selectop = 'amr';
							dataexport = {
							};
							ftanggal = {
								field :"tanggal_alert",
								data  : {
									type : "date",
									comparison : "eq",
									value	   : recom.tanggal
								} 
							};							
						break;
						case 'Data CRM' : 
							selectop = 'crm';
							dataexport = {
								field :"namapel",
								data  : {
									type : "boolean",
									comparison : "not null",
									value	   : "not null"
								}								
							};
							ftanggal = {
								field :"tanggal_alert",
								data  : {
									type : "date",
									comparison : "eq",
									value	   : recom.tanggal
								} 
							};
						break;						
						case 'N/A CRM' :
							selectop = 'na_crm';							
							dataexport = {
								field : "tanggal_daily",
								data : {
								type : "boolean",
									comparison : "null",
									value	   : "null"									
								}
							};
							dataexport1 = {
								field : "tanggal",
								data : {
								type : "boolean",
									comparison : "null",
									value	   : "null"									
								}
							};
							
							dataexport2 = {
								field : "namapel",
								data : {
								type : "boolean",
									comparison : "not null",
									value	   : "not null"									
								}
							};						
							
							ftanggal = {
								field :"tanggal_alert",
								data  : {
									type : "date",
									comparison : "eq",
									value	   : recom.tanggal
								} 
							};						
						break;
						case 'N/A Non CRM' :
							selectop = 'non_crm';							
							dataexport = {
								field : "tanggal_daily",
								data : {
								type : "boolean",
									comparison : "null",
									value	   : "null"									
								}
							};
							dataexport1 = {
								field : "tanggal",
								data : {
								type : "boolean",
									comparison : "null",
									value	   : "null"									
								}
							};
							
							dataexport2 = {
								field : "namapel",
								data : {
								type : "boolean",
									comparison : "null",
									value	   : "null"									
								}
							};						
							
							ftanggal = {
								field :"tanggal_alert",
								data  : {
									type : "date",
									comparison : "eq",
									value	   : recom.tanggal
								} 
							};						
						break;					
						

					}
					
					var storeGridkelDetail = Ext.getCmp('gridkeldetail').getStore();
					storeGridkelDetail.removeAll();
					storeGridkelDetail.getProxy().extraParams = {
						tanggal : recom.tanggal,
						sbu	: recom.sbu,
						area : recom.area,
						select : selectop									
					};		
					
					Init.specialparams = null;
					var items = [];
					items.push(
					ftanggal,
					{
						field :"sbu",
						data  : {
							type : "string",
							comparison : "eq",
							value	   : recom.sbu
						}						
					},
					{
						field :"area",
						data  : {
							type : "string",
							comparison : "eq",
							value	   : recom.area
						}						
					},
					dataexport,
					dataexport1,
					dataexport2						
					);
					Init.specialparams = items;					
					
					storeGridkelDetail.reload();
				}	
								
				}
			}
			
		});
		this.callParent(arguments);
	}
})