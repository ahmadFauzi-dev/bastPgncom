Ext.define('analisa.bulk.view.gridrejectanomali' ,{
    extend: 'Ext.grid.Panel',
	id    : Init.idmenu+'gridrejectanomali',
    initComponent: function() {
	var msclass 	= Ext.create('master.global.geteventmenu');
	
	Ext.define('modelComboRejectCategory',{
		extend	: 'Ext.data.Model',
		fields	: ['rowid','description']
	});	
	var ComboRejectCategory = Ext.create('Ext.data.JsonStore',{
		model	: 'modelComboRejectCategory',
		storeId: 'idComboRejectCategory',
		proxy: {
			type: 'pgascomProxy',			
			url: base_url+'analisa/loadrejectcategorybulk',
			reader: {
				type: 'json',				
				root: 'data'
			}			
		}
	});	
	
	
	var ComboField = Ext.create('Ext.data.Store',{
			fields : ['name'],
			data   : [
				{name : 'volume', usefield:'Y'},
				{name : 'energy', usefield:'Y'},
				{name : 'ghv', usefield:'Y'},
				{name : 'pressureinlet', usefield:'Y'},
				{name : 'pressureoutlet', usefield:'Y'},
				{name : 'temperature', usefield:'Y'},
				{name : 'counter_volume', usefield:'Y'},
				{name : 'counter_energy', usefield:'Y'}
			]
	});
	
	ComboRejectCategory.load();
	ComboField.load();
	var winuploaddok;
	
	model.push('selectopts');
	//console.log(model);
	
	
	var editing = Ext.create('Ext.grid.plugin.RowEditing', {
		clicksToEdit: 1,
		listeners :
		{					
			'edit' : function (editor,e) {
					 
					var grid 	= e.grid;
					var record = e.record;
					 
					var recordData = record.data; 
				
						
			}
		}
	});
		
		//Init.storeGridCopy.load();
		Ext.apply(this, {
			store		: Init.storeGridCopy,
			title		: 'Reject Penyaluran Station',
			//height		: 200,
			multiSelect	: true,
			//selType		: 'checkboxmodel',
			autoScroll	: true,
			id    		:  ''+Init.idmenu+'gridrejectanomali',
			tbar		: [
			{
				text	: 'Submit',
				iconCls	: 'database_save',
				handler	: function()
				{
					msclass.submitreject(base_url+'analisa/updaterejectbulk');
					//console.log("OK");
					//console.log(Init.storeGridCopy);
				}
			}],
			columns		: [
			Ext.create('Ext.grid.RowNumberer',{header:'No'}),
			{
				"text"	: "Station Name",
				locked   : true,
				//flex	: 1,
				"dataIndex" : "nama_station"
			},
			{
				"text"		: "Tanggal Pengukuran",
				xtype		: 'datecolumn',
				locked   : true,
				//flex	: 1,
				"dataIndex"	: "tanggal_pengukuran",
				format		: 'Y-m-d'
			},
			{
				text : 'Category',
				width	: 250,
				dataIndex : 'kategori',
				editor		: {
					xtype			: 'combobox',
					name			: 'kategori',
					store			: ComboRejectCategory,
					queryMode		: 'local',
					displayField	: 'description',
					valueField		: 'rowid',
					// allowBlank: false
				}				
			},
			{
				text : 'Fields',
				width	: 100,
				dataIndex : 'field',
				editor		: {
					xtype	: 'combobox',
					name	: 'field',
					multiSelect 	: true,
					store			: ComboField,
					queryMode		: 'local',
					displayField	: 'name',
					valueField		: 'name',
					// allowBlank: false
				}				
				
			},
			{
				text	: 'Keterangan',
				// locked   : true,
				width	: 300,
				cls   : 'header-cell',
				dataIndex	: 'keterangan',
				editor		: {
					xtype	: 'textareafield',
					name	: 'keterangan',
					maxLength  : 165,
					height	   : 100,
					width      : 400,	
					grow: true,
				}
			},
			{
				text	: 'Volume',
				align	: 'center',
				//flex	: 1,
				xtype	: 'numbercolumn',
				format	: '0.00000000000000',
				dataIndex	: 'volume',
				renderer	: function(value, metaData, record, rowIdx, colIdx, store, view)
				{
					var volume = record.get('volume');
					//var parameter_periode	 = record.get('parameter_periode');
					//var message = getColorEstimasi(tgl_pengukuran,jam_pengukuran,tbl_station_id,tbl_parameter,parameter_periode);
					if (volume == 0) 
					{
						return '<div style="color:#FF0000">'+value+'</div>';
					}else
					{
						return value;
					}
				}
			},
			{
				text	: 'Energy <br /> BBTUD',
				align	: 'center',
				//flex	: 1,
				dataIndex	: 'energy',
				renderer	: function(value, metaData, record, rowIdx, colIdx, store, view)
				{
					var volume = record.get('energy');
					//var parameter_periode	 = record.get('parameter_periode');
					//var message = getColorEstimasi(tgl_pengukuran,jam_pengukuran,tbl_station_id,tbl_parameter,parameter_periode);
					if (parseInt(volume) == 0) 
					{
						return '<div style="color:#FF0000">'+value+'</div>';
					}else
					{
						return value;
					}
				}
			},
			{
				text	: 'Counter Volume <br /> (MMSCF)',
				align	: 'center',
				//flex	: 1,
				dataIndex	: 'counter_volume',
				renderer	: function(value, metaData, record, rowIdx, colIdx, store, view)
				{
					var volume = record.get('counter_volume');
					//var parameter_periode	 = record.get('parameter_periode');
					//var message = getColorEstimasi(tgl_pengukuran,jam_pengukuran,tbl_station_id,tbl_parameter,parameter_periode);
					if (parseInt(volume) == 0) 
					{
						return '<div style="color:#FF0000">'+value+'</div>';
					}else
					{
						return value;
					}
				}
				
			},
			{
				text	: 'Counter Energy <br /> (BBTU)',
				align	: 'center',
				//flex	: 1,
				dataIndex	: 'counter_energy',
				renderer	: function(value, metaData, record, rowIdx, colIdx, store, view)
				{
					var volume = record.get('counter_energy');
					//var parameter_periode	 = record.get('parameter_periode');
					//var message = getColorEstimasi(tgl_pengukuran,jam_pengukuran,tbl_station_id,tbl_parameter,parameter_periode);
					if (parseInt(volume) == 0) 
					{
						return '<div style="color:#FF0000">'+value+'</div>';
					}else
					{
						return value;
					}
				}
			},
			{
				text	: 'GHV <br /> (BTU/SCF)',
				align	: 'center',
				//flex	: 1,
				dataIndex	: 'ghv',
				renderer	: function(value, metaData, record, rowIdx, colIdx, store, view)
				{
					var volume = record.get('ghv');
					//var parameter_periode	 = record.get('parameter_periode');
					//var message = getColorEstimasi(tgl_pengukuran,jam_pengukuran,tbl_station_id,tbl_parameter,parameter_periode);
					if (parseInt(volume) == 0) 
					{
						return '<div style="color:#FF0000">'+value+'</div>';
					}else
					{
						return value;
					}
				}
			},
			{
				text	: 'Tekanan IN <br /> (PSIG)',
				align	: 'center',
				//flex	: 1,
				dataIndex	: 'pressureinlet',
				renderer	: function(value, metaData, record, rowIdx, colIdx, store, view)
				{
					var volume = record.get('pressureinlet');
					//var parameter_periode	 = record.get('parameter_periode');
					//var message = getColorEstimasi(tgl_pengukuran,jam_pengukuran,tbl_station_id,tbl_parameter,parameter_periode);
					if (parseInt(volume) == 0) 
					{
						return '<div style="color:#FF0000">'+value+'</div>';
					}else
					{
						return value;
					}
				}
			},
			{
				text	: 'Tekanan OUT <br /> (PSIG)',
				align	: 'center',
				//flex	: 1,
				dataIndex	: 'pressureoutlet',
				renderer	: function(value, metaData, record, rowIdx, colIdx, store, view)
				{
					var volume = record.get('pressureoutlet');
					//var parameter_periode	 = record.get('parameter_periode');
					//var message = getColorEstimasi(tgl_pengukuran,jam_pengukuran,tbl_station_id,tbl_parameter,parameter_periode);
					if (parseInt(volume) == 0) 
					{
						return '<div style="color:#FF0000">'+value+'</div>';
					}else
					{
						return value;
					}
				}
			},
			{
				text	: 'Temperature',
				align	: 'center',
				//flex	: 1,
				dataIndex	: 'temperature',
				renderer	: function(value, metaData, record, rowIdx, colIdx, store, view)
				{
					var volume = record.get('temperature');
					//var parameter_periode	 = record.get('parameter_periode');
					//var message = getColorEstimasi(tgl_pengukuran,jam_pengukuran,tbl_station_id,tbl_parameter,parameter_periode);
					if (parseInt(volume) == 0) 
					{
						return '<div style="color:#FF0000">'+value+'</div>';
					}else
					{
						return value;
					}
				}
			}],
			plugins	: editing,
			bbar: Ext.create('Ext.PagingToolbar', {
				pageSize: 10,
				store: Init.storeGridCopy,
				displayInfo: true
			}),
			listeners	: 
			{
				beforeitemcontextmenu: function(view, record, item, index, e)
				{
					e.stopEvent();
					data = record.data;
					medugridkelengkapan.showAt(e.getXY());
				},
				itemclick	: function(view, record, item, index, e, eOpts)
				{
					
				},
				select: function (model, record, index, eOpts) {
					//console.log(record.data);
					//record.data.selectopts = true;
					record.set('selectopts',true);
				},
				deselect: function (view, record, item, index, e, eOpts) {
					//console.log('deselect fired'+index);
					//record.data.selectopts = false;
					record.set('selectopts',false);
				}
			}
		});

        this.callParent(arguments);
    }
});