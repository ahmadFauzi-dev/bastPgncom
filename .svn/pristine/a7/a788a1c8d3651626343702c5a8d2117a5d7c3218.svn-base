Ext.define('analisa.rtpk.view.gridanomalirtpk' ,{
	extend: 'Ext.panel.Panel',    
	initComponent	: function()
	{
		
		var gridrtpkrejecto = Ext.create('analisa.rtpk.view.rejecto');	
		var msclass = Ext.create('master.global.geteventmenu'); 
		var event = Ext.decode(msclass.getevent(Init.idmenu));
		
		var d = new Date();
		var m = (d.getMonth()+1).toString();
		if (m.length < 2 ) { m = '0'+m;}
		var f = d.getFullYear()+'-'+m+'-'+d.getDate();	
		
		var queryy = " getvaldy_avr('', '', '"+f+"', '"+f+"', '', '', '1,2', '', '', 1, 1) ";
		var queryyanomali = " getalert_avr('AVR29189',1) ";
		
		var modelGridrtpkDaily = msclass.getmodel(queryy);
		modelGridrtpkDaily.push({name : 'selectopts', type:'boolean'},{name : 'kategori',type:'string'},{name : 'field',type:'string'},{name : 'field',type:'string'});
		
		var modelGridrtpkstatus = msclass.getmodel(queryyanomali);
		var modelValidateDetail = msclass.getmodel('tmp_keldatartpk');
		var columnss 	 = msclass.getcolumngrid('gridAnomalirtpk', queryy);		
		var columnsdetail 	 = msclass.getcolumn('tmp_keldatartpk');		
		var columnsstatus 	 = msclass.getcolumngrid('gridDetailAnomali',queryyanomali);		
		var filters 		 = [];		
		var filter 		 = [{
			"filter[0][field]" : "status_alert",
			"filter[0][data][type]" : "list",			
			"filter[0][data][value]" : "0,1",
		}];	
			
		var storeGridrtpkDaily = msclass.getstore(modelValidateDetail,'tmp_keldatartpk',filters);
		var storeGridrtpkstatus = msclass.getstore(modelGridrtpkstatus,queryyanomali, filters);
		var storeGridValidate = msclass.getstore(modelGridrtpkDaily,queryy,filter);
		
		for (i = 1; i < columnsstatus.length ; i++) { 
			columnsstatus[i].renderer = function(value, metaData, record, row, col, store, gridView)
						{
							metaData.tdAttr= 'data-qtip="'+value+'"';
							return value;
						};
		}	
		
		// console.log(modelGridrtpkDaily);
		// storeGridValidate.load();
		
		var gridDetailHistoryAnomali = Ext.create('Ext.grid.Panel',{
			store	: storeGridrtpkDaily,
			loadMask: true, 
			id		: 'gridDetailHistoryAnomali',		
			columns		: columnsdetail
		
		});	
		
		var gridDetailAnomali = Ext.create('Ext.grid.Panel',{
			store	: storeGridrtpkstatus,
			loadMask: true, 
			id		: 'gridstatusAnomali',		
			columns		: columnsstatus
		
		});	
		
		columnss[3].renderer = function(value, metaData, record, rowIdx, colIdx, store, view){					
					var color = '';
					if(record.get('status_alert') == "2")
					{
						color = base_url+'asset/ico/green_indicator.ico';
					}else if(record.get('status_alert') == "1")
					{
						color = base_url+'asset/ico/yellow_indicator.ico';
					}else
					{
						color = base_url+'asset/ico/red_indicator.ico';
					}
					return '<div><img src='+color+' width="16px" height="16px"></div>';					
				};
		// columnss[4].text = 'GDMR';
		
		var gridDataValidate = Ext.create('Ext.grid.Panel',
		{	
			loadMask: true, 
			multiSelect	: true,
			selType		: 'checkboxmodel',
			selModel: {
					injectCheckbox: 0,
					pruneRemoved: false,
					showHeaderCheckbox: false
				},		
			store		: storeGridValidate,
			id			: 'gridAnomalirtpk',		
			dockedItems: [
		{
			xtype: 'toolbar',
			items: [
				{
					iconCls : 'accept',					
					text	: 'Approve',
					// hidden	: event.p_approve,
					menu 	: {
						items	: [{
							text	: 'Approve All',
							handler	: function()
							{								
								var extraparams = storeGridrtpkDaily.proxy.extraParams;
								//console.log(storeGridrtpkDaily);
								extraparams.limit = storeGridrtpkDaily.pageSize;
								extraparams.start = parseInt(storeGridrtpkDaily.currentPage) - 1;
								extraparams.stat  = 1;								
									
									console.log(extraparams);
									extraparams.id = 'gridAnomalirtpk';
								var url = base_url+'analisa/rtpk/updateapprovalAll';
								msclass.savedata(extraparams,url);
							}
						},
						{
							text	: 'Approve Selected',
							handler	: function()
							{								
								var items = [];
								storeGridValidate.each(function(record){
									
									if (record.data.selectopts == true)
									{
										items.push(record.data);
									}
								});
								console.log(items);
								
								Ext.Ajax.request({ 
									url			: base_url+'analisa/rtpk/updateapproval',
									method: 'POST',
									params:{
										data : Ext.encode(items)
									},
									success: function(response,requst){										
										// console.log(response.responseText);
										var message = Ext.decode(response.responseText);
										// console.log(message.success);
										if(message.success == false)
										{
											Ext.Msg.alert('Error','Data sudah di Approve oleh user lain');
										}else
										{
											Ext.Msg.alert('Sukses','Data Telah di Approve');
											
										}
										storeGridValidate.removeAll();								
										storeGridValidate.reload();
									},
									failure: function(response,requst)
									{										
										Ext.Msg.alert('Fail !','Input Data Gagal '+response);	
										
									}										
								}); 
							}
						}]
					}
	
				},{
					text: 'Reject',
					iconCls : 'cancel',
					// hidden	: event.p_reject,
					handler : function() 
					{
						
							Ext.Msg.show({
								 title:'Warning'
								,msg:'Anda Yakin..?'
								,buttons:Ext.Msg.YESNO
								,callback:function(btn) {
									if('yes' === btn) {
										
						Init.storeGridCopy = Ext.getCmp('gridrtpkrejecto').getStore();
						var tabbbPanel = Ext.getCmp('TabAsikAja');
						// tabbbPanel.remove('gridrtpkrejecto', true);
						var items = [];
						// var exist = false;
						Init.storeGridCopy.removeAll();
						storeGridValidate.each(function(record){
							
							if (record.data.selectopts == true)
							{
								// tabbbPanel.add(gridrtpkrejecto);
								Init.storeGridCopy.add(record.copy());
								// items.push(record.data);
								//console.log(record.data);
							}
						});
						
						/* tabbbPanel.items.each(function(c){
							if (c.title == 'AMR Reject') {
								tabbbPanel.setActiveTab('gridrtpkrejecto');
								exist = true;
							} else {
								exist = false;
							}
						}); */

						storeGridValidate.removeAll();								
						storeGridValidate.reload();				
						
						if (!Init.existtabreject) {							
							tabbbPanel.add(gridrtpkrejecto);
							tabbbPanel.child('#gridrtpkrejecto').tab.show();							
							tabbbPanel.setActiveTab('gridrtpkrejecto');
							Init.existtabreject = true;
						} else {
							tabbbPanel.child('#gridrtpkrejecto').tab.show();							
							tabbbPanel.setActiveTab('gridrtpkrejecto');
							
						}
						
									}
								}
							});
						
						

					}
				},{
					text	: 'Export',
					// hidden	: event.p_export,
					iconCls : 'page_white_excel',
					xtype : 'button',					
					handler: function (){		
						// var a = storeGridValidate.getProxy().extraParams;
						// console.log(a);
						// msclass.exportdata('gridAnomalirtpk',a.view);
						window.location.href = base_url+'analisa/rtpk/toexcel?typeexport=Anomali&filter='+Ext.encode(Init.specialparams);
					}
				}			
			]
		},
		{
			xtype: 'pagingtoolbar',
			dock: 'bottom',
			store: storeGridValidate,
			displayInfo: true,
			plugins : [Ext.create('Ext.ux.PagingToolbarResizer')]
		}],			
			columns		: columnss,
			viewConfig: {
				listeners: {
					refresh: function(dataview) {
						Ext.each(dataview.panel.columns, function(column) {
							if (column.autoSizeColumn === true)
								column.autoSize();
						})
					}
				}
			},
			listeners	: 
			{

			/* selectionchange: function (sm, records, options) {
				var rec = records[0];
				console.log('selectionchange fired '+ rec);
			}, 
			beforeselect: function(model, record, index, eOpts) {
				if (record.data.stat == 0) {//replace this with your logic.
					return false;
				}
			},*/
			itemclick : function(model, record, index, eOpts)
			{
				var darecord = record.data ;
				var storeanomali = Ext.getCmp('gridstatusAnomali').getStore();
					storeanomali.getProxy().extraParams = {
										view : " getalert_avr('"+darecord.rowid+"', 1)"	
										};	
					storeanomali.load();				
				
			},
			select: function (model, record, index, eOpts) {
				
				var dataselect = record.data;
				
				// var storeanomali = Ext.getCmp('gridstatusAnomali').getStore();
					// storeanomali.getProxy().extraParams = {
										// view : " getalert_avr('"+darecord.valdy_avrrowid+"', 2)"	
										// };	
					// storeanomali.load();	
					record.set('selectopts',true);
				// console.log(record.data.selectopts);
				
			},
			deselect: function (view, record, item, index, e, eOpts) {
				//console.log('deselect fired'+index);
				//record.data.selectopts = false;
				record.set('selectopts',false);
			}
			 
		}		
			}); 		
		
		
		
		// storeGridDaily.load();
		Ext.apply(this,{
			title  		: 'Non AMR Data Anomali',			
			frame: true,			
			iconCls 	: 'application_view_gallery',
			layout: 'border',
			defaults: {
                collapsible: true,
                split: true,
                //bodyStyle: 'padding:5px'
            },
			items: [
				{
					xtype : 'panel',
					title : 'Data Anomali',
					frame	: true,
					region : 'center',
					layout: 'fit',
					collapsible: false,
					flex: 3,					
					// autoScroll : true,
					border: false,
					items: gridDataValidate
					
				},	
				{
					xtype : 'panel',
					autoScroll : true,
					region : 'east',
					frame	: true,
					border	: false,
					title : 'Status Anomali',
					layout: 'fit',					
					flex: 1,
					items : gridDetailAnomali
				},				
				{
					xtype : 'panel',
					autoScroll : true,
					region : 'south',
					frame	: true,
					border	: false,
					title : 'History Pencatatan',
					layout: 'fit',					
					flex: 1,
					items : []
					// items : gridDetailHistoryAnomali
					// ,
					// tools: [
					// {
						// type:'gear',
						// tooltip: shide+' Detail',
						// callback: function() {
							// if (showDetailOK === 1 ){
								// showDetailOK = 0;
								// shide = 'Show';
								// console.log(showDetailOK + shide);
							// } else { 
								// showDetailOK = 1; 
								// shide = 'Hide';
								// console.log(showDetailOK + shide);
							// } 							
						// }
					
					// }]
				}
			]
		});
		this.callParent(arguments);
	}
});