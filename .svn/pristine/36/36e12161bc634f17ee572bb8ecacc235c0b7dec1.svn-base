Ext.define('EM.analisa.view.downgridpenyhourly' ,{
	extend: 'Ext.grid.Panel',
    //alias : 'widget.formco',
	initComponent	: function()
	{
		Ext.define('modelHourly',{
			extend	: 'Ext.data.Model',
			fields	: ['mmscfd','totalizer_mmbtu','totalizer_mscf','totalizer_energy','parameter_periode','totalizer_volume','tekanan_in_psig','tekanan_out_psig','temp_f','ghv','idx_jampengukuran_id','pcv','stat','tgl_pengukuran','tbl_station_id','nama_station','selectopts']
		});
		var editing = Ext.create('Ext.grid.plugin.RowEditing',{
			 clicksToEdit: 2,
			 listeners :
				{					
				'edit' : function (editor,e) {
						 
						 var grid 	= e.grid;
						 var record = e.record;
						 
						var recordData = record.data; 
							Ext.Ajax.request({ 
								
								url: base_url+'admin/updatedatabulkhourly',
								method: 'POST',
								params: recordData,
								success: function(response,requst){
									//workflowGrid.load();
									//console.log(response.text);
									//alert('test');
									storegridstationconfigdetail.reload();
								},
								failure:function(response,requst)
								{
									Ext.Msg.alert('Fail !','Input Data Entry Gagal');
									Ext.Msg.alert('Warning!', 'Authentication server is unreachable : ' + action.response.responseText + "");
								}
											
							})
							
					}
				}
		});
		
		var storeGridHourly = Ext.create('Ext.data.JsonStore',{
			model 	: 'modelHourly',
			proxy: {
				type: 'pgascomProxy',
				//extraParams:{'id':row_id},
				url: base_url+'admin/listkelengkapandatahourly',
				reader: {
					type: 'json',
					//pageSize	: 10,
					root: 'data'
				}
				//simpleSortMode: true
			}
		});
		
		//storeGridHourly.load();
		Ext.apply(this,{
			store		: storeGridHourly,
			//stateful	: true,
			//margins		: '10',
			id			: 'gridHourlykelengkapan',
			//selType		: 'checkboxmodel',
			selModel: {
				selType: 'checkboxmodel',
				mode: 'MULTI',
				checkOnly: true
				/*
				listeners: {
					select: function (model, record, index, eOpts) {
						//Ext.Msg.alert('', "You've clicked " + index.toString());
						console.log(record);
					}
				}
				*/
			},
			tbar		: [{
				text	: 'Rebatch',
				iconCls	: 'arrow_refresh',
				handler	: function()
				{	
					storeGridHourly.reload();
					var store = gridHourlykelengkapantaksasihourly.getStore();
					storeGridHourly.each(function(record){
					  //store2.add(record.copy());
						console.log(record);
					});
				}
			},
			{
				text	: 'Validasi',
				iconCls	: 'application_view_detail'
			},
			{
				text	: 'Taksasi',
				handler	: function()
				{
					var store = Ext.getCmp('gridHourlykelengkapantaksasihourly').getStore();
					store.removeAll();
					storeGridHourly.each(function(record){
					  //store2.add(record.copy());
						//console.log(record.daa);
						if(record.data.selectopts == true)
						{
							store.add(record.copy());
						}
					});
					//console.log("OKOKOK");
					//console.log(storeGridHourly);
				},
				iconCls	: 'brick_go'
			}],
			columns		: [
			Ext.create('Ext.grid.RowNumberer',{header:'No'}),
			{
				text	: 'station',
				align	: 'center',
				dataIndex	: 'nama_station'
			},
			{
				text	: 'Tanggal',
				align	: 'center',
				dataIndex	: 'tgl_pengukuran'
			},
			{
				text	: 'Jam',
				dataIndex	: 'idx_jampengukuran_id'
			},
			{
				text	: 'Volume',
				align	: 'center',
				dataIndex	: 'mmscfd',
				editor		: {
					xtype	: 'numberfield',
					allowDecimals: true,
					decimalPrecision: 14,
					name	: 'mmscfd'
				}
			},
			{
				text	: 'Energy <br /> BBTUD',
				align	: 'center',
				dataIndex	: 'totalizer_mmbtu',
				editor		: {
					xtype	: 'numberfield',
					allowDecimals: true,
					decimalPrecision: 14,
					name	: 'totalizer_mmbtu'
				}
			},
			{
				text	: 'Counter Volume <br /> (MMSCF)',
				align	: 'center',
				dataIndex	: 'totalizer_volume',
				editor		: {
					xtype	: 'numberfield',
					allowDecimals: true,
					decimalPrecision: 14,
					name	: 'totalizer_volume'
				}
				
			},
			{
				text	: 'Counter Energy <br /> (BBTU)',
				align	: 'center',
				dataIndex	: 'totalizer_energy',
				editor		: {
					xtype	: 'numberfield',
					allowDecimals: true,
					decimalPrecision: 14,
					name	: 'totalizer_energy'
				}
			},
			{
				text	: 'GHV <br /> (BTU/SCF)',
				align	: 'center',
				dataIndex	: 'ghv',
				editor		: {
					xtype	: 'numberfield',
					allowDecimals: true,
					decimalPrecision: 14,
					name	: 'ghv'
				}
			},
			{
				text	: 'Tekanan IN <br /> (PSIG)',
				align	: 'center',
				dataIndex	: 'tekanan_in_psig',
				editor		: {
					xtype	: 'numberfield',
					allowDecimals: true,
					decimalPrecision: 14,
					name	: 'tekanan_in_psig'
				}
			},
			{
				text	: 'Tekanan OUT <br /> (PSIG)',
				align	: 'center',
				dataIndex	: 'tekanan_out_psig',
				editor		: {
					xtype	: 'numberfield',
					allowDecimals: true,
					decimalPrecision: 14,
					name	: 'tekanan_out_psig'
				}
			},
			{
				text		: 'Temperature',
				align		: 'center',
				dataIndex	: 'temp_f',
				editor		: {
					xtype	: 'numberfield',
					allowDecimals: true,
					decimalPrecision: 14,
					name	: 'temp_f'
				}
			},
			{
				text		: 'PCV',
				align		: 'center',
				dataIndex	: 'pcv',
				editor		: {
					xtype	: 'numberfield',
					allowDecimals: true,
					decimalPrecision: 14,
					name	: 'pcv'
				}
			},
			{
				text		: 'Keterangan'
			}],
			plugins		: editing,
			bbar: Ext.create('Ext.PagingToolbar', {
				pageSize: 10,
				store: storeGridHourly,
				displayInfo: true
			}),
			listeners	: 
			{
				beforeitemcontextmenu: function(view, record, item, index, e)
				{
					e.stopEvent();
					//gridMenu.showAt(e.getXY());
				},
				itemclick	: function(view, record, item, index, e, eOpts)
				{
					//console.log(record.data);
				},
				selectionchange: function (view, record, item, index, e, eOpts) {
					//console.log('selectionchange fired'+index);
				},
				select: function (model, record, index, eOpts) {
					//console.log(record.data);
					//record.data.selectopts = true;
					record.set('selectopts',true);
				},
				deselect: function (view, record, item, index, e, eOpts) {
					//console.log('deselect fired'+index);
					//record.data.selectopts = false;
					record.set('selectopts',false);
				}
			}
		});
		this.callParent(arguments);
	}
})