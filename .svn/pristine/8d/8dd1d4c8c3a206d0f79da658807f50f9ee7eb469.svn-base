Ext.define('analisa.view.formkoreksiamr' ,{
		extend: 'Ext.form.Panel',
		// alias : 'widget.formvalidamr',

		initComponent: function() {
						
			Init.storeArea.load();
			Init.storeSBU.load();
			Ext.apply(this, {
				frame		: false,
				border		: false,
				layout		: 'form',
				frame  		: false,
				method		: 'POST',				
				bodyPadding: '5 5 0',
				fieldDefaults: {
					labelAlign: 'left',
					anchor: '60%'
				},
				id			: 'formkoreksi',
				items		: 
				[			
					{
						xtype		: 'datefield',
						fieldLabel	: 'Start Date',
						name		: 'startt',
						// margins		: '0 0 0 5',
						// labelWidth	: 150,
						format		: 'Y-m-d',
						//flex	: 1
					},
					{
						xtype			: 'datefield',
						// margins			: '0 0 0 5',
						name			: 'endd',
						//flex			: 2,
						// labelWidth		: 150,
						fieldLabel		: 'End Date',
						format			: 'Y-m-d',
		
					},					
					{
						xtype		: 'combobox',
						fieldLabel	: 'RD',						
						name		: 'sbu',
						displayField: 'description',
						valueField: 'description',
						queryMode: 'local',									
						store: Init.storeSBU,
						listeners : {
							select: function(combo) 
							{
								var values = combo.getValue(),
								record = combo.findRecordByValue(values);
								console.log(record.data.rowid);
								Init.storeArea.reload({ params : { sbu : record.data.rowid }});
								
							}
						}						
					},
					{
						xtype		: 'combobox',
						fieldLabel	: 'Area',						
						name		: 'area',
						displayField: 'namearea',
						valueField: 'namearea',
						queryMode: 'local',									
						store: Init.storeArea						
					},
					{
						xtype		: 'combobox',
						fieldLabel	: 'Status',						
						name		: 'status',
						displayField: 'name',
						valueField: 'id',
						queryMode: 'local',
						store: new Ext.data.ArrayStore({
									id: 0,
									fields: [
										'id',
										'name'
									],
									data: [[0, 'Not-approve'], [1, 'Approve'], [4, 'Rejected'],[3, 'All']]
						}), 						
					},
					{
						xtype		: 'textfield',
						fieldLabel	: 'ID Pelanggan',
						name		: 'id_pel'
					},
					{
						xtype		: 'textfield',
						fieldLabel	: 'Nama Pelanggan',
						name		: 'namapel'
					}					
				],
				buttons		: [{
							text	: 'Search',
							iconCls : 'magnifier',
							handler	: function()
							{
								// Ext.getCmp('searchtaksasiform').collapse();
								var findform = this.up('form').getForm();
								var oksparams = findform.getValues();
									/* for(var name in oksparams) {
										alert(oksparams[name]);
									} */
								var storekoreksi = Ext.getCmp('idgridamrkoreksi').getStore();
								var store1 = Ext.getCmp('idgriddetailKoreksi').getStore();
								var store2 = Ext.getCmp('idgridDetailPengukuran').getStore();
								//storee.reload({method: 'POST', params : oksparams});
								// storee.load({method: 'POST', params : oksparams});
								storekoreksi.getProxy().extraParams = {
									startt : oksparams.startt,
									endd : oksparams.endd,
									sbu : oksparams.sbu,
									area : oksparams.area,
									id_pel : oksparams.id_pel,
									namapel : oksparams.namapel,						
									status : oksparams.status						
									};
								storekoreksi.loadPage(1);
								// storekoreksi.reload({method: 'POST'});
								store1.removeAll();
								store2.removeAll();
								
								/* this.up('form').getForm().submit({
									waitTitle	: 'Harap Tunggu',
									waitMsg		: 'Insert data',
									success	:function(form, action)
									{
										var storee = Ext.getCmp('gridamrDaily').getStore();
										//store_site.reload();
										Ext.Msg.alert('Sukses','Pencarian Berhasil');
										storee.load();
									},
									failure:function(form, action)
									{
										Ext.Msg.alert('Warning!', 'Authentication server is unreachable : ' + action.response.responseText + "");
									}
								}); */
							}
						},
						{
							text	: 'Reset',
							iconCls : 'arrow_refresh',
							handler	: function()
							{
								this.up('form').getForm().reset();
							}
						}
				]
		});

		this.callParent(arguments);
	}
	});